// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Common
{
    /// <summary> Legal organisation type. </summary>
    public readonly partial struct CommonOrganisationType : IEquatable<CommonOrganisationType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CommonOrganisationType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommonOrganisationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CompanyValue = "COMPANY";
        private const string GovernmentEntityValue = "GOVERNMENT_ENTITY";
        private const string OtherValue = "OTHER";
        private const string PartnershipValue = "PARTNERSHIP";
        private const string SoleTraderValue = "SOLE_TRADER";
        private const string TrustValue = "TRUST";

        /// <summary> COMPANY. </summary>
        public static CommonOrganisationType Company { get; } = new CommonOrganisationType(CompanyValue);
        /// <summary> GOVERNMENT_ENTITY. </summary>
        public static CommonOrganisationType GovernmentEntity { get; } = new CommonOrganisationType(GovernmentEntityValue);
        /// <summary> OTHER. </summary>
        public static CommonOrganisationType Other { get; } = new CommonOrganisationType(OtherValue);
        /// <summary> PARTNERSHIP. </summary>
        public static CommonOrganisationType Partnership { get; } = new CommonOrganisationType(PartnershipValue);
        /// <summary> SOLE_TRADER. </summary>
        public static CommonOrganisationType SoleTrader { get; } = new CommonOrganisationType(SoleTraderValue);
        /// <summary> TRUST. </summary>
        public static CommonOrganisationType Trust { get; } = new CommonOrganisationType(TrustValue);
        /// <summary> Determines if two <see cref="CommonOrganisationType"/> values are the same. </summary>
        public static bool operator ==(CommonOrganisationType left, CommonOrganisationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommonOrganisationType"/> values are not the same. </summary>
        public static bool operator !=(CommonOrganisationType left, CommonOrganisationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CommonOrganisationType"/>. </summary>
        public static implicit operator CommonOrganisationType(string value) => new CommonOrganisationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommonOrganisationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommonOrganisationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
