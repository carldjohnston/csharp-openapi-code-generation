// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Common
{
    /// <summary> The type of customer object that is present. </summary>
    public readonly partial struct ResponseCommonCustomerDataCustomerUType : IEquatable<ResponseCommonCustomerDataCustomerUType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ResponseCommonCustomerDataCustomerUType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResponseCommonCustomerDataCustomerUType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OrganisationValue = "organisation";
        private const string PersonValue = "person";

        /// <summary> organisation. </summary>
        public static ResponseCommonCustomerDataCustomerUType Organisation { get; } = new ResponseCommonCustomerDataCustomerUType(OrganisationValue);
        /// <summary> person. </summary>
        public static ResponseCommonCustomerDataCustomerUType Person { get; } = new ResponseCommonCustomerDataCustomerUType(PersonValue);
        /// <summary> Determines if two <see cref="ResponseCommonCustomerDataCustomerUType"/> values are the same. </summary>
        public static bool operator ==(ResponseCommonCustomerDataCustomerUType left, ResponseCommonCustomerDataCustomerUType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResponseCommonCustomerDataCustomerUType"/> values are not the same. </summary>
        public static bool operator !=(ResponseCommonCustomerDataCustomerUType left, ResponseCommonCustomerDataCustomerUType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResponseCommonCustomerDataCustomerUType"/>. </summary>
        public static implicit operator ResponseCommonCustomerDataCustomerUType(string value) => new ResponseCommonCustomerDataCustomerUType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResponseCommonCustomerDataCustomerUType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResponseCommonCustomerDataCustomerUType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
