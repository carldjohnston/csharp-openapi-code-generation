// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Common
{
    /// <summary> The purpose of the number as specified by the customer. </summary>
    public readonly partial struct CommonPhoneNumberPurpose : IEquatable<CommonPhoneNumberPurpose>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CommonPhoneNumberPurpose"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommonPhoneNumberPurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HomeValue = "HOME";
        private const string InternationalValue = "INTERNATIONAL";
        private const string MobileValue = "MOBILE";
        private const string OtherValue = "OTHER";
        private const string UnspecifiedValue = "UNSPECIFIED";
        private const string WorkValue = "WORK";

        /// <summary> HOME. </summary>
        public static CommonPhoneNumberPurpose Home { get; } = new CommonPhoneNumberPurpose(HomeValue);
        /// <summary> INTERNATIONAL. </summary>
        public static CommonPhoneNumberPurpose International { get; } = new CommonPhoneNumberPurpose(InternationalValue);
        /// <summary> MOBILE. </summary>
        public static CommonPhoneNumberPurpose Mobile { get; } = new CommonPhoneNumberPurpose(MobileValue);
        /// <summary> OTHER. </summary>
        public static CommonPhoneNumberPurpose Other { get; } = new CommonPhoneNumberPurpose(OtherValue);
        /// <summary> UNSPECIFIED. </summary>
        public static CommonPhoneNumberPurpose Unspecified { get; } = new CommonPhoneNumberPurpose(UnspecifiedValue);
        /// <summary> WORK. </summary>
        public static CommonPhoneNumberPurpose Work { get; } = new CommonPhoneNumberPurpose(WorkValue);
        /// <summary> Determines if two <see cref="CommonPhoneNumberPurpose"/> values are the same. </summary>
        public static bool operator ==(CommonPhoneNumberPurpose left, CommonPhoneNumberPurpose right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommonPhoneNumberPurpose"/> values are not the same. </summary>
        public static bool operator !=(CommonPhoneNumberPurpose left, CommonPhoneNumberPurpose right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CommonPhoneNumberPurpose"/>. </summary>
        public static implicit operator CommonPhoneNumberPurpose(string value) => new CommonPhoneNumberPurpose(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommonPhoneNumberPurpose other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommonPhoneNumberPurpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
