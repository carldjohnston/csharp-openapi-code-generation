// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Common
{
    /// <summary> Enumeration of values indicating the purpose of the physical address. </summary>
    public readonly partial struct CommonPhysicalAddressWithPurpose1Purpose : IEquatable<CommonPhysicalAddressWithPurpose1Purpose>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CommonPhysicalAddressWithPurpose1Purpose"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommonPhysicalAddressWithPurpose1Purpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MailValue = "MAIL";
        private const string OtherValue = "OTHER";
        private const string PhysicalValue = "PHYSICAL";
        private const string RegisteredValue = "REGISTERED";
        private const string WorkValue = "WORK";

        /// <summary> MAIL. </summary>
        public static CommonPhysicalAddressWithPurpose1Purpose Mail { get; } = new CommonPhysicalAddressWithPurpose1Purpose(MailValue);
        /// <summary> OTHER. </summary>
        public static CommonPhysicalAddressWithPurpose1Purpose Other { get; } = new CommonPhysicalAddressWithPurpose1Purpose(OtherValue);
        /// <summary> PHYSICAL. </summary>
        public static CommonPhysicalAddressWithPurpose1Purpose Physical { get; } = new CommonPhysicalAddressWithPurpose1Purpose(PhysicalValue);
        /// <summary> REGISTERED. </summary>
        public static CommonPhysicalAddressWithPurpose1Purpose Registered { get; } = new CommonPhysicalAddressWithPurpose1Purpose(RegisteredValue);
        /// <summary> WORK. </summary>
        public static CommonPhysicalAddressWithPurpose1Purpose Work { get; } = new CommonPhysicalAddressWithPurpose1Purpose(WorkValue);
        /// <summary> Determines if two <see cref="CommonPhysicalAddressWithPurpose1Purpose"/> values are the same. </summary>
        public static bool operator ==(CommonPhysicalAddressWithPurpose1Purpose left, CommonPhysicalAddressWithPurpose1Purpose right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommonPhysicalAddressWithPurpose1Purpose"/> values are not the same. </summary>
        public static bool operator !=(CommonPhysicalAddressWithPurpose1Purpose left, CommonPhysicalAddressWithPurpose1Purpose right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CommonPhysicalAddressWithPurpose1Purpose"/>. </summary>
        public static implicit operator CommonPhysicalAddressWithPurpose1Purpose(string value) => new CommonPhysicalAddressWithPurpose1Purpose(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommonPhysicalAddressWithPurpose1Purpose other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommonPhysicalAddressWithPurpose1Purpose other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
