// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Common
{
    /// <summary> The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if ``industryCode`` is also supplied. If ``industryCode`` is supplied but ``industryCodeVersion`` is absent, default is ``ANZSIC_1292.0_2006_V2.0``. </summary>
    public readonly partial struct CommonOrganisationIndustryCodeVersion : IEquatable<CommonOrganisationIndustryCodeVersion>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CommonOrganisationIndustryCodeVersion"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommonOrganisationIndustryCodeVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Anzsic129202006V10Value = "ANZSIC_1292.0_2006_V1.0";
        private const string Anzsic129202006V20Value = "ANZSIC_1292.0_2006_V2.0";

        /// <summary> ANZSIC_1292.0_2006_V1.0. </summary>
        public static CommonOrganisationIndustryCodeVersion Anzsic129202006V10 { get; } = new CommonOrganisationIndustryCodeVersion(Anzsic129202006V10Value);
        /// <summary> ANZSIC_1292.0_2006_V2.0. </summary>
        public static CommonOrganisationIndustryCodeVersion Anzsic129202006V20 { get; } = new CommonOrganisationIndustryCodeVersion(Anzsic129202006V20Value);
        /// <summary> Determines if two <see cref="CommonOrganisationIndustryCodeVersion"/> values are the same. </summary>
        public static bool operator ==(CommonOrganisationIndustryCodeVersion left, CommonOrganisationIndustryCodeVersion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommonOrganisationIndustryCodeVersion"/> values are not the same. </summary>
        public static bool operator !=(CommonOrganisationIndustryCodeVersion left, CommonOrganisationIndustryCodeVersion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CommonOrganisationIndustryCodeVersion"/>. </summary>
        public static implicit operator CommonOrganisationIndustryCodeVersion(string value) => new CommonOrganisationIndustryCodeVersion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommonOrganisationIndustryCodeVersion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommonOrganisationIndustryCodeVersion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
