// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Agl.Cdr.Admin.Models
{
    /// <summary> Number of API calls in each performance tier over time. </summary>
    public partial class InvocationMetricsV2
    {
        /// <summary> Initializes a new instance of InvocationMetricsV2. </summary>
        /// <param name="unauthenticated"> API call counts for the unauthenticated tier. </param>
        /// <param name="highPriority"> API call counts for the high priority tier. </param>
        /// <param name="lowPriority"> API call counts for the low priority tier. </param>
        /// <param name="unattended"> API call counts for the unattended tier. </param>
        /// <param name="largePayload"> API call counts for the large payload tier. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="unauthenticated"/>, <paramref name="highPriority"/>, <paramref name="lowPriority"/>, <paramref name="unattended"/>, or <paramref name="largePayload"/> is null. </exception>
        internal InvocationMetricsV2(InvocationMetricsV2Unauthenticated unauthenticated, InvocationMetricsV2HighPriority highPriority, InvocationMetricsV2LowPriority lowPriority, InvocationMetricsV2Unattended unattended, InvocationMetricsV2LargePayload largePayload)
        {
            if (unauthenticated == null)
            {
                throw new ArgumentNullException(nameof(unauthenticated));
            }
            if (highPriority == null)
            {
                throw new ArgumentNullException(nameof(highPriority));
            }
            if (lowPriority == null)
            {
                throw new ArgumentNullException(nameof(lowPriority));
            }
            if (unattended == null)
            {
                throw new ArgumentNullException(nameof(unattended));
            }
            if (largePayload == null)
            {
                throw new ArgumentNullException(nameof(largePayload));
            }

            Unauthenticated = unauthenticated;
            HighPriority = highPriority;
            LowPriority = lowPriority;
            Unattended = unattended;
            LargePayload = largePayload;
        }

        /// <summary> Initializes a new instance of InvocationMetricsV2. </summary>
        /// <param name="unauthenticated"> API call counts for the unauthenticated tier. </param>
        /// <param name="highPriority"> API call counts for the high priority tier. </param>
        /// <param name="lowPriority"> API call counts for the low priority tier. </param>
        /// <param name="unattended"> API call counts for the unattended tier. </param>
        /// <param name="largePayload"> API call counts for the large payload tier. </param>
        /// <param name="secondary"> API call counts for the Shared Responsibility Data Requests tier.  Mandatory for data holders designated for a Shared Responsibility Data Request data cluster. </param>
        /// <param name="largeSecondary"> API call counts for the large Shared Responsibility Data Requests tier.  Mandatory for data holders designated for a Shared Responsibility Data Request data cluster. </param>
        internal InvocationMetricsV2(InvocationMetricsV2Unauthenticated unauthenticated, InvocationMetricsV2HighPriority highPriority, InvocationMetricsV2LowPriority lowPriority, InvocationMetricsV2Unattended unattended, InvocationMetricsV2LargePayload largePayload, InvocationMetricsV2Secondary secondary, InvocationMetricsV2LargeSecondary largeSecondary)
        {
            Unauthenticated = unauthenticated;
            HighPriority = highPriority;
            LowPriority = lowPriority;
            Unattended = unattended;
            LargePayload = largePayload;
            Secondary = secondary;
            LargeSecondary = largeSecondary;
        }

        /// <summary> API call counts for the unauthenticated tier. </summary>
        public InvocationMetricsV2Unauthenticated Unauthenticated { get; }
        /// <summary> API call counts for the high priority tier. </summary>
        public InvocationMetricsV2HighPriority HighPriority { get; }
        /// <summary> API call counts for the low priority tier. </summary>
        public InvocationMetricsV2LowPriority LowPriority { get; }
        /// <summary> API call counts for the unattended tier. </summary>
        public InvocationMetricsV2Unattended Unattended { get; }
        /// <summary> API call counts for the large payload tier. </summary>
        public InvocationMetricsV2LargePayload LargePayload { get; }
        /// <summary> API call counts for the Shared Responsibility Data Requests tier.  Mandatory for data holders designated for a Shared Responsibility Data Request data cluster. </summary>
        public InvocationMetricsV2Secondary Secondary { get; }
        /// <summary> API call counts for the large Shared Responsibility Data Requests tier.  Mandatory for data holders designated for a Shared Responsibility Data Request data cluster. </summary>
        public InvocationMetricsV2LargeSecondary LargeSecondary { get; }
    }
}
