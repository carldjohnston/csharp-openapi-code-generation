// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Code to identify the time validity of register contents. </summary>
    public readonly partial struct EnergyServicePointDetailMetersRegistersTimeOfDay : IEquatable<EnergyServicePointDetailMetersRegistersTimeOfDay>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersTimeOfDay"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyServicePointDetailMetersRegistersTimeOfDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlldayValue = "ALLDAY";
        private const string IntervalValue = "INTERVAL";
        private const string PeakValue = "PEAK";
        private const string BusinessValue = "BUSINESS";
        private const string ShoulderValue = "SHOULDER";
        private const string EveningValue = "EVENING";
        private const string OffpeakValue = "OFFPEAK";
        private const string ControlledValue = "CONTROLLED";
        private const string DemandValue = "DEMAND";

        /// <summary> ALLDAY. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Allday { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(AlldayValue);
        /// <summary> INTERVAL. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Interval { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(IntervalValue);
        /// <summary> PEAK. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Peak { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(PeakValue);
        /// <summary> BUSINESS. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Business { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(BusinessValue);
        /// <summary> SHOULDER. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Shoulder { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(ShoulderValue);
        /// <summary> EVENING. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Evening { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(EveningValue);
        /// <summary> OFFPEAK. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Offpeak { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(OffpeakValue);
        /// <summary> CONTROLLED. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Controlled { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(ControlledValue);
        /// <summary> DEMAND. </summary>
        public static EnergyServicePointDetailMetersRegistersTimeOfDay Demand { get; } = new EnergyServicePointDetailMetersRegistersTimeOfDay(DemandValue);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersTimeOfDay"/> values are the same. </summary>
        public static bool operator ==(EnergyServicePointDetailMetersRegistersTimeOfDay left, EnergyServicePointDetailMetersRegistersTimeOfDay right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersTimeOfDay"/> values are not the same. </summary>
        public static bool operator !=(EnergyServicePointDetailMetersRegistersTimeOfDay left, EnergyServicePointDetailMetersRegistersTimeOfDay right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyServicePointDetailMetersRegistersTimeOfDay"/>. </summary>
        public static implicit operator EnergyServicePointDetailMetersRegistersTimeOfDay(string value) => new EnergyServicePointDetailMetersRegistersTimeOfDay(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyServicePointDetailMetersRegistersTimeOfDay other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyServicePointDetailMetersRegistersTimeOfDay other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
