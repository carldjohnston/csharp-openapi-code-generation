// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of charge. </summary>
    public readonly partial struct EnergyPlanGreenPowerChargesItemType : IEquatable<EnergyPlanGreenPowerChargesItemType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanGreenPowerChargesItemType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanGreenPowerChargesItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FixedPERDAYValue = "FIXED_PER_DAY";
        private const string FixedPERWeekValue = "FIXED_PER_WEEK";
        private const string FixedPERMonthValue = "FIXED_PER_MONTH";
        private const string FixedPERUnitValue = "FIXED_PER_UNIT";
        private const string PercentOFUSEValue = "PERCENT_OF_USE";
        private const string PercentOFBillValue = "PERCENT_OF_BILL";

        /// <summary> FIXED_PER_DAY. </summary>
        public static EnergyPlanGreenPowerChargesItemType FixedPERDAY { get; } = new EnergyPlanGreenPowerChargesItemType(FixedPERDAYValue);
        /// <summary> FIXED_PER_WEEK. </summary>
        public static EnergyPlanGreenPowerChargesItemType FixedPERWeek { get; } = new EnergyPlanGreenPowerChargesItemType(FixedPERWeekValue);
        /// <summary> FIXED_PER_MONTH. </summary>
        public static EnergyPlanGreenPowerChargesItemType FixedPERMonth { get; } = new EnergyPlanGreenPowerChargesItemType(FixedPERMonthValue);
        /// <summary> FIXED_PER_UNIT. </summary>
        public static EnergyPlanGreenPowerChargesItemType FixedPERUnit { get; } = new EnergyPlanGreenPowerChargesItemType(FixedPERUnitValue);
        /// <summary> PERCENT_OF_USE. </summary>
        public static EnergyPlanGreenPowerChargesItemType PercentOFUSE { get; } = new EnergyPlanGreenPowerChargesItemType(PercentOFUSEValue);
        /// <summary> PERCENT_OF_BILL. </summary>
        public static EnergyPlanGreenPowerChargesItemType PercentOFBill { get; } = new EnergyPlanGreenPowerChargesItemType(PercentOFBillValue);
        /// <summary> Determines if two <see cref="EnergyPlanGreenPowerChargesItemType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanGreenPowerChargesItemType left, EnergyPlanGreenPowerChargesItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanGreenPowerChargesItemType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanGreenPowerChargesItemType left, EnergyPlanGreenPowerChargesItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanGreenPowerChargesItemType"/>. </summary>
        public static implicit operator EnergyPlanGreenPowerChargesItemType(string value) => new EnergyPlanGreenPowerChargesItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanGreenPowerChargesItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanGreenPowerChargesItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
