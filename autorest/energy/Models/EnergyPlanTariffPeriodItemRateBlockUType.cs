// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Specifies the type of rate applicable to this tariff period. </summary>
    public readonly partial struct EnergyPlanTariffPeriodItemRateBlockUType : IEquatable<EnergyPlanTariffPeriodItemRateBlockUType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemRateBlockUType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanTariffPeriodItemRateBlockUType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SingleRateValue = "singleRate";
        private const string TimeOfUseRatesValue = "timeOfUseRates";
        private const string DemandChargesValue = "demandCharges";

        /// <summary> singleRate. </summary>
        public static EnergyPlanTariffPeriodItemRateBlockUType SingleRate { get; } = new EnergyPlanTariffPeriodItemRateBlockUType(SingleRateValue);
        /// <summary> timeOfUseRates. </summary>
        public static EnergyPlanTariffPeriodItemRateBlockUType TimeOfUseRates { get; } = new EnergyPlanTariffPeriodItemRateBlockUType(TimeOfUseRatesValue);
        /// <summary> demandCharges. </summary>
        public static EnergyPlanTariffPeriodItemRateBlockUType DemandCharges { get; } = new EnergyPlanTariffPeriodItemRateBlockUType(DemandChargesValue);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemRateBlockUType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanTariffPeriodItemRateBlockUType left, EnergyPlanTariffPeriodItemRateBlockUType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemRateBlockUType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanTariffPeriodItemRateBlockUType left, EnergyPlanTariffPeriodItemRateBlockUType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanTariffPeriodItemRateBlockUType"/>. </summary>
        public static implicit operator EnergyPlanTariffPeriodItemRateBlockUType(string value) => new EnergyPlanTariffPeriodItemRateBlockUType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanTariffPeriodItemRateBlockUType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanTariffPeriodItemRateBlockUType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
