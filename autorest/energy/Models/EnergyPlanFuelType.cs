// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The fuel types covered by the plan. </summary>
    public readonly partial struct EnergyPlanFuelType : IEquatable<EnergyPlanFuelType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanFuelType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanFuelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ElectricityValue = "ELECTRICITY";
        private const string GASValue = "GAS";
        private const string DualValue = "DUAL";

        /// <summary> ELECTRICITY. </summary>
        public static EnergyPlanFuelType Electricity { get; } = new EnergyPlanFuelType(ElectricityValue);
        /// <summary> GAS. </summary>
        public static EnergyPlanFuelType GAS { get; } = new EnergyPlanFuelType(GASValue);
        /// <summary> DUAL. </summary>
        public static EnergyPlanFuelType Dual { get; } = new EnergyPlanFuelType(DualValue);
        /// <summary> Determines if two <see cref="EnergyPlanFuelType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanFuelType left, EnergyPlanFuelType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanFuelType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanFuelType left, EnergyPlanFuelType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanFuelType"/>. </summary>
        public static implicit operator EnergyPlanFuelType(string value) => new EnergyPlanFuelType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanFuelType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanFuelType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
