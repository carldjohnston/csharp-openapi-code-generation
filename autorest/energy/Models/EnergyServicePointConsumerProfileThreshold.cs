// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> A code that defines the consumption threshold as defined in the National Energy Retail Regulations, or in overriding Jurisdictional instruments. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**LOW** - Consumption is less than the ‘lower consumption threshold’ as defined in the National Energy Retail Regulations&lt;/li&gt;&lt;li&gt;**MEDIUM** - Consumption is equal to or greater than the ‘lower consumption threshold’, but less than the ‘upper consumption threshold’, as defined in the National Energy Retail Regulations&lt;/li&gt;&lt;li&gt;**HIGH** - Consumption is equal to or greater than the ‘upper consumption threshold’ as defined in the National Energy Retail Regulations&lt;/li&gt;&lt;/ul&gt;. </summary>
    public readonly partial struct EnergyServicePointConsumerProfileThreshold : IEquatable<EnergyServicePointConsumerProfileThreshold>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyServicePointConsumerProfileThreshold"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyServicePointConsumerProfileThreshold(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LOWValue = "LOW";
        private const string MediumValue = "MEDIUM";
        private const string HighValue = "HIGH";

        /// <summary> LOW. </summary>
        public static EnergyServicePointConsumerProfileThreshold LOW { get; } = new EnergyServicePointConsumerProfileThreshold(LOWValue);
        /// <summary> MEDIUM. </summary>
        public static EnergyServicePointConsumerProfileThreshold Medium { get; } = new EnergyServicePointConsumerProfileThreshold(MediumValue);
        /// <summary> HIGH. </summary>
        public static EnergyServicePointConsumerProfileThreshold High { get; } = new EnergyServicePointConsumerProfileThreshold(HighValue);
        /// <summary> Determines if two <see cref="EnergyServicePointConsumerProfileThreshold"/> values are the same. </summary>
        public static bool operator ==(EnergyServicePointConsumerProfileThreshold left, EnergyServicePointConsumerProfileThreshold right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyServicePointConsumerProfileThreshold"/> values are not the same. </summary>
        public static bool operator !=(EnergyServicePointConsumerProfileThreshold left, EnergyServicePointConsumerProfileThreshold right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyServicePointConsumerProfileThreshold"/>. </summary>
        public static implicit operator EnergyServicePointConsumerProfileThreshold(string value) => new EnergyServicePointConsumerProfileThreshold(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyServicePointConsumerProfileThreshold other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyServicePointConsumerProfileThreshold other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
