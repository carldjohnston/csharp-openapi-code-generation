// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of the fee. </summary>
    public readonly partial struct EnergyPlanFeesItemType : IEquatable<EnergyPlanFeesItemType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanFeesItemType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanFeesItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExitValue = "EXIT";
        private const string EstablishmentValue = "ESTABLISHMENT";
        private const string LatePaymentValue = "LATE_PAYMENT";
        private const string DisconnectionValue = "DISCONNECTION";
        private const string DisconnectMoveOUTValue = "DISCONNECT_MOVE_OUT";
        private const string DisconnectNONPAYValue = "DISCONNECT_NON_PAY";
        private const string ReconnectionValue = "RECONNECTION";
        private const string ConnectionValue = "CONNECTION";
        private const string PaymentProcessingValue = "PAYMENT_PROCESSING";
        private const string CCProcessingValue = "CC_PROCESSING";
        private const string ChequeDishonourValue = "CHEQUE_DISHONOUR";
        private const string DDDishonourValue = "DD_DISHONOUR";
        private const string MembershipValue = "MEMBERSHIP";
        private const string ContributionValue = "CONTRIBUTION";
        private const string PaperBillValue = "PAPER_BILL";
        private const string OtherValue = "OTHER";

        /// <summary> EXIT. </summary>
        public static EnergyPlanFeesItemType Exit { get; } = new EnergyPlanFeesItemType(ExitValue);
        /// <summary> ESTABLISHMENT. </summary>
        public static EnergyPlanFeesItemType Establishment { get; } = new EnergyPlanFeesItemType(EstablishmentValue);
        /// <summary> LATE_PAYMENT. </summary>
        public static EnergyPlanFeesItemType LatePayment { get; } = new EnergyPlanFeesItemType(LatePaymentValue);
        /// <summary> DISCONNECTION. </summary>
        public static EnergyPlanFeesItemType Disconnection { get; } = new EnergyPlanFeesItemType(DisconnectionValue);
        /// <summary> DISCONNECT_MOVE_OUT. </summary>
        public static EnergyPlanFeesItemType DisconnectMoveOUT { get; } = new EnergyPlanFeesItemType(DisconnectMoveOUTValue);
        /// <summary> DISCONNECT_NON_PAY. </summary>
        public static EnergyPlanFeesItemType DisconnectNONPAY { get; } = new EnergyPlanFeesItemType(DisconnectNONPAYValue);
        /// <summary> RECONNECTION. </summary>
        public static EnergyPlanFeesItemType Reconnection { get; } = new EnergyPlanFeesItemType(ReconnectionValue);
        /// <summary> CONNECTION. </summary>
        public static EnergyPlanFeesItemType Connection { get; } = new EnergyPlanFeesItemType(ConnectionValue);
        /// <summary> PAYMENT_PROCESSING. </summary>
        public static EnergyPlanFeesItemType PaymentProcessing { get; } = new EnergyPlanFeesItemType(PaymentProcessingValue);
        /// <summary> CC_PROCESSING. </summary>
        public static EnergyPlanFeesItemType CCProcessing { get; } = new EnergyPlanFeesItemType(CCProcessingValue);
        /// <summary> CHEQUE_DISHONOUR. </summary>
        public static EnergyPlanFeesItemType ChequeDishonour { get; } = new EnergyPlanFeesItemType(ChequeDishonourValue);
        /// <summary> DD_DISHONOUR. </summary>
        public static EnergyPlanFeesItemType DDDishonour { get; } = new EnergyPlanFeesItemType(DDDishonourValue);
        /// <summary> MEMBERSHIP. </summary>
        public static EnergyPlanFeesItemType Membership { get; } = new EnergyPlanFeesItemType(MembershipValue);
        /// <summary> CONTRIBUTION. </summary>
        public static EnergyPlanFeesItemType Contribution { get; } = new EnergyPlanFeesItemType(ContributionValue);
        /// <summary> PAPER_BILL. </summary>
        public static EnergyPlanFeesItemType PaperBill { get; } = new EnergyPlanFeesItemType(PaperBillValue);
        /// <summary> OTHER. </summary>
        public static EnergyPlanFeesItemType Other { get; } = new EnergyPlanFeesItemType(OtherValue);
        /// <summary> Determines if two <see cref="EnergyPlanFeesItemType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanFeesItemType left, EnergyPlanFeesItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanFeesItemType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanFeesItemType left, EnergyPlanFeesItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanFeesItemType"/>. </summary>
        public static implicit operator EnergyPlanFeesItemType(string value) => new EnergyPlanFeesItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanFeesItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanFeesItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
