// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Charge period for the demand tariff. </summary>
    public readonly partial struct EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod : IEquatable<EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DAYValue = "DAY";
        private const string MonthValue = "MONTH";
        private const string TariffPeriodValue = "TARIFF_PERIOD";

        /// <summary> DAY. </summary>
        public static EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod DAY { get; } = new EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod(DAYValue);
        /// <summary> MONTH. </summary>
        public static EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod Month { get; } = new EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod(MonthValue);
        /// <summary> TARIFF_PERIOD. </summary>
        public static EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod TariffPeriod { get; } = new EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod(TariffPeriodValue);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod left, EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod left, EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod"/>. </summary>
        public static implicit operator EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod(string value) => new EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanTariffPeriodItemDemandChargesItemChargePeriod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
