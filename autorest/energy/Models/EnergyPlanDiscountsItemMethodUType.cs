// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The method of calculation of the discount. </summary>
    public readonly partial struct EnergyPlanDiscountsItemMethodUType : IEquatable<EnergyPlanDiscountsItemMethodUType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanDiscountsItemMethodUType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanDiscountsItemMethodUType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PercentOfBillValue = "percentOfBill";
        private const string PercentOfUseValue = "percentOfUse";
        private const string FixedAmountValue = "fixedAmount";
        private const string PercentOverThresholdValue = "percentOverThreshold";

        /// <summary> percentOfBill. </summary>
        public static EnergyPlanDiscountsItemMethodUType PercentOfBill { get; } = new EnergyPlanDiscountsItemMethodUType(PercentOfBillValue);
        /// <summary> percentOfUse. </summary>
        public static EnergyPlanDiscountsItemMethodUType PercentOfUse { get; } = new EnergyPlanDiscountsItemMethodUType(PercentOfUseValue);
        /// <summary> fixedAmount. </summary>
        public static EnergyPlanDiscountsItemMethodUType FixedAmount { get; } = new EnergyPlanDiscountsItemMethodUType(FixedAmountValue);
        /// <summary> percentOverThreshold. </summary>
        public static EnergyPlanDiscountsItemMethodUType PercentOverThreshold { get; } = new EnergyPlanDiscountsItemMethodUType(PercentOverThresholdValue);
        /// <summary> Determines if two <see cref="EnergyPlanDiscountsItemMethodUType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanDiscountsItemMethodUType left, EnergyPlanDiscountsItemMethodUType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanDiscountsItemMethodUType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanDiscountsItemMethodUType left, EnergyPlanDiscountsItemMethodUType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanDiscountsItemMethodUType"/>. </summary>
        public static implicit operator EnergyPlanDiscountsItemMethodUType(string value) => new EnergyPlanDiscountsItemMethodUType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanDiscountsItemMethodUType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanDiscountsItemMethodUType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
