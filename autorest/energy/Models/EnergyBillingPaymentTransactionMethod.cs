// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The method of payment. </summary>
    public readonly partial struct EnergyBillingPaymentTransactionMethod : IEquatable<EnergyBillingPaymentTransactionMethod>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyBillingPaymentTransactionMethod"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyBillingPaymentTransactionMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DirectDebitValue = "DIRECT_DEBIT";
        private const string CardValue = "CARD";
        private const string TransferValue = "TRANSFER";
        private const string BpayValue = "BPAY";
        private const string CashValue = "CASH";
        private const string ChequeValue = "CHEQUE";
        private const string OtherValue = "OTHER";

        /// <summary> DIRECT_DEBIT. </summary>
        public static EnergyBillingPaymentTransactionMethod DirectDebit { get; } = new EnergyBillingPaymentTransactionMethod(DirectDebitValue);
        /// <summary> CARD. </summary>
        public static EnergyBillingPaymentTransactionMethod Card { get; } = new EnergyBillingPaymentTransactionMethod(CardValue);
        /// <summary> TRANSFER. </summary>
        public static EnergyBillingPaymentTransactionMethod Transfer { get; } = new EnergyBillingPaymentTransactionMethod(TransferValue);
        /// <summary> BPAY. </summary>
        public static EnergyBillingPaymentTransactionMethod Bpay { get; } = new EnergyBillingPaymentTransactionMethod(BpayValue);
        /// <summary> CASH. </summary>
        public static EnergyBillingPaymentTransactionMethod Cash { get; } = new EnergyBillingPaymentTransactionMethod(CashValue);
        /// <summary> CHEQUE. </summary>
        public static EnergyBillingPaymentTransactionMethod Cheque { get; } = new EnergyBillingPaymentTransactionMethod(ChequeValue);
        /// <summary> OTHER. </summary>
        public static EnergyBillingPaymentTransactionMethod Other { get; } = new EnergyBillingPaymentTransactionMethod(OtherValue);
        /// <summary> Determines if two <see cref="EnergyBillingPaymentTransactionMethod"/> values are the same. </summary>
        public static bool operator ==(EnergyBillingPaymentTransactionMethod left, EnergyBillingPaymentTransactionMethod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyBillingPaymentTransactionMethod"/> values are not the same. </summary>
        public static bool operator !=(EnergyBillingPaymentTransactionMethod left, EnergyBillingPaymentTransactionMethod right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyBillingPaymentTransactionMethod"/>. </summary>
        public static implicit operator EnergyBillingPaymentTransactionMethod(string value) => new EnergyBillingPaymentTransactionMethod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyBillingPaymentTransactionMethod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyBillingPaymentTransactionMethod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
