// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Type of charge. Assumed to be other if absent. </summary>
    public readonly partial struct EnergyPlanTariffPeriodItemType : IEquatable<EnergyPlanTariffPeriodItemType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanTariffPeriodItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnvironmentalValue = "ENVIRONMENTAL";
        private const string RegulatedValue = "REGULATED";
        private const string NetworkValue = "NETWORK";
        private const string MeteringValue = "METERING";
        private const string RetailServiceValue = "RETAIL_SERVICE";
        private const string RctiValue = "RCTI";
        private const string OtherValue = "OTHER";

        /// <summary> ENVIRONMENTAL. </summary>
        public static EnergyPlanTariffPeriodItemType Environmental { get; } = new EnergyPlanTariffPeriodItemType(EnvironmentalValue);
        /// <summary> REGULATED. </summary>
        public static EnergyPlanTariffPeriodItemType Regulated { get; } = new EnergyPlanTariffPeriodItemType(RegulatedValue);
        /// <summary> NETWORK. </summary>
        public static EnergyPlanTariffPeriodItemType Network { get; } = new EnergyPlanTariffPeriodItemType(NetworkValue);
        /// <summary> METERING. </summary>
        public static EnergyPlanTariffPeriodItemType Metering { get; } = new EnergyPlanTariffPeriodItemType(MeteringValue);
        /// <summary> RETAIL_SERVICE. </summary>
        public static EnergyPlanTariffPeriodItemType RetailService { get; } = new EnergyPlanTariffPeriodItemType(RetailServiceValue);
        /// <summary> RCTI. </summary>
        public static EnergyPlanTariffPeriodItemType Rcti { get; } = new EnergyPlanTariffPeriodItemType(RctiValue);
        /// <summary> OTHER. </summary>
        public static EnergyPlanTariffPeriodItemType Other { get; } = new EnergyPlanTariffPeriodItemType(OtherValue);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanTariffPeriodItemType left, EnergyPlanTariffPeriodItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanTariffPeriodItemType left, EnergyPlanTariffPeriodItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanTariffPeriodItemType"/>. </summary>
        public static implicit operator EnergyPlanTariffPeriodItemType(string value) => new EnergyPlanTariffPeriodItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanTariffPeriodItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanTariffPeriodItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
