// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Agl.Cdr.Energy;

namespace Agl.Cdr.Energy.Models
{
    /// <summary> The EnergyUsageRead. </summary>
    public partial class EnergyUsageRead
    {
        /// <summary> Initializes a new instance of EnergyUsageRead. </summary>
        /// <param name="servicePointId"> Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements. </param>
        /// <param name="registerSuffix"> Register suffix of the meter register where the meter reads are obtained. </param>
        /// <param name="readStartDate"> Date time when the meter reads start. </param>
        /// <param name="readUType"> Specify the type of the meter read data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="servicePointId"/>, <paramref name="registerSuffix"/>, or <paramref name="readStartDate"/> is null. </exception>
        internal EnergyUsageRead(string servicePointId, string registerSuffix, string readStartDate, EnergyUsageReadUType readUType)
        {
            if (servicePointId == null)
            {
                throw new ArgumentNullException(nameof(servicePointId));
            }
            if (registerSuffix == null)
            {
                throw new ArgumentNullException(nameof(registerSuffix));
            }
            if (readStartDate == null)
            {
                throw new ArgumentNullException(nameof(readStartDate));
            }

            ServicePointId = servicePointId;
            RegisterSuffix = registerSuffix;
            ReadStartDate = readStartDate;
            ReadUType = readUType;
        }

        /// <summary> Initializes a new instance of EnergyUsageRead. </summary>
        /// <param name="servicePointId"> Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements. </param>
        /// <param name="registerId"> Register ID of the meter register where the meter reads are obtained. </param>
        /// <param name="registerSuffix"> Register suffix of the meter register where the meter reads are obtained. </param>
        /// <param name="meterID"> Meter id/serial number as it appears in customer’s bill. ID permanence rules do not apply. </param>
        /// <param name="controlledLoad"> Indicates whether the energy recorded by this register is created under a Controlled Load regime. ControlledLoad field will have &apos;No if register does not relate to a Controlled Load, “Yes” if register relates to a Controlled Load If absent the status is unknown. </param>
        /// <param name="readStartDate"> Date time when the meter reads start. </param>
        /// <param name="readEndDate"> Date time when the meter reads end.  If absent then assumed to be equal to readStartDate.  In this case the entry represents data for a single date specified by readStartDate. </param>
        /// <param name="unitOfMeasure"> Unit of measure of the meter reads. Refer to Appendix B of &lt;a href=&apos;https://www.aemo.com.au/-/media/files/stakeholder_consultation/consultations/nem-consultations/2019/5ms-metering-package-2/final-determination/mdff-specification-nem12-nem13-v21-final-determination-clean.pdf?la=en&amp;hash=03FCBA0D60E091DE00F2361AE76206EA&apos;&gt;MDFF Specification NEM12 NEM13 v2.1&lt;/a&gt; for a list of possible values. </param>
        /// <param name="readUType"> Specify the type of the meter read data. </param>
        /// <param name="basicRead"> Mandatory if readUType is set to basicRead. </param>
        /// <param name="intervalRead"> Mandatory if readUType is set to intervalRead. </param>
        internal EnergyUsageRead(string servicePointId, string registerId, string registerSuffix, string meterID, bool? controlledLoad, string readStartDate, string readEndDate, string unitOfMeasure, EnergyUsageReadUType readUType, EnergyUsageReadBasicRead basicRead, EnergyUsageReadIntervalRead intervalRead)
        {
            ServicePointId = servicePointId;
            RegisterId = registerId;
            RegisterSuffix = registerSuffix;
            MeterID = meterID;
            ControlledLoad = controlledLoad;
            ReadStartDate = readStartDate;
            ReadEndDate = readEndDate;
            UnitOfMeasure = unitOfMeasure;
            ReadUType = readUType;
            BasicRead = basicRead;
            IntervalRead = intervalRead;
        }

        /// <summary> Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements. </summary>
        public string ServicePointId { get; }
        /// <summary> Register ID of the meter register where the meter reads are obtained. </summary>
        public string RegisterId { get; }
        /// <summary> Register suffix of the meter register where the meter reads are obtained. </summary>
        public string RegisterSuffix { get; }
        /// <summary> Meter id/serial number as it appears in customer’s bill. ID permanence rules do not apply. </summary>
        public string MeterID { get; }
        /// <summary> Indicates whether the energy recorded by this register is created under a Controlled Load regime. ControlledLoad field will have &apos;No if register does not relate to a Controlled Load, “Yes” if register relates to a Controlled Load If absent the status is unknown. </summary>
        public bool? ControlledLoad { get; }
        /// <summary> Date time when the meter reads start. </summary>
        public string ReadStartDate { get; }
        /// <summary> Date time when the meter reads end.  If absent then assumed to be equal to readStartDate.  In this case the entry represents data for a single date specified by readStartDate. </summary>
        public string ReadEndDate { get; }
        /// <summary> Unit of measure of the meter reads. Refer to Appendix B of &lt;a href=&apos;https://www.aemo.com.au/-/media/files/stakeholder_consultation/consultations/nem-consultations/2019/5ms-metering-package-2/final-determination/mdff-specification-nem12-nem13-v21-final-determination-clean.pdf?la=en&amp;hash=03FCBA0D60E091DE00F2361AE76206EA&apos;&gt;MDFF Specification NEM12 NEM13 v2.1&lt;/a&gt; for a list of possible values. </summary>
        public string UnitOfMeasure { get; }
        /// <summary> Specify the type of the meter read data. </summary>
        public EnergyUsageReadUType ReadUType { get; }
        /// <summary> Mandatory if readUType is set to basicRead. </summary>
        public EnergyUsageReadBasicRead BasicRead { get; }
        /// <summary> Mandatory if readUType is set to intervalRead. </summary>
        public EnergyUsageReadIntervalRead IntervalRead { get; }
    }
}
