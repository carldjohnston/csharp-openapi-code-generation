// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of object present in this response. </summary>
    public readonly partial struct EnergyPaymentScheduleUType : IEquatable<EnergyPaymentScheduleUType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPaymentScheduleUType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPaymentScheduleUType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CardDebitValue = "cardDebit";
        private const string DirectDebitValue = "directDebit";
        private const string ManualPaymentValue = "manualPayment";

        /// <summary> cardDebit. </summary>
        public static EnergyPaymentScheduleUType CardDebit { get; } = new EnergyPaymentScheduleUType(CardDebitValue);
        /// <summary> directDebit. </summary>
        public static EnergyPaymentScheduleUType DirectDebit { get; } = new EnergyPaymentScheduleUType(DirectDebitValue);
        /// <summary> manualPayment. </summary>
        public static EnergyPaymentScheduleUType ManualPayment { get; } = new EnergyPaymentScheduleUType(ManualPaymentValue);
        /// <summary> Determines if two <see cref="EnergyPaymentScheduleUType"/> values are the same. </summary>
        public static bool operator ==(EnergyPaymentScheduleUType left, EnergyPaymentScheduleUType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPaymentScheduleUType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPaymentScheduleUType left, EnergyPaymentScheduleUType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPaymentScheduleUType"/>. </summary>
        public static implicit operator EnergyPaymentScheduleUType(string value) => new EnergyPaymentScheduleUType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPaymentScheduleUType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPaymentScheduleUType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
