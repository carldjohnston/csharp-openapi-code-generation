// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of credit card held on file. </summary>
    public readonly partial struct EnergyPaymentScheduleCardDebitCardScheme : IEquatable<EnergyPaymentScheduleCardDebitCardScheme>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPaymentScheduleCardDebitCardScheme"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPaymentScheduleCardDebitCardScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VisaValue = "VISA";
        private const string MastercardValue = "MASTERCARD";
        private const string AmexValue = "AMEX";
        private const string DinersValue = "DINERS";
        private const string OtherValue = "OTHER";
        private const string UnknownValue = "UNKNOWN";

        /// <summary> VISA. </summary>
        public static EnergyPaymentScheduleCardDebitCardScheme Visa { get; } = new EnergyPaymentScheduleCardDebitCardScheme(VisaValue);
        /// <summary> MASTERCARD. </summary>
        public static EnergyPaymentScheduleCardDebitCardScheme Mastercard { get; } = new EnergyPaymentScheduleCardDebitCardScheme(MastercardValue);
        /// <summary> AMEX. </summary>
        public static EnergyPaymentScheduleCardDebitCardScheme Amex { get; } = new EnergyPaymentScheduleCardDebitCardScheme(AmexValue);
        /// <summary> DINERS. </summary>
        public static EnergyPaymentScheduleCardDebitCardScheme Diners { get; } = new EnergyPaymentScheduleCardDebitCardScheme(DinersValue);
        /// <summary> OTHER. </summary>
        public static EnergyPaymentScheduleCardDebitCardScheme Other { get; } = new EnergyPaymentScheduleCardDebitCardScheme(OtherValue);
        /// <summary> UNKNOWN. </summary>
        public static EnergyPaymentScheduleCardDebitCardScheme Unknown { get; } = new EnergyPaymentScheduleCardDebitCardScheme(UnknownValue);
        /// <summary> Determines if two <see cref="EnergyPaymentScheduleCardDebitCardScheme"/> values are the same. </summary>
        public static bool operator ==(EnergyPaymentScheduleCardDebitCardScheme left, EnergyPaymentScheduleCardDebitCardScheme right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPaymentScheduleCardDebitCardScheme"/> values are not the same. </summary>
        public static bool operator !=(EnergyPaymentScheduleCardDebitCardScheme left, EnergyPaymentScheduleCardDebitCardScheme right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPaymentScheduleCardDebitCardScheme"/>. </summary>
        public static implicit operator EnergyPaymentScheduleCardDebitCardScheme(string value) => new EnergyPaymentScheduleCardDebitCardScheme(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPaymentScheduleCardDebitCardScheme other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPaymentScheduleCardDebitCardScheme other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
