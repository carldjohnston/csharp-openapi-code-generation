// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of the discount.  Mandatory if the discount type is CONDITIONAL. </summary>
    public readonly partial struct EnergyPlanDiscountsItemCategory : IEquatable<EnergyPlanDiscountsItemCategory>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanDiscountsItemCategory"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanDiscountsItemCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PAYONTimeValue = "PAY_ON_TIME";
        private const string DirectDebitValue = "DIRECT_DEBIT";
        private const string GuaranteedDiscountValue = "GUARANTEED_DISCOUNT";
        private const string OtherValue = "OTHER";

        /// <summary> PAY_ON_TIME. </summary>
        public static EnergyPlanDiscountsItemCategory PAYONTime { get; } = new EnergyPlanDiscountsItemCategory(PAYONTimeValue);
        /// <summary> DIRECT_DEBIT. </summary>
        public static EnergyPlanDiscountsItemCategory DirectDebit { get; } = new EnergyPlanDiscountsItemCategory(DirectDebitValue);
        /// <summary> GUARANTEED_DISCOUNT. </summary>
        public static EnergyPlanDiscountsItemCategory GuaranteedDiscount { get; } = new EnergyPlanDiscountsItemCategory(GuaranteedDiscountValue);
        /// <summary> OTHER. </summary>
        public static EnergyPlanDiscountsItemCategory Other { get; } = new EnergyPlanDiscountsItemCategory(OtherValue);
        /// <summary> Determines if two <see cref="EnergyPlanDiscountsItemCategory"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanDiscountsItemCategory left, EnergyPlanDiscountsItemCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanDiscountsItemCategory"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanDiscountsItemCategory left, EnergyPlanDiscountsItemCategory right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanDiscountsItemCategory"/>. </summary>
        public static implicit operator EnergyPlanDiscountsItemCategory(string value) => new EnergyPlanDiscountsItemCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanDiscountsItemCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanDiscountsItemCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
