// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Indicator of the payment status for the invoice. </summary>
    public readonly partial struct EnergyInvoicePaymentStatus : IEquatable<EnergyInvoicePaymentStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyInvoicePaymentStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyInvoicePaymentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PaidValue = "PAID";
        private const string PartiallyPaidValue = "PARTIALLY_PAID";
        private const string NOTPaidValue = "NOT_PAID";

        /// <summary> PAID. </summary>
        public static EnergyInvoicePaymentStatus Paid { get; } = new EnergyInvoicePaymentStatus(PaidValue);
        /// <summary> PARTIALLY_PAID. </summary>
        public static EnergyInvoicePaymentStatus PartiallyPaid { get; } = new EnergyInvoicePaymentStatus(PartiallyPaidValue);
        /// <summary> NOT_PAID. </summary>
        public static EnergyInvoicePaymentStatus NOTPaid { get; } = new EnergyInvoicePaymentStatus(NOTPaidValue);
        /// <summary> Determines if two <see cref="EnergyInvoicePaymentStatus"/> values are the same. </summary>
        public static bool operator ==(EnergyInvoicePaymentStatus left, EnergyInvoicePaymentStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyInvoicePaymentStatus"/> values are not the same. </summary>
        public static bool operator !=(EnergyInvoicePaymentStatus left, EnergyInvoicePaymentStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyInvoicePaymentStatus"/>. </summary>
        public static implicit operator EnergyInvoicePaymentStatus(string value) => new EnergyInvoicePaymentStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyInvoicePaymentStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyInvoicePaymentStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
