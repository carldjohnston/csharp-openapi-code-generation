// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Agl.Cdr.Energy.Models
{
    /// <summary> The EnergyDerRecord. </summary>
    public partial class EnergyDerRecord
    {
        /// <summary> Initializes a new instance of EnergyDerRecord. </summary>
        /// <param name="servicePointId"> Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements. </param>
        /// <param name="approvedCapacity"> Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA. </param>
        /// <param name="availablePhasesCount"> The number of phases available for the installation of DER. </param>
        /// <param name="installedPhasesCount"> The number of phases that DER is connected to. </param>
        /// <param name="islandableInstallation"> For identification of small generating units designed with the ability to operate in an islanded mode. </param>
        /// <param name="acConnections"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="servicePointId"/>, <paramref name="islandableInstallation"/>, or <paramref name="acConnections"/> is null. </exception>
        internal EnergyDerRecord(string servicePointId, float approvedCapacity, float availablePhasesCount, float installedPhasesCount, string islandableInstallation, List<EnergyDerRecordAcConnections> acConnections)
        {
            if (servicePointId == null)
            {
                throw new ArgumentNullException(nameof(servicePointId));
            }
            if (islandableInstallation == null)
            {
                throw new ArgumentNullException(nameof(islandableInstallation));
            }
            if (acConnections == null)
            {
                throw new ArgumentNullException(nameof(acConnections));
            }

            ServicePointId = servicePointId;
            ApprovedCapacity = approvedCapacity;
            AvailablePhasesCount = availablePhasesCount;
            InstalledPhasesCount = installedPhasesCount;
            IslandableInstallation = islandableInstallation;
            AcConnections = acConnections;
        }

        /// <summary> Initializes a new instance of EnergyDerRecord. </summary>
        /// <param name="servicePointId"> Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements. </param>
        /// <param name="approvedCapacity"> Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA. </param>
        /// <param name="availablePhasesCount"> The number of phases available for the installation of DER. </param>
        /// <param name="installedPhasesCount"> The number of phases that DER is connected to. </param>
        /// <param name="islandableInstallation"> For identification of small generating units designed with the ability to operate in an islanded mode. </param>
        /// <param name="hasCentralProtectionControl"> For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false. </param>
        /// <param name="protectionMode"> Required only when the hasCentralProtectionAndControl flag is set to true.  One or more of the object fields will be provided to describe the protection modes in place. </param>
        /// <param name="acConnections"> . </param>
        internal EnergyDerRecord(string servicePointId, float approvedCapacity, float availablePhasesCount, float installedPhasesCount, string islandableInstallation, bool? hasCentralProtectionControl, EnergyDerRecordProtectionMode protectionMode, IReadOnlyList<EnergyDerRecordAcConnections> acConnections)
        {
            ServicePointId = servicePointId;
            ApprovedCapacity = approvedCapacity;
            AvailablePhasesCount = availablePhasesCount;
            InstalledPhasesCount = installedPhasesCount;
            IslandableInstallation = islandableInstallation;
            HasCentralProtectionControl = hasCentralProtectionControl;
            ProtectionMode = protectionMode;
            AcConnections = acConnections;
        }

        /// <summary> Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements. </summary>
        public string ServicePointId { get; }
        /// <summary> Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA. </summary>
        public float ApprovedCapacity { get; }
        /// <summary> The number of phases available for the installation of DER. </summary>
        public float AvailablePhasesCount { get; }
        /// <summary> The number of phases that DER is connected to. </summary>
        public float InstalledPhasesCount { get; }
        /// <summary> For identification of small generating units designed with the ability to operate in an islanded mode. </summary>
        public string IslandableInstallation { get; }
        /// <summary> For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false. </summary>
        public bool? HasCentralProtectionControl { get; }
        /// <summary> Required only when the hasCentralProtectionAndControl flag is set to true.  One or more of the object fields will be provided to describe the protection modes in place. </summary>
        public EnergyDerRecordProtectionMode ProtectionMode { get; }
        public IReadOnlyList<EnergyDerRecordAcConnections> AcConnections { get; }
    }
}
