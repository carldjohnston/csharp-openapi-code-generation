// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The measurement unit of rate. Assumed to be KWH if absent. </summary>
    public readonly partial struct EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit : IEquatable<EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string KWHValue = "KWH";
        private const string KVAValue = "KVA";
        private const string KvarValue = "KVAR";
        private const string KvarhValue = "KVARH";
        private const string KWValue = "KW";
        private const string DaysValue = "DAYS";
        private const string MeterValue = "METER";
        private const string MonthValue = "MONTH";

        /// <summary> KWH. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit KWH { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(KWHValue);
        /// <summary> KVA. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit KVA { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(KVAValue);
        /// <summary> KVAR. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit Kvar { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(KvarValue);
        /// <summary> KVARH. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit Kvarh { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(KvarhValue);
        /// <summary> KW. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit KW { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(KWValue);
        /// <summary> DAYS. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit Days { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(DaysValue);
        /// <summary> METER. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit Meter { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(MeterValue);
        /// <summary> MONTH. </summary>
        public static EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit Month { get; } = new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(MonthValue);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit left, EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit left, EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit"/>. </summary>
        public static implicit operator EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(string value) => new EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanTariffPeriodItemTimeOfUseRatesItemMeasureUnit other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
