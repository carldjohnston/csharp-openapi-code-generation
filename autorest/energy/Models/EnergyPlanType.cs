// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of the plan. </summary>
    public readonly partial struct EnergyPlanType : IEquatable<EnergyPlanType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandingValue = "STANDING";
        private const string MarketValue = "MARKET";
        private const string RegulatedValue = "REGULATED";

        /// <summary> STANDING. </summary>
        public static EnergyPlanType Standing { get; } = new EnergyPlanType(StandingValue);
        /// <summary> MARKET. </summary>
        public static EnergyPlanType Market { get; } = new EnergyPlanType(MarketValue);
        /// <summary> REGULATED. </summary>
        public static EnergyPlanType Regulated { get; } = new EnergyPlanType(RegulatedValue);
        /// <summary> Determines if two <see cref="EnergyPlanType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanType left, EnergyPlanType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanType left, EnergyPlanType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanType"/>. </summary>
        public static implicit operator EnergyPlanType(string value) => new EnergyPlanType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
