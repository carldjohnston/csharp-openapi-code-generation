// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Agl.Cdr.Energy.Models
{
    /// <summary> The EnergyInvoiceGasUsageCharges. </summary>
    public partial class EnergyInvoiceGasUsageCharges
    {
        /// <summary> Initializes a new instance of EnergyInvoiceGasUsageCharges. </summary>
        /// <param name="totalUsageCharges"> The aggregate total of usage charges for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="totalGenerationCredits"> The aggregate total of generation credits for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="totalOnceOffCharges"> The aggregate total of any once off charges arising from electricity usage for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="totalOnceOffDiscounts"> The aggregate total of any once off discounts or credits arising from electricity usage for the period covered by the invoice (exclusive of GST). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="totalUsageCharges"/>, <paramref name="totalGenerationCredits"/>, <paramref name="totalOnceOffCharges"/>, or <paramref name="totalOnceOffDiscounts"/> is null. </exception>
        internal EnergyInvoiceGasUsageCharges(string totalUsageCharges, string totalGenerationCredits, string totalOnceOffCharges, string totalOnceOffDiscounts)
        {
            if (totalUsageCharges == null)
            {
                throw new ArgumentNullException(nameof(totalUsageCharges));
            }
            if (totalGenerationCredits == null)
            {
                throw new ArgumentNullException(nameof(totalGenerationCredits));
            }
            if (totalOnceOffCharges == null)
            {
                throw new ArgumentNullException(nameof(totalOnceOffCharges));
            }
            if (totalOnceOffDiscounts == null)
            {
                throw new ArgumentNullException(nameof(totalOnceOffDiscounts));
            }

            TotalUsageCharges = totalUsageCharges;
            TotalGenerationCredits = totalGenerationCredits;
            TotalOnceOffCharges = totalOnceOffCharges;
            TotalOnceOffDiscounts = totalOnceOffDiscounts;
            OtherCharges = new List<EnergyInvoiceGasUsageChargesOtherCharges>();
        }

        /// <summary> Initializes a new instance of EnergyInvoiceGasUsageCharges. </summary>
        /// <param name="totalUsageCharges"> The aggregate total of usage charges for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="totalGenerationCredits"> The aggregate total of generation credits for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="totalOnceOffCharges"> The aggregate total of any once off charges arising from electricity usage for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="totalOnceOffDiscounts"> The aggregate total of any once off discounts or credits arising from electricity usage for the period covered by the invoice (exclusive of GST). </param>
        /// <param name="otherCharges"> Optional array of charges that may be part of the invoice (for e.g. environmental charges for C&amp;I consumers) (exclusive of GST). </param>
        /// <param name="totalGst"> The total GST for all electricity usage charges.  If absent then zero is assumed. </param>
        internal EnergyInvoiceGasUsageCharges(string totalUsageCharges, string totalGenerationCredits, string totalOnceOffCharges, string totalOnceOffDiscounts, IReadOnlyList<EnergyInvoiceGasUsageChargesOtherCharges> otherCharges, string totalGst)
        {
            TotalUsageCharges = totalUsageCharges;
            TotalGenerationCredits = totalGenerationCredits;
            TotalOnceOffCharges = totalOnceOffCharges;
            TotalOnceOffDiscounts = totalOnceOffDiscounts;
            OtherCharges = otherCharges;
            TotalGst = totalGst;
        }

        /// <summary> The aggregate total of usage charges for the period covered by the invoice (exclusive of GST). </summary>
        public string TotalUsageCharges { get; }
        /// <summary> The aggregate total of generation credits for the period covered by the invoice (exclusive of GST). </summary>
        public string TotalGenerationCredits { get; }
        /// <summary> The aggregate total of any once off charges arising from electricity usage for the period covered by the invoice (exclusive of GST). </summary>
        public string TotalOnceOffCharges { get; }
        /// <summary> The aggregate total of any once off discounts or credits arising from electricity usage for the period covered by the invoice (exclusive of GST). </summary>
        public string TotalOnceOffDiscounts { get; }
        /// <summary> Optional array of charges that may be part of the invoice (for e.g. environmental charges for C&amp;I consumers) (exclusive of GST). </summary>
        public IReadOnlyList<EnergyInvoiceGasUsageChargesOtherCharges> OtherCharges { get; }
        /// <summary> The total GST for all electricity usage charges.  If absent then zero is assumed. </summary>
        public string TotalGst { get; }
    }
}
