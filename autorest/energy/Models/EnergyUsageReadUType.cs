// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Specify the type of the meter read data. </summary>
    public readonly partial struct EnergyUsageReadUType : IEquatable<EnergyUsageReadUType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyUsageReadUType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyUsageReadUType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BasicReadValue = "basicRead";
        private const string IntervalReadValue = "intervalRead";

        /// <summary> basicRead. </summary>
        public static EnergyUsageReadUType BasicRead { get; } = new EnergyUsageReadUType(BasicReadValue);
        /// <summary> intervalRead. </summary>
        public static EnergyUsageReadUType IntervalRead { get; } = new EnergyUsageReadUType(IntervalReadValue);
        /// <summary> Determines if two <see cref="EnergyUsageReadUType"/> values are the same. </summary>
        public static bool operator ==(EnergyUsageReadUType left, EnergyUsageReadUType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyUsageReadUType"/> values are not the same. </summary>
        public static bool operator !=(EnergyUsageReadUType left, EnergyUsageReadUType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyUsageReadUType"/>. </summary>
        public static implicit operator EnergyUsageReadUType(string value) => new EnergyUsageReadUType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyUsageReadUType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyUsageReadUType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
