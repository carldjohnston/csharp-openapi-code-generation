// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds. </summary>
    public readonly partial struct EnergyPlanContractTimeZone : IEquatable<EnergyPlanContractTimeZone>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanContractTimeZone"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanContractTimeZone(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LocalValue = "LOCAL";
        private const string AestValue = "AEST";

        /// <summary> LOCAL. </summary>
        public static EnergyPlanContractTimeZone Local { get; } = new EnergyPlanContractTimeZone(LocalValue);
        /// <summary> AEST. </summary>
        public static EnergyPlanContractTimeZone Aest { get; } = new EnergyPlanContractTimeZone(AestValue);
        /// <summary> Determines if two <see cref="EnergyPlanContractTimeZone"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanContractTimeZone left, EnergyPlanContractTimeZone right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanContractTimeZone"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanContractTimeZone left, EnergyPlanContractTimeZone right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanContractTimeZone"/>. </summary>
        public static implicit operator EnergyPlanContractTimeZone(string value) => new EnergyPlanContractTimeZone(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanContractTimeZone other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanContractTimeZone other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
