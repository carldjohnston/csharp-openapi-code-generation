// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of customer that the plan is offered to.  If absent then the plan is available to all customers. </summary>
    public readonly partial struct EnergyPlanCustomerType : IEquatable<EnergyPlanCustomerType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanCustomerType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanCustomerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ResidentialValue = "RESIDENTIAL";
        private const string BusinessValue = "BUSINESS";

        /// <summary> RESIDENTIAL. </summary>
        public static EnergyPlanCustomerType Residential { get; } = new EnergyPlanCustomerType(ResidentialValue);
        /// <summary> BUSINESS. </summary>
        public static EnergyPlanCustomerType Business { get; } = new EnergyPlanCustomerType(BusinessValue);
        /// <summary> Determines if two <see cref="EnergyPlanCustomerType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanCustomerType left, EnergyPlanCustomerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanCustomerType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanCustomerType left, EnergyPlanCustomerType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanCustomerType"/>. </summary>
        public static implicit operator EnergyPlanCustomerType(string value) => new EnergyPlanCustomerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanCustomerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanCustomerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
