// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Actual/Subtractive Indicator. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**ACTUAL** implies volume of energy actually metered between two dates&lt;/li&gt;&lt;li&gt;**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates&lt;/li&gt;&lt;/ul&gt;. </summary>
    public readonly partial struct EnergyServicePointDetailMetersRegistersConsumptionType : IEquatable<EnergyServicePointDetailMetersRegistersConsumptionType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersConsumptionType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyServicePointDetailMetersRegistersConsumptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActualValue = "ACTUAL";
        private const string CumulativeValue = "CUMULATIVE";

        /// <summary> ACTUAL. </summary>
        public static EnergyServicePointDetailMetersRegistersConsumptionType Actual { get; } = new EnergyServicePointDetailMetersRegistersConsumptionType(ActualValue);
        /// <summary> CUMULATIVE. </summary>
        public static EnergyServicePointDetailMetersRegistersConsumptionType Cumulative { get; } = new EnergyServicePointDetailMetersRegistersConsumptionType(CumulativeValue);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersConsumptionType"/> values are the same. </summary>
        public static bool operator ==(EnergyServicePointDetailMetersRegistersConsumptionType left, EnergyServicePointDetailMetersRegistersConsumptionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersConsumptionType"/> values are not the same. </summary>
        public static bool operator !=(EnergyServicePointDetailMetersRegistersConsumptionType left, EnergyServicePointDetailMetersRegistersConsumptionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyServicePointDetailMetersRegistersConsumptionType"/>. </summary>
        public static implicit operator EnergyServicePointDetailMetersRegistersConsumptionType(string value) => new EnergyServicePointDetailMetersRegistersConsumptionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyServicePointDetailMetersRegistersConsumptionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyServicePointDetailMetersRegistersConsumptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
