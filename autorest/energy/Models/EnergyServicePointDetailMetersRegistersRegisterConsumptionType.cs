// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Indicates the consumption type of register. </summary>
    public readonly partial struct EnergyServicePointDetailMetersRegistersRegisterConsumptionType : IEquatable<EnergyServicePointDetailMetersRegistersRegisterConsumptionType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersRegisterConsumptionType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyServicePointDetailMetersRegistersRegisterConsumptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IntervalValue = "INTERVAL";
        private const string BasicValue = "BASIC";
        private const string ProfileDataValue = "PROFILE_DATA";
        private const string ActiveImportValue = "ACTIVE_IMPORT";
        private const string ActiveValue = "ACTIVE";
        private const string ReactiveImportValue = "REACTIVE_IMPORT";
        private const string ReactiveValue = "REACTIVE";

        /// <summary> INTERVAL. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType Interval { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(IntervalValue);
        /// <summary> BASIC. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType Basic { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(BasicValue);
        /// <summary> PROFILE_DATA. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType ProfileData { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(ProfileDataValue);
        /// <summary> ACTIVE_IMPORT. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType ActiveImport { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(ActiveImportValue);
        /// <summary> ACTIVE. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType Active { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(ActiveValue);
        /// <summary> REACTIVE_IMPORT. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType ReactiveImport { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(ReactiveImportValue);
        /// <summary> REACTIVE. </summary>
        public static EnergyServicePointDetailMetersRegistersRegisterConsumptionType Reactive { get; } = new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(ReactiveValue);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersRegisterConsumptionType"/> values are the same. </summary>
        public static bool operator ==(EnergyServicePointDetailMetersRegistersRegisterConsumptionType left, EnergyServicePointDetailMetersRegistersRegisterConsumptionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailMetersRegistersRegisterConsumptionType"/> values are not the same. </summary>
        public static bool operator !=(EnergyServicePointDetailMetersRegistersRegisterConsumptionType left, EnergyServicePointDetailMetersRegistersRegisterConsumptionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyServicePointDetailMetersRegistersRegisterConsumptionType"/>. </summary>
        public static implicit operator EnergyServicePointDetailMetersRegistersRegisterConsumptionType(string value) => new EnergyServicePointDetailMetersRegistersRegisterConsumptionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyServicePointDetailMetersRegistersRegisterConsumptionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyServicePointDetailMetersRegistersRegisterConsumptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
