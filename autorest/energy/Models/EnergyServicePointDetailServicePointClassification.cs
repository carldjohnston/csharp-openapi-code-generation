// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The classification of the service point as defined in MSATS procedures. </summary>
    public readonly partial struct EnergyServicePointDetailServicePointClassification : IEquatable<EnergyServicePointDetailServicePointClassification>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyServicePointDetailServicePointClassification"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyServicePointDetailServicePointClassification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExternalProfileValue = "EXTERNAL_PROFILE";
        private const string GeneratorValue = "GENERATOR";
        private const string LargeValue = "LARGE";
        private const string SmallValue = "SMALL";
        private const string WholesaleValue = "WHOLESALE";
        private const string NONContestUnmeteredLoadValue = "NON_CONTEST_UNMETERED_LOAD";
        private const string NONRegisteredEmbeddedGeneratorValue = "NON_REGISTERED_EMBEDDED_GENERATOR";
        private const string DistributionWholesaleValue = "DISTRIBUTION_WHOLESALE";

        /// <summary> EXTERNAL_PROFILE. </summary>
        public static EnergyServicePointDetailServicePointClassification ExternalProfile { get; } = new EnergyServicePointDetailServicePointClassification(ExternalProfileValue);
        /// <summary> GENERATOR. </summary>
        public static EnergyServicePointDetailServicePointClassification Generator { get; } = new EnergyServicePointDetailServicePointClassification(GeneratorValue);
        /// <summary> LARGE. </summary>
        public static EnergyServicePointDetailServicePointClassification Large { get; } = new EnergyServicePointDetailServicePointClassification(LargeValue);
        /// <summary> SMALL. </summary>
        public static EnergyServicePointDetailServicePointClassification Small { get; } = new EnergyServicePointDetailServicePointClassification(SmallValue);
        /// <summary> WHOLESALE. </summary>
        public static EnergyServicePointDetailServicePointClassification Wholesale { get; } = new EnergyServicePointDetailServicePointClassification(WholesaleValue);
        /// <summary> NON_CONTEST_UNMETERED_LOAD. </summary>
        public static EnergyServicePointDetailServicePointClassification NONContestUnmeteredLoad { get; } = new EnergyServicePointDetailServicePointClassification(NONContestUnmeteredLoadValue);
        /// <summary> NON_REGISTERED_EMBEDDED_GENERATOR. </summary>
        public static EnergyServicePointDetailServicePointClassification NONRegisteredEmbeddedGenerator { get; } = new EnergyServicePointDetailServicePointClassification(NONRegisteredEmbeddedGeneratorValue);
        /// <summary> DISTRIBUTION_WHOLESALE. </summary>
        public static EnergyServicePointDetailServicePointClassification DistributionWholesale { get; } = new EnergyServicePointDetailServicePointClassification(DistributionWholesaleValue);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailServicePointClassification"/> values are the same. </summary>
        public static bool operator ==(EnergyServicePointDetailServicePointClassification left, EnergyServicePointDetailServicePointClassification right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailServicePointClassification"/> values are not the same. </summary>
        public static bool operator !=(EnergyServicePointDetailServicePointClassification left, EnergyServicePointDetailServicePointClassification right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyServicePointDetailServicePointClassification"/>. </summary>
        public static implicit operator EnergyServicePointDetailServicePointClassification(string value) => new EnergyServicePointDetailServicePointClassification(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyServicePointDetailServicePointClassification other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyServicePointDetailServicePointClassification other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
