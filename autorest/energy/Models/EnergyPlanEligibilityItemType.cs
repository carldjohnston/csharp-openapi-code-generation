// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The type of the eligibility restriction.&lt;br/&gt;The CONTINGENT_PLAN value indicates that the plan is contingent on the customer taking up an alternate fuel plan from the same retailer (for instance, if the fuelType is ELECTRICITY then a GAS plan from the same retailer must be taken up). </summary>
    public readonly partial struct EnergyPlanEligibilityItemType : IEquatable<EnergyPlanEligibilityItemType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanEligibilityItemType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanEligibilityItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExistingCustValue = "EXISTING_CUST";
        private const string ExistingPoolValue = "EXISTING_POOL";
        private const string ExistingSolarValue = "EXISTING_SOLAR";
        private const string ExistingBatteryValue = "EXISTING_BATTERY";
        private const string ExistingSmartMeterValue = "EXISTING_SMART_METER";
        private const string ExistingBasicMeterValue = "EXISTING_BASIC_METER";
        private const string SeniorCardValue = "SENIOR_CARD";
        private const string SmallBusinessValue = "SMALL_BUSINESS";
        private const string NOSolarFITValue = "NO_SOLAR_FIT";
        private const string NEWCustomerValue = "NEW_CUSTOMER";
        private const string OnlineOnlyValue = "ONLINE_ONLY";
        private const string REQEquipSupplierValue = "REQ_EQUIP_SUPPLIER";
        private const string ThirdPartyOnlyValue = "THIRD_PARTY_ONLY";
        private const string SportClubMemberValue = "SPORT_CLUB_MEMBER";
        private const string ORGMemberValue = "ORG_MEMBER";
        private const string SpecificLocationValue = "SPECIFIC_LOCATION";
        private const string MinimumUsageValue = "MINIMUM_USAGE";
        private const string LoyaltyMemberValue = "LOYALTY_MEMBER";
        private const string GroupBUYMemberValue = "GROUP_BUY_MEMBER";
        private const string ContingentPlanValue = "CONTINGENT_PLAN";
        private const string OtherValue = "OTHER";

        /// <summary> EXISTING_CUST. </summary>
        public static EnergyPlanEligibilityItemType ExistingCust { get; } = new EnergyPlanEligibilityItemType(ExistingCustValue);
        /// <summary> EXISTING_POOL. </summary>
        public static EnergyPlanEligibilityItemType ExistingPool { get; } = new EnergyPlanEligibilityItemType(ExistingPoolValue);
        /// <summary> EXISTING_SOLAR. </summary>
        public static EnergyPlanEligibilityItemType ExistingSolar { get; } = new EnergyPlanEligibilityItemType(ExistingSolarValue);
        /// <summary> EXISTING_BATTERY. </summary>
        public static EnergyPlanEligibilityItemType ExistingBattery { get; } = new EnergyPlanEligibilityItemType(ExistingBatteryValue);
        /// <summary> EXISTING_SMART_METER. </summary>
        public static EnergyPlanEligibilityItemType ExistingSmartMeter { get; } = new EnergyPlanEligibilityItemType(ExistingSmartMeterValue);
        /// <summary> EXISTING_BASIC_METER. </summary>
        public static EnergyPlanEligibilityItemType ExistingBasicMeter { get; } = new EnergyPlanEligibilityItemType(ExistingBasicMeterValue);
        /// <summary> SENIOR_CARD. </summary>
        public static EnergyPlanEligibilityItemType SeniorCard { get; } = new EnergyPlanEligibilityItemType(SeniorCardValue);
        /// <summary> SMALL_BUSINESS. </summary>
        public static EnergyPlanEligibilityItemType SmallBusiness { get; } = new EnergyPlanEligibilityItemType(SmallBusinessValue);
        /// <summary> NO_SOLAR_FIT. </summary>
        public static EnergyPlanEligibilityItemType NOSolarFIT { get; } = new EnergyPlanEligibilityItemType(NOSolarFITValue);
        /// <summary> NEW_CUSTOMER. </summary>
        public static EnergyPlanEligibilityItemType NEWCustomer { get; } = new EnergyPlanEligibilityItemType(NEWCustomerValue);
        /// <summary> ONLINE_ONLY. </summary>
        public static EnergyPlanEligibilityItemType OnlineOnly { get; } = new EnergyPlanEligibilityItemType(OnlineOnlyValue);
        /// <summary> REQ_EQUIP_SUPPLIER. </summary>
        public static EnergyPlanEligibilityItemType REQEquipSupplier { get; } = new EnergyPlanEligibilityItemType(REQEquipSupplierValue);
        /// <summary> THIRD_PARTY_ONLY. </summary>
        public static EnergyPlanEligibilityItemType ThirdPartyOnly { get; } = new EnergyPlanEligibilityItemType(ThirdPartyOnlyValue);
        /// <summary> SPORT_CLUB_MEMBER. </summary>
        public static EnergyPlanEligibilityItemType SportClubMember { get; } = new EnergyPlanEligibilityItemType(SportClubMemberValue);
        /// <summary> ORG_MEMBER. </summary>
        public static EnergyPlanEligibilityItemType ORGMember { get; } = new EnergyPlanEligibilityItemType(ORGMemberValue);
        /// <summary> SPECIFIC_LOCATION. </summary>
        public static EnergyPlanEligibilityItemType SpecificLocation { get; } = new EnergyPlanEligibilityItemType(SpecificLocationValue);
        /// <summary> MINIMUM_USAGE. </summary>
        public static EnergyPlanEligibilityItemType MinimumUsage { get; } = new EnergyPlanEligibilityItemType(MinimumUsageValue);
        /// <summary> LOYALTY_MEMBER. </summary>
        public static EnergyPlanEligibilityItemType LoyaltyMember { get; } = new EnergyPlanEligibilityItemType(LoyaltyMemberValue);
        /// <summary> GROUP_BUY_MEMBER. </summary>
        public static EnergyPlanEligibilityItemType GroupBUYMember { get; } = new EnergyPlanEligibilityItemType(GroupBUYMemberValue);
        /// <summary> CONTINGENT_PLAN. </summary>
        public static EnergyPlanEligibilityItemType ContingentPlan { get; } = new EnergyPlanEligibilityItemType(ContingentPlanValue);
        /// <summary> OTHER. </summary>
        public static EnergyPlanEligibilityItemType Other { get; } = new EnergyPlanEligibilityItemType(OtherValue);
        /// <summary> Determines if two <see cref="EnergyPlanEligibilityItemType"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanEligibilityItemType left, EnergyPlanEligibilityItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanEligibilityItemType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanEligibilityItemType left, EnergyPlanEligibilityItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanEligibilityItemType"/>. </summary>
        public static implicit operator EnergyPlanEligibilityItemType(string value) => new EnergyPlanEligibilityItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanEligibilityItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanEligibilityItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
