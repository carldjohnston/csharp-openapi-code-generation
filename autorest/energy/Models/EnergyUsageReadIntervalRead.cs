// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Agl.Cdr.Energy.Models
{
    /// <summary> Mandatory if readUType is set to intervalRead. </summary>
    public partial class EnergyUsageReadIntervalRead
    {
        /// <summary> Initializes a new instance of EnergyUsageReadIntervalRead. </summary>
        /// <param name="readIntervalLength"> Read interval length in minutes. </param>
        /// <param name="aggregateValue"> The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export. </param>
        /// <param name="intervalReads"> Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="readIntervalLength"/> or <paramref name="intervalReads"/> is null. </exception>
        internal EnergyUsageReadIntervalRead(string readIntervalLength, float aggregateValue, List<EnergyUsageReadIntervalReads> intervalReads)
        {
            if (readIntervalLength == null)
            {
                throw new ArgumentNullException(nameof(readIntervalLength));
            }
            if (intervalReads == null)
            {
                throw new ArgumentNullException(nameof(intervalReads));
            }

            ReadIntervalLength = readIntervalLength;
            AggregateValue = aggregateValue;
            IntervalReads = intervalReads;
        }

        /// <summary> Initializes a new instance of EnergyUsageReadIntervalRead. </summary>
        /// <param name="readIntervalLength"> Read interval length in minutes. </param>
        /// <param name="aggregateValue"> The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export. </param>
        /// <param name="intervalReads"> Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval). </param>
        internal EnergyUsageReadIntervalRead(string readIntervalLength, float aggregateValue, IReadOnlyList<EnergyUsageReadIntervalReads> intervalReads)
        {
            ReadIntervalLength = readIntervalLength;
            AggregateValue = aggregateValue;
            IntervalReads = intervalReads;
        }

        /// <summary> Read interval length in minutes. </summary>
        public string ReadIntervalLength { get; }
        /// <summary> The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export. </summary>
        public float AggregateValue { get; }
        /// <summary> Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval). </summary>
        public IReadOnlyList<EnergyUsageReadIntervalReads> IntervalReads { get; }
    }
}
