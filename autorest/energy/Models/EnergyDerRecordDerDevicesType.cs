// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Used to indicate the primary technology used in the DER device. </summary>
    public readonly partial struct EnergyDerRecordDerDevicesType : IEquatable<EnergyDerRecordDerDevicesType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyDerRecordDerDevicesType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyDerRecordDerDevicesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FossilValue = "FOSSIL";
        private const string HydroValue = "HYDRO";
        private const string WindValue = "WIND";
        private const string SolarPVValue = "SOLAR_PV";
        private const string RenewableValue = "RENEWABLE";
        private const string GeothermalValue = "GEOTHERMAL";
        private const string StorageValue = "STORAGE";
        private const string OtherValue = "OTHER";

        /// <summary> FOSSIL. </summary>
        public static EnergyDerRecordDerDevicesType Fossil { get; } = new EnergyDerRecordDerDevicesType(FossilValue);
        /// <summary> HYDRO. </summary>
        public static EnergyDerRecordDerDevicesType Hydro { get; } = new EnergyDerRecordDerDevicesType(HydroValue);
        /// <summary> WIND. </summary>
        public static EnergyDerRecordDerDevicesType Wind { get; } = new EnergyDerRecordDerDevicesType(WindValue);
        /// <summary> SOLAR_PV. </summary>
        public static EnergyDerRecordDerDevicesType SolarPV { get; } = new EnergyDerRecordDerDevicesType(SolarPVValue);
        /// <summary> RENEWABLE. </summary>
        public static EnergyDerRecordDerDevicesType Renewable { get; } = new EnergyDerRecordDerDevicesType(RenewableValue);
        /// <summary> GEOTHERMAL. </summary>
        public static EnergyDerRecordDerDevicesType Geothermal { get; } = new EnergyDerRecordDerDevicesType(GeothermalValue);
        /// <summary> STORAGE. </summary>
        public static EnergyDerRecordDerDevicesType Storage { get; } = new EnergyDerRecordDerDevicesType(StorageValue);
        /// <summary> OTHER. </summary>
        public static EnergyDerRecordDerDevicesType Other { get; } = new EnergyDerRecordDerDevicesType(OtherValue);
        /// <summary> Determines if two <see cref="EnergyDerRecordDerDevicesType"/> values are the same. </summary>
        public static bool operator ==(EnergyDerRecordDerDevicesType left, EnergyDerRecordDerDevicesType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyDerRecordDerDevicesType"/> values are not the same. </summary>
        public static bool operator !=(EnergyDerRecordDerDevicesType left, EnergyDerRecordDerDevicesType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyDerRecordDerDevicesType"/>. </summary>
        public static implicit operator EnergyDerRecordDerDevicesType(string value) => new EnergyDerRecordDerDevicesType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyDerRecordDerDevicesType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyDerRecordDerDevicesType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
