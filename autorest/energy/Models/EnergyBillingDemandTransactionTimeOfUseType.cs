// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The time of use type that the transaction applies to. </summary>
    public readonly partial struct EnergyBillingDemandTransactionTimeOfUseType : IEquatable<EnergyBillingDemandTransactionTimeOfUseType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyBillingDemandTransactionTimeOfUseType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyBillingDemandTransactionTimeOfUseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PeakValue = "PEAK";
        private const string OFFPeakValue = "OFF_PEAK";
        private const string OFFPeakDemandChargeValue = "OFF_PEAK_DEMAND_CHARGE";
        private const string ShoulderValue = "SHOULDER";
        private const string Shoulder1Value = "SHOULDER1";
        private const string Shoulder2Value = "SHOULDER2";
        private const string ControlledLoadValue = "CONTROLLED_LOAD";
        private const string SolarValue = "SOLAR";
        private const string AggregateValue = "AGGREGATE";

        /// <summary> PEAK. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType Peak { get; } = new EnergyBillingDemandTransactionTimeOfUseType(PeakValue);
        /// <summary> OFF_PEAK. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType OFFPeak { get; } = new EnergyBillingDemandTransactionTimeOfUseType(OFFPeakValue);
        /// <summary> OFF_PEAK_DEMAND_CHARGE. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType OFFPeakDemandCharge { get; } = new EnergyBillingDemandTransactionTimeOfUseType(OFFPeakDemandChargeValue);
        /// <summary> SHOULDER. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType Shoulder { get; } = new EnergyBillingDemandTransactionTimeOfUseType(ShoulderValue);
        /// <summary> SHOULDER1. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType Shoulder1 { get; } = new EnergyBillingDemandTransactionTimeOfUseType(Shoulder1Value);
        /// <summary> SHOULDER2. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType Shoulder2 { get; } = new EnergyBillingDemandTransactionTimeOfUseType(Shoulder2Value);
        /// <summary> CONTROLLED_LOAD. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType ControlledLoad { get; } = new EnergyBillingDemandTransactionTimeOfUseType(ControlledLoadValue);
        /// <summary> SOLAR. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType Solar { get; } = new EnergyBillingDemandTransactionTimeOfUseType(SolarValue);
        /// <summary> AGGREGATE. </summary>
        public static EnergyBillingDemandTransactionTimeOfUseType Aggregate { get; } = new EnergyBillingDemandTransactionTimeOfUseType(AggregateValue);
        /// <summary> Determines if two <see cref="EnergyBillingDemandTransactionTimeOfUseType"/> values are the same. </summary>
        public static bool operator ==(EnergyBillingDemandTransactionTimeOfUseType left, EnergyBillingDemandTransactionTimeOfUseType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyBillingDemandTransactionTimeOfUseType"/> values are not the same. </summary>
        public static bool operator !=(EnergyBillingDemandTransactionTimeOfUseType left, EnergyBillingDemandTransactionTimeOfUseType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyBillingDemandTransactionTimeOfUseType"/>. </summary>
        public static implicit operator EnergyBillingDemandTransactionTimeOfUseType(string value) => new EnergyBillingDemandTransactionTimeOfUseType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyBillingDemandTransactionTimeOfUseType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyBillingDemandTransactionTimeOfUseType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
