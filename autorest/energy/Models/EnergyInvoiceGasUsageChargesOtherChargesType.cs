// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> Type of charge. Assumed to be other if absent. </summary>
    public readonly partial struct EnergyInvoiceGasUsageChargesOtherChargesType : IEquatable<EnergyInvoiceGasUsageChargesOtherChargesType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyInvoiceGasUsageChargesOtherChargesType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyInvoiceGasUsageChargesOtherChargesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnvironmentalValue = "ENVIRONMENTAL";
        private const string RegulatedValue = "REGULATED";
        private const string NetworkValue = "NETWORK";
        private const string MeteringValue = "METERING";
        private const string RetailServiceValue = "RETAIL_SERVICE";
        private const string RctiValue = "RCTI";
        private const string OtherValue = "OTHER";

        /// <summary> ENVIRONMENTAL. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType Environmental { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(EnvironmentalValue);
        /// <summary> REGULATED. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType Regulated { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(RegulatedValue);
        /// <summary> NETWORK. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType Network { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(NetworkValue);
        /// <summary> METERING. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType Metering { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(MeteringValue);
        /// <summary> RETAIL_SERVICE. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType RetailService { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(RetailServiceValue);
        /// <summary> RCTI. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType Rcti { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(RctiValue);
        /// <summary> OTHER. </summary>
        public static EnergyInvoiceGasUsageChargesOtherChargesType Other { get; } = new EnergyInvoiceGasUsageChargesOtherChargesType(OtherValue);
        /// <summary> Determines if two <see cref="EnergyInvoiceGasUsageChargesOtherChargesType"/> values are the same. </summary>
        public static bool operator ==(EnergyInvoiceGasUsageChargesOtherChargesType left, EnergyInvoiceGasUsageChargesOtherChargesType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyInvoiceGasUsageChargesOtherChargesType"/> values are not the same. </summary>
        public static bool operator !=(EnergyInvoiceGasUsageChargesOtherChargesType left, EnergyInvoiceGasUsageChargesOtherChargesType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyInvoiceGasUsageChargesOtherChargesType"/>. </summary>
        public static implicit operator EnergyInvoiceGasUsageChargesOtherChargesType(string value) => new EnergyInvoiceGasUsageChargesOtherChargesType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyInvoiceGasUsageChargesOtherChargesType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyInvoiceGasUsageChargesOtherChargesType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
