// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;. </summary>
    public readonly partial struct EnergyServicePointDetailRelatedParticipantsRole : IEquatable<EnergyServicePointDetailRelatedParticipantsRole>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyServicePointDetailRelatedParticipantsRole"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyServicePointDetailRelatedParticipantsRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FrmpValue = "FRMP";
        private const string LnspValue = "LNSP";
        private const string DrspValue = "DRSP";

        /// <summary> FRMP. </summary>
        public static EnergyServicePointDetailRelatedParticipantsRole Frmp { get; } = new EnergyServicePointDetailRelatedParticipantsRole(FrmpValue);
        /// <summary> LNSP. </summary>
        public static EnergyServicePointDetailRelatedParticipantsRole Lnsp { get; } = new EnergyServicePointDetailRelatedParticipantsRole(LnspValue);
        /// <summary> DRSP. </summary>
        public static EnergyServicePointDetailRelatedParticipantsRole Drsp { get; } = new EnergyServicePointDetailRelatedParticipantsRole(DrspValue);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailRelatedParticipantsRole"/> values are the same. </summary>
        public static bool operator ==(EnergyServicePointDetailRelatedParticipantsRole left, EnergyServicePointDetailRelatedParticipantsRole right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyServicePointDetailRelatedParticipantsRole"/> values are not the same. </summary>
        public static bool operator !=(EnergyServicePointDetailRelatedParticipantsRole left, EnergyServicePointDetailRelatedParticipantsRole right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyServicePointDetailRelatedParticipantsRole"/>. </summary>
        public static implicit operator EnergyServicePointDetailRelatedParticipantsRole(string value) => new EnergyServicePointDetailRelatedParticipantsRole(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyServicePointDetailRelatedParticipantsRole other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyServicePointDetailRelatedParticipantsRole other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
