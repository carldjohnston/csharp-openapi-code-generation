// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The term of the fee. </summary>
    public readonly partial struct EnergyPlanFeesItemTerm : IEquatable<EnergyPlanFeesItemTerm>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPlanFeesItemTerm"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPlanFeesItemTerm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FixedValue = "FIXED";
        private const string OneYearValue = "1_YEAR";
        private const string TwoYearValue = "2_YEAR";
        private const string ThreeYearValue = "3_YEAR";
        private const string FourYearValue = "4_YEAR";
        private const string FiveYearValue = "5_YEAR";
        private const string PercentOFBillValue = "PERCENT_OF_BILL";
        private const string AnnualValue = "ANNUAL";
        private const string DailyValue = "DAILY";
        private const string WeeklyValue = "WEEKLY";
        private const string MonthlyValue = "MONTHLY";
        private const string BiannualValue = "BIANNUAL";
        private const string VariableValue = "VARIABLE";

        /// <summary> FIXED. </summary>
        public static EnergyPlanFeesItemTerm Fixed { get; } = new EnergyPlanFeesItemTerm(FixedValue);
        /// <summary> 1_YEAR. </summary>
        public static EnergyPlanFeesItemTerm OneYear { get; } = new EnergyPlanFeesItemTerm(OneYearValue);
        /// <summary> 2_YEAR. </summary>
        public static EnergyPlanFeesItemTerm TwoYear { get; } = new EnergyPlanFeesItemTerm(TwoYearValue);
        /// <summary> 3_YEAR. </summary>
        public static EnergyPlanFeesItemTerm ThreeYear { get; } = new EnergyPlanFeesItemTerm(ThreeYearValue);
        /// <summary> 4_YEAR. </summary>
        public static EnergyPlanFeesItemTerm FourYear { get; } = new EnergyPlanFeesItemTerm(FourYearValue);
        /// <summary> 5_YEAR. </summary>
        public static EnergyPlanFeesItemTerm FiveYear { get; } = new EnergyPlanFeesItemTerm(FiveYearValue);
        /// <summary> PERCENT_OF_BILL. </summary>
        public static EnergyPlanFeesItemTerm PercentOFBill { get; } = new EnergyPlanFeesItemTerm(PercentOFBillValue);
        /// <summary> ANNUAL. </summary>
        public static EnergyPlanFeesItemTerm Annual { get; } = new EnergyPlanFeesItemTerm(AnnualValue);
        /// <summary> DAILY. </summary>
        public static EnergyPlanFeesItemTerm Daily { get; } = new EnergyPlanFeesItemTerm(DailyValue);
        /// <summary> WEEKLY. </summary>
        public static EnergyPlanFeesItemTerm Weekly { get; } = new EnergyPlanFeesItemTerm(WeeklyValue);
        /// <summary> MONTHLY. </summary>
        public static EnergyPlanFeesItemTerm Monthly { get; } = new EnergyPlanFeesItemTerm(MonthlyValue);
        /// <summary> BIANNUAL. </summary>
        public static EnergyPlanFeesItemTerm Biannual { get; } = new EnergyPlanFeesItemTerm(BiannualValue);
        /// <summary> VARIABLE. </summary>
        public static EnergyPlanFeesItemTerm Variable { get; } = new EnergyPlanFeesItemTerm(VariableValue);
        /// <summary> Determines if two <see cref="EnergyPlanFeesItemTerm"/> values are the same. </summary>
        public static bool operator ==(EnergyPlanFeesItemTerm left, EnergyPlanFeesItemTerm right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPlanFeesItemTerm"/> values are not the same. </summary>
        public static bool operator !=(EnergyPlanFeesItemTerm left, EnergyPlanFeesItemTerm right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPlanFeesItemTerm"/>. </summary>
        public static implicit operator EnergyPlanFeesItemTerm(string value) => new EnergyPlanFeesItemTerm(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPlanFeesItemTerm other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPlanFeesItemTerm other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
