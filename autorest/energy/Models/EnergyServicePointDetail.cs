// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Agl.Cdr.Energy;

namespace Agl.Cdr.Energy.Models
{
    /// <summary> The EnergyServicePointDetail. </summary>
    public partial class EnergyServicePointDetail
    {
        /// <summary> Initializes a new instance of EnergyServicePointDetail. </summary>
        /// <param name="servicePointId"> The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence. </param>
        /// <param name="nationalMeteringId"> The independent ID of the service point, known in the industry as the NMI. </param>
        /// <param name="servicePointClassification"> The classification of the service point as defined in MSATS procedures. </param>
        /// <param name="servicePointStatus"> Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt;. </param>
        /// <param name="jurisdictionCode"> Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;. </param>
        /// <param name="validFromDate"> The start date from which this service point first became valid. </param>
        /// <param name="lastUpdateDateTime"> The date and time that the information for this service point was modified. </param>
        /// <param name="distributionLossFactor"> . </param>
        /// <param name="relatedParticipants"> . </param>
        /// <param name="location"> . </param>
        /// <param name="meters"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="servicePointId"/>, <paramref name="nationalMeteringId"/>, <paramref name="validFromDate"/>, <paramref name="lastUpdateDateTime"/>, <paramref name="distributionLossFactor"/>, <paramref name="relatedParticipants"/>, <paramref name="location"/>, or <paramref name="meters"/> is null. </exception>
        internal EnergyServicePointDetail(string servicePointId, string nationalMeteringId, EnergyServicePointDetailServicePointClassification servicePointClassification, EnergyServicePointDetailServicePointStatus servicePointStatus, EnergyServicePointDetailJurisdictionCode jurisdictionCode, string validFromDate, string lastUpdateDateTime, EnergyServicePointDetailDistributionLossFactor distributionLossFactor, List<EnergyServicePointDetailRelatedParticipants> relatedParticipants, EnergyServicePointDetailLocation location, EnergyServicePointDetailMeters meters)
        {
            if (servicePointId == null)
            {
                throw new ArgumentNullException(nameof(servicePointId));
            }
            if (nationalMeteringId == null)
            {
                throw new ArgumentNullException(nameof(nationalMeteringId));
            }
            if (validFromDate == null)
            {
                throw new ArgumentNullException(nameof(validFromDate));
            }
            if (lastUpdateDateTime == null)
            {
                throw new ArgumentNullException(nameof(lastUpdateDateTime));
            }
            if (distributionLossFactor == null)
            {
                throw new ArgumentNullException(nameof(distributionLossFactor));
            }
            if (relatedParticipants == null)
            {
                throw new ArgumentNullException(nameof(relatedParticipants));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (meters == null)
            {
                throw new ArgumentNullException(nameof(meters));
            }

            ServicePointId = servicePointId;
            NationalMeteringId = nationalMeteringId;
            ServicePointClassification = servicePointClassification;
            ServicePointStatus = servicePointStatus;
            JurisdictionCode = jurisdictionCode;
            ValidFromDate = validFromDate;
            LastUpdateDateTime = lastUpdateDateTime;
            DistributionLossFactor = distributionLossFactor;
            RelatedParticipants = relatedParticipants;
            Location = location;
            Meters = meters;
        }

        /// <summary> Initializes a new instance of EnergyServicePointDetail. </summary>
        /// <param name="servicePointId"> The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence. </param>
        /// <param name="nationalMeteringId"> The independent ID of the service point, known in the industry as the NMI. </param>
        /// <param name="servicePointClassification"> The classification of the service point as defined in MSATS procedures. </param>
        /// <param name="servicePointStatus"> Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt;. </param>
        /// <param name="jurisdictionCode"> Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;. </param>
        /// <param name="isGenerator"> This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer. </param>
        /// <param name="validFromDate"> The start date from which this service point first became valid. </param>
        /// <param name="lastUpdateDateTime"> The date and time that the information for this service point was modified. </param>
        /// <param name="consumerProfile"> . </param>
        /// <param name="distributionLossFactor"> . </param>
        /// <param name="relatedParticipants"> . </param>
        /// <param name="location"> . </param>
        /// <param name="meters"> . </param>
        internal EnergyServicePointDetail(string servicePointId, string nationalMeteringId, EnergyServicePointDetailServicePointClassification servicePointClassification, EnergyServicePointDetailServicePointStatus servicePointStatus, EnergyServicePointDetailJurisdictionCode jurisdictionCode, bool? isGenerator, string validFromDate, string lastUpdateDateTime, EnergyServicePointConsumerProfile consumerProfile, EnergyServicePointDetailDistributionLossFactor distributionLossFactor, IReadOnlyList<EnergyServicePointDetailRelatedParticipants> relatedParticipants, EnergyServicePointDetailLocation location, EnergyServicePointDetailMeters meters)
        {
            ServicePointId = servicePointId;
            NationalMeteringId = nationalMeteringId;
            ServicePointClassification = servicePointClassification;
            ServicePointStatus = servicePointStatus;
            JurisdictionCode = jurisdictionCode;
            IsGenerator = isGenerator;
            ValidFromDate = validFromDate;
            LastUpdateDateTime = lastUpdateDateTime;
            ConsumerProfile = consumerProfile;
            DistributionLossFactor = distributionLossFactor;
            RelatedParticipants = relatedParticipants;
            Location = location;
            Meters = meters;
        }

        /// <summary> The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence. </summary>
        public string ServicePointId { get; }
        /// <summary> The independent ID of the service point, known in the industry as the NMI. </summary>
        public string NationalMeteringId { get; }
        /// <summary> The classification of the service point as defined in MSATS procedures. </summary>
        public EnergyServicePointDetailServicePointClassification ServicePointClassification { get; }
        /// <summary> Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt;. </summary>
        public EnergyServicePointDetailServicePointStatus ServicePointStatus { get; }
        /// <summary> Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;. </summary>
        public EnergyServicePointDetailJurisdictionCode JurisdictionCode { get; }
        /// <summary> This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer. </summary>
        public bool? IsGenerator { get; }
        /// <summary> The start date from which this service point first became valid. </summary>
        public string ValidFromDate { get; }
        /// <summary> The date and time that the information for this service point was modified. </summary>
        public string LastUpdateDateTime { get; }
        public EnergyServicePointConsumerProfile ConsumerProfile { get; }
        public EnergyServicePointDetailDistributionLossFactor DistributionLossFactor { get; }
        public IReadOnlyList<EnergyServicePointDetailRelatedParticipants> RelatedParticipants { get; }
        public EnergyServicePointDetailLocation Location { get; }
        public EnergyServicePointDetailMeters Meters { get; }
    }
}
