// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Agl.Cdr.Energy
{
    /// <summary> The mechanism by which the payment amount is calculated.  Explanation of values are as follows:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;**STATIC** - Indicates a consistent, static amount, per payment&lt;/li&gt;&lt;li&gt;**BALANCE** - Indicates that the outstanding balance for the account is paid per period&lt;/li&gt;&lt;li&gt;**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm&lt;/li&gt;&lt;/ul&gt;. </summary>
    public readonly partial struct EnergyPaymentScheduleCardDebitCalculationType : IEquatable<EnergyPaymentScheduleCardDebitCalculationType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EnergyPaymentScheduleCardDebitCalculationType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnergyPaymentScheduleCardDebitCalculationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StaticValue = "STATIC";
        private const string BalanceValue = "BALANCE";
        private const string CalculatedValue = "CALCULATED";

        /// <summary> STATIC. </summary>
        public static EnergyPaymentScheduleCardDebitCalculationType Static { get; } = new EnergyPaymentScheduleCardDebitCalculationType(StaticValue);
        /// <summary> BALANCE. </summary>
        public static EnergyPaymentScheduleCardDebitCalculationType Balance { get; } = new EnergyPaymentScheduleCardDebitCalculationType(BalanceValue);
        /// <summary> CALCULATED. </summary>
        public static EnergyPaymentScheduleCardDebitCalculationType Calculated { get; } = new EnergyPaymentScheduleCardDebitCalculationType(CalculatedValue);
        /// <summary> Determines if two <see cref="EnergyPaymentScheduleCardDebitCalculationType"/> values are the same. </summary>
        public static bool operator ==(EnergyPaymentScheduleCardDebitCalculationType left, EnergyPaymentScheduleCardDebitCalculationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnergyPaymentScheduleCardDebitCalculationType"/> values are not the same. </summary>
        public static bool operator !=(EnergyPaymentScheduleCardDebitCalculationType left, EnergyPaymentScheduleCardDebitCalculationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnergyPaymentScheduleCardDebitCalculationType"/>. </summary>
        public static implicit operator EnergyPaymentScheduleCardDebitCalculationType(string value) => new EnergyPaymentScheduleCardDebitCalculationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnergyPaymentScheduleCardDebitCalculationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnergyPaymentScheduleCardDebitCalculationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
