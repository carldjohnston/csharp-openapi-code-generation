// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Agl.Cdr.Energy;

namespace Agl.Cdr.Energy.Models
{
    /// <summary> The EnergyPlanDetail. </summary>
    public partial class EnergyPlanDetail : EnergyPlan
    {
        /// <summary> Initializes a new instance of EnergyPlanDetail. </summary>
        /// <param name="planId"> The ID of the specific plan. </param>
        /// <param name="lastUpdated"> The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered). </param>
        /// <param name="type"> The type of the plan. </param>
        /// <param name="fuelType"> The fuel types covered by the plan. </param>
        /// <param name="brand"> The ID of the brand under which this plan is offered. </param>
        /// <param name="brandName"> The display name of the brand under which this plan is offered. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="planId"/>, <paramref name="lastUpdated"/>, <paramref name="brand"/>, or <paramref name="brandName"/> is null. </exception>
        internal EnergyPlanDetail(string planId, string lastUpdated, EnergyPlanType type, EnergyPlanFuelType fuelType, string brand, string brandName) : base(planId, lastUpdated, type, fuelType, brand, brandName)
        {
            if (planId == null)
            {
                throw new ArgumentNullException(nameof(planId));
            }
            if (lastUpdated == null)
            {
                throw new ArgumentNullException(nameof(lastUpdated));
            }
            if (brand == null)
            {
                throw new ArgumentNullException(nameof(brand));
            }
            if (brandName == null)
            {
                throw new ArgumentNullException(nameof(brandName));
            }

            MeteringCharges = new List<EnergyPlanDetailAllOfMeteringCharges>();
        }

        /// <summary> Initializes a new instance of EnergyPlanDetail. </summary>
        /// <param name="planId"> The ID of the specific plan. </param>
        /// <param name="effectiveFrom"> The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate. </param>
        /// <param name="effectiveTo"> The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans. </param>
        /// <param name="lastUpdated"> The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered). </param>
        /// <param name="displayName"> The display name of the plan. </param>
        /// <param name="description"> A description of the plan. </param>
        /// <param name="type"> The type of the plan. </param>
        /// <param name="fuelType"> The fuel types covered by the plan. </param>
        /// <param name="brand"> The ID of the brand under which this plan is offered. </param>
        /// <param name="brandName"> The display name of the brand under which this plan is offered. </param>
        /// <param name="applicationUri"> A link to an application web page where this plan can be applied for. </param>
        /// <param name="additionalInformation"> Object that contains links to additional information on specific topics. </param>
        /// <param name="customerType"> The type of customer that the plan is offered to.  If absent then the plan is available to all customers. </param>
        /// <param name="geography"> Describes the geographical area that the plan is available for.  If absent then it is assumed the plan is not geographically limited. </param>
        /// <param name="meteringCharges"> Charges for metering included in the plan. </param>
        /// <param name="gasContract"> . </param>
        /// <param name="electricityContract"> . </param>
        internal EnergyPlanDetail(string planId, string effectiveFrom, string effectiveTo, string lastUpdated, string displayName, string description, EnergyPlanType type, EnergyPlanFuelType fuelType, string brand, string brandName, string applicationUri, EnergyPlanAdditionalInformation additionalInformation, EnergyPlanCustomerType? customerType, EnergyPlanGeography geography, IReadOnlyList<EnergyPlanDetailAllOfMeteringCharges> meteringCharges, EnergyPlanContractFull gasContract, EnergyPlanContractFull electricityContract) : base(planId, effectiveFrom, effectiveTo, lastUpdated, displayName, description, type, fuelType, brand, brandName, applicationUri, additionalInformation, customerType, geography)
        {
            MeteringCharges = meteringCharges;
            GasContract = gasContract;
            ElectricityContract = electricityContract;
        }

        /// <summary> Charges for metering included in the plan. </summary>
        public IReadOnlyList<EnergyPlanDetailAllOfMeteringCharges> MeteringCharges { get; }
        public EnergyPlanContractFull GasContract { get; }
        public EnergyPlanContractFull ElectricityContract { get; }
    }
}
