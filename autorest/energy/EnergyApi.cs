// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Agl.Cdr.Energy.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;

namespace Agl.Cdr.Energy
{
    public class EnergyApi
    {
        private ILogger<EnergyApi> _logger;

        /// <summary> Initializes a new instance of EnergyApi. </summary>
        /// <param name="logger"> Class logger. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logger"/> is null. </exception>
        public EnergyApi(ILogger<EnergyApi> logger)
        {
            if (logger == null)
            {
                throw new ArgumentNullException(nameof(logger));
            }

            _logger = logger;
        }

        /// <summary>
        /// Obtain a list of energy plans that are currently offered to the market.
        /// 
        /// Note that the results returned by this end point are expected to be ordered in descending order according to `lastUpdated`.
        /// </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListPlansAsync_get")]
        public async Task<IActionResult> ListPlansAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/plans")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain detailed information on a single energy plan offered openly to the market. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="planId"> ID of the specific plan requested. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="planId"/> is null. </exception>
        [FunctionName("GetPlanAsync_get")]
        public async Task<IActionResult> GetPlanAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/plans/{planId}")] HttpRequest req, string planId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain a list of service points owned by the customer that has authorised the current session. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListServicePointsAsync_get")]
        public async Task<IActionResult> ListServicePointsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/electricity/servicepoints")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain detailed standing information for a specific service point that is owned by the customer that has authorised the current session. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="servicePointId"> ID of the specific service point requested.  This is a tokenised ID previous obtained from the Service Point List Data end point.  Note that it is not a nationalMeteringId. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="servicePointId"/> is null. </exception>
        [FunctionName("GetServicePointAsync_get")]
        public async Task<IActionResult> GetServicePointAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/electricity/servicepoints/{servicePointId}")] HttpRequest req, string servicePointId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain a list of electricity usage data from a particular service point. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="servicePointId"> ID of the specific service point requested.  This is a tokenised ID previous obtained from the Service Point List Data end point.  Note that it is not a nationalMeteringId. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="servicePointId"/> is null. </exception>
        [FunctionName("GetUsageForServicePointAsync_get")]
        public async Task<IActionResult> GetUsageForServicePointAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/electricity/servicepoints/{servicePointId}/usage")] HttpRequest req, string servicePointId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain usage data for all service points associated with the customer. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListUsageBulkAsync_get")]
        public async Task<IActionResult> ListUsageBulkAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/electricity/servicepoints/usage")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the electricity usage data for a specific set of service points. </summary>
        /// <param name="body"> Request payload containing list of specific Service Points to obtain data for. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [FunctionName("ListUsageForServicePointsAsync_post")]
        public async Task<IActionResult> ListUsageForServicePointsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "energy/electricity/servicepoints/usage")] Components1S7CyfyRequestbodiesServicepointidlistContentApplicationJsonSchema body, HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain a list of DER data from a particular service point. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="servicePointId"> ID of the specific service point requested.  This is a tokenised ID previous obtained from the Service Point List Data end point.  Note that it is not a nationalMeteringId. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="servicePointId"/> is null. </exception>
        [FunctionName("GetDERForServicePointAsync_get")]
        public async Task<IActionResult> GetDERForServicePointAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/electricity/servicepoints/{servicePointId}/der")] HttpRequest req, string servicePointId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain DER data for all service points associated with the customer. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListDERBulkAsync_get")]
        public async Task<IActionResult> ListDERBulkAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/electricity/servicepoints/der")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain DER data for a specific set of service points. </summary>
        /// <param name="body"> Request payload containing list of specific Service Points to obtain data for. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [FunctionName("ListDERForServicePointsAsync_post")]
        public async Task<IActionResult> ListDERForServicePointsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "energy/electricity/servicepoints/der")] Components1S7CyfyRequestbodiesServicepointidlistContentApplicationJsonSchema body, HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the list of energy accounts available under the authorised consent. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListAccountsAsync_get")]
        public async Task<IActionResult> ListAccountsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain detailed information for a specific energy account. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="accountId"> ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        [FunctionName("GetAccountAsync_get")]
        public async Task<IActionResult> GetAccountAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/{accountId}")] HttpRequest req, string accountId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the agreed payment schedule and details, if any, for a specific energy account. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="accountId"> ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        [FunctionName("GetPaymentScheduleAsync_get")]
        public async Task<IActionResult> GetPaymentScheduleAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/{accountId}/payment-schedule")] HttpRequest req, string accountId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the details of any concessions or arrangements applied to a specific energy account. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="accountId"> ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        [FunctionName("GetConcessionsAsync_get")]
        public async Task<IActionResult> GetConcessionsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/{accountId}/concessions")] HttpRequest req, string accountId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the current balance for a specific account. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="accountId"> ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        [FunctionName("GetBalanceForAccountAsync_get")]
        public async Task<IActionResult> GetBalanceForAccountAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/{accountId}/balance")] HttpRequest req, string accountId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the current balance for all accounts. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListBalancesBulkAsync_get")]
        public async Task<IActionResult> ListBalancesBulkAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/balances")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the current balance for a specified set of accounts. </summary>
        /// <param name="body"> Request payload containing list of specific Accounts to obtain data for. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [FunctionName("ListBalancesForAccountsAsync_post")]
        public async Task<IActionResult> ListBalancesForAccountsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "energy/accounts/balances")] Components51C1UbRequestbodiesAccountidlistContentApplicationJsonSchema body, HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the invoices for a specific account. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="accountId"> ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        [FunctionName("GetInvoicesForAccountAsync_get")]
        public async Task<IActionResult> GetInvoicesForAccountAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/{accountId}/invoices")] HttpRequest req, string accountId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the invoices for all accounts. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListInvoicesBulkAsync_get")]
        public async Task<IActionResult> ListInvoicesBulkAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/invoices")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain invoices for a specified set of accounts. </summary>
        /// <param name="body"> Request payload containing list of specific Accounts to obtain data for. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [FunctionName("ListInvoicesForAccountsAsync_post")]
        public async Task<IActionResult> ListInvoicesForAccountsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "energy/accounts/invoices")] Components51C1UbRequestbodiesAccountidlistContentApplicationJsonSchema body, HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain the billing transactions for a specific account. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="accountId"> ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        [FunctionName("GetBillingForAccountAsync_get")]
        public async Task<IActionResult> GetBillingForAccountAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/{accountId}/billing")] HttpRequest req, string accountId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain billing transactions for all accounts. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListBillingBulkAsync_get")]
        public async Task<IActionResult> ListBillingBulkAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "energy/accounts/billing")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Obtain billing for a specified set of accounts. </summary>
        /// <param name="body"> Request payload containing list of specific Accounts to obtain data for. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [FunctionName("ListBillingForAccountsAsync_post")]
        public async Task<IActionResult> ListBillingForAccountsAsync([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "energy/accounts/billing")] Components51C1UbRequestbodiesAccountidlistContentApplicationJsonSchema body, HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }
    }
}
