/*
 * CDR Admin API
 *
 * Data Holder Consumer Data Standards Administration End Points created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Agl.Cdr.Admin
{
    /// <summary>
    /// Average response time in seconds, at millisecond resolution, within each performance tier
    /// </summary>
    [DataContract(Name = "AverageResponseMetricsV2")]
    public partial class AverageResponseMetricsV2 : IEquatable<AverageResponseMetricsV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AverageResponseMetricsV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AverageResponseMetricsV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AverageResponseMetricsV2" /> class.
        /// </summary>
        /// <param name="unauthenticated">unauthenticated (required).</param>
        /// <param name="highPriority">highPriority (required).</param>
        /// <param name="lowPriority">lowPriority (required).</param>
        /// <param name="unattended">unattended (required).</param>
        /// <param name="largePayload">largePayload (required).</param>
        /// <param name="secondary">secondary.</param>
        /// <param name="largeSecondary">largeSecondary.</param>
        public AverageResponseMetricsV2(AverageResponseMetricsV2Unauthenticated unauthenticated = default(AverageResponseMetricsV2Unauthenticated), AverageResponseMetricsV2HighPriority highPriority = default(AverageResponseMetricsV2HighPriority), AverageResponseMetricsV2LowPriority lowPriority = default(AverageResponseMetricsV2LowPriority), AverageResponseMetricsV2Unattended unattended = default(AverageResponseMetricsV2Unattended), AverageResponseMetricsV2LargePayload largePayload = default(AverageResponseMetricsV2LargePayload), AverageResponseMetricsV2SecondaryRef secondary = default(AverageResponseMetricsV2SecondaryRef), AverageResponseMetricsV2LargeSecondary largeSecondary = default(AverageResponseMetricsV2LargeSecondary))
        {
            // to ensure "unauthenticated" is required (not null)
            this.Unauthenticated = unauthenticated ?? throw new ArgumentNullException("unauthenticated is a required property for AverageResponseMetricsV2 and cannot be null");
            // to ensure "highPriority" is required (not null)
            this.HighPriority = highPriority ?? throw new ArgumentNullException("highPriority is a required property for AverageResponseMetricsV2 and cannot be null");
            // to ensure "lowPriority" is required (not null)
            this.LowPriority = lowPriority ?? throw new ArgumentNullException("lowPriority is a required property for AverageResponseMetricsV2 and cannot be null");
            // to ensure "unattended" is required (not null)
            this.Unattended = unattended ?? throw new ArgumentNullException("unattended is a required property for AverageResponseMetricsV2 and cannot be null");
            // to ensure "largePayload" is required (not null)
            this.LargePayload = largePayload ?? throw new ArgumentNullException("largePayload is a required property for AverageResponseMetricsV2 and cannot be null");
            this.Secondary = secondary;
            this.LargeSecondary = largeSecondary;
        }

        /// <summary>
        /// Gets or Sets Unauthenticated
        /// </summary>
        [DataMember(Name = "unauthenticated", IsRequired = true, EmitDefaultValue = false)]
        public AverageResponseMetricsV2Unauthenticated Unauthenticated { get; set; }

        /// <summary>
        /// Gets or Sets HighPriority
        /// </summary>
        [DataMember(Name = "highPriority", IsRequired = true, EmitDefaultValue = false)]
        public AverageResponseMetricsV2HighPriority HighPriority { get; set; }

        /// <summary>
        /// Gets or Sets LowPriority
        /// </summary>
        [DataMember(Name = "lowPriority", IsRequired = true, EmitDefaultValue = false)]
        public AverageResponseMetricsV2LowPriority LowPriority { get; set; }

        /// <summary>
        /// Gets or Sets Unattended
        /// </summary>
        [DataMember(Name = "unattended", IsRequired = true, EmitDefaultValue = false)]
        public AverageResponseMetricsV2Unattended Unattended { get; set; }

        /// <summary>
        /// Gets or Sets LargePayload
        /// </summary>
        [DataMember(Name = "largePayload", IsRequired = true, EmitDefaultValue = false)]
        public AverageResponseMetricsV2LargePayload LargePayload { get; set; }

        /// <summary>
        /// Gets or Sets Secondary
        /// </summary>
        [DataMember(Name = "secondary", EmitDefaultValue = false)]
        public AverageResponseMetricsV2SecondaryRef Secondary { get; set; }

        /// <summary>
        /// Gets or Sets LargeSecondary
        /// </summary>
        [DataMember(Name = "largeSecondary", EmitDefaultValue = false)]
        public AverageResponseMetricsV2LargeSecondary LargeSecondary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AverageResponseMetricsV2 {\n");
            sb.Append("  Unauthenticated: ").Append(Unauthenticated).Append("\n");
            sb.Append("  HighPriority: ").Append(HighPriority).Append("\n");
            sb.Append("  LowPriority: ").Append(LowPriority).Append("\n");
            sb.Append("  Unattended: ").Append(Unattended).Append("\n");
            sb.Append("  LargePayload: ").Append(LargePayload).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  LargeSecondary: ").Append(LargeSecondary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AverageResponseMetricsV2);
        }

        /// <summary>
        /// Returns true if AverageResponseMetricsV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of AverageResponseMetricsV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AverageResponseMetricsV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unauthenticated == input.Unauthenticated ||
                    (this.Unauthenticated != null &&
                    this.Unauthenticated.Equals(input.Unauthenticated))
                ) && 
                (
                    this.HighPriority == input.HighPriority ||
                    (this.HighPriority != null &&
                    this.HighPriority.Equals(input.HighPriority))
                ) && 
                (
                    this.LowPriority == input.LowPriority ||
                    (this.LowPriority != null &&
                    this.LowPriority.Equals(input.LowPriority))
                ) && 
                (
                    this.Unattended == input.Unattended ||
                    (this.Unattended != null &&
                    this.Unattended.Equals(input.Unattended))
                ) && 
                (
                    this.LargePayload == input.LargePayload ||
                    (this.LargePayload != null &&
                    this.LargePayload.Equals(input.LargePayload))
                ) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && 
                (
                    this.LargeSecondary == input.LargeSecondary ||
                    (this.LargeSecondary != null &&
                    this.LargeSecondary.Equals(input.LargeSecondary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unauthenticated != null)
                    hashCode = hashCode * 59 + this.Unauthenticated.GetHashCode();
                if (this.HighPriority != null)
                    hashCode = hashCode * 59 + this.HighPriority.GetHashCode();
                if (this.LowPriority != null)
                    hashCode = hashCode * 59 + this.LowPriority.GetHashCode();
                if (this.Unattended != null)
                    hashCode = hashCode * 59 + this.Unattended.GetHashCode();
                if (this.LargePayload != null)
                    hashCode = hashCode * 59 + this.LargePayload.GetHashCode();
                if (this.Secondary != null)
                    hashCode = hashCode * 59 + this.Secondary.GetHashCode();
                if (this.LargeSecondary != null)
                    hashCode = hashCode * 59 + this.LargeSecondary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
