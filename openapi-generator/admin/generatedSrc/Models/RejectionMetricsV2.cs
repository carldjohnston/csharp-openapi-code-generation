/*
 * CDR Admin API
 *
 * Data Holder Consumer Data Standards Administration End Points created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Agl.Cdr.Admin
{
    /// <summary>
    /// Number of calls rejected due to traffic thresholds over time
    /// </summary>
    [DataContract(Name = "RejectionMetricsV2")]
    public partial class RejectionMetricsV2 : IEquatable<RejectionMetricsV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RejectionMetricsV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RejectionMetricsV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RejectionMetricsV2" /> class.
        /// </summary>
        /// <param name="authenticated">authenticated (required).</param>
        /// <param name="unauthenticated">unauthenticated (required).</param>
        public RejectionMetricsV2(RejectionMetricsV2Authenticated authenticated = default(RejectionMetricsV2Authenticated), RejectionMetricsV2Unauthenticated unauthenticated = default(RejectionMetricsV2Unauthenticated))
        {
            // to ensure "authenticated" is required (not null)
            this.Authenticated = authenticated ?? throw new ArgumentNullException("authenticated is a required property for RejectionMetricsV2 and cannot be null");
            // to ensure "unauthenticated" is required (not null)
            this.Unauthenticated = unauthenticated ?? throw new ArgumentNullException("unauthenticated is a required property for RejectionMetricsV2 and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Authenticated
        /// </summary>
        [DataMember(Name = "authenticated", IsRequired = true, EmitDefaultValue = false)]
        public RejectionMetricsV2Authenticated Authenticated { get; set; }

        /// <summary>
        /// Gets or Sets Unauthenticated
        /// </summary>
        [DataMember(Name = "unauthenticated", IsRequired = true, EmitDefaultValue = false)]
        public RejectionMetricsV2Unauthenticated Unauthenticated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RejectionMetricsV2 {\n");
            sb.Append("  Authenticated: ").Append(Authenticated).Append("\n");
            sb.Append("  Unauthenticated: ").Append(Unauthenticated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RejectionMetricsV2);
        }

        /// <summary>
        /// Returns true if RejectionMetricsV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of RejectionMetricsV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RejectionMetricsV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Authenticated == input.Authenticated ||
                    (this.Authenticated != null &&
                    this.Authenticated.Equals(input.Authenticated))
                ) && 
                (
                    this.Unauthenticated == input.Unauthenticated ||
                    (this.Unauthenticated != null &&
                    this.Unauthenticated.Equals(input.Unauthenticated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authenticated != null)
                    hashCode = hashCode * 59 + this.Authenticated.GetHashCode();
                if (this.Unauthenticated != null)
                    hashCode = hashCode * 59 + this.Unauthenticated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
