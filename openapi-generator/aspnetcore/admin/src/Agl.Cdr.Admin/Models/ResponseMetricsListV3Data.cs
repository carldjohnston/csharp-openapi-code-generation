/*
 * CDR Admin API
 *
 * Data Holder Consumer Data Standards Administration End Points created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Admin.Converters;

namespace Agl.Cdr.Admin.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResponseMetricsListV3Data : IEquatable<ResponseMetricsListV3Data>
    {
        /// <summary>
        /// The date and time that the metrics in this payload were requested.
        /// </summary>
        /// <value>The date and time that the metrics in this payload were requested.</value>
        [Required]
        [DataMember(Name="requestTime", EmitDefaultValue=false)]
        public string RequestTime { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [Required]
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public AvailabilityMetrics Availability { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [Required]
        [DataMember(Name="performance", EmitDefaultValue=false)]
        public PerformanceMetrics Performance { get; set; }

        /// <summary>
        /// Gets or Sets Invocations
        /// </summary>
        [Required]
        [DataMember(Name="invocations", EmitDefaultValue=false)]
        public InvocationMetricsV2 Invocations { get; set; }

        /// <summary>
        /// Gets or Sets AverageResponse
        /// </summary>
        [Required]
        [DataMember(Name="averageResponse", EmitDefaultValue=false)]
        public AverageResponseMetricsV2 AverageResponse { get; set; }

        /// <summary>
        /// Gets or Sets SessionCount
        /// </summary>
        [Required]
        [DataMember(Name="sessionCount", EmitDefaultValue=false)]
        public SessionCountMetrics SessionCount { get; set; }

        /// <summary>
        /// Gets or Sets AverageTps
        /// </summary>
        [Required]
        [DataMember(Name="averageTps", EmitDefaultValue=false)]
        public AverageTPSMetrics AverageTps { get; set; }

        /// <summary>
        /// Gets or Sets PeakTps
        /// </summary>
        [Required]
        [DataMember(Name="peakTps", EmitDefaultValue=false)]
        public PeakTPSMetrics PeakTps { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [Required]
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public ErrorMetrics Errors { get; set; }

        /// <summary>
        /// Gets or Sets Rejections
        /// </summary>
        [Required]
        [DataMember(Name="rejections", EmitDefaultValue=false)]
        public RejectionMetricsV2 Rejections { get; set; }

        /// <summary>
        /// Number of customers with active authorisations at the time of the call
        /// </summary>
        /// <value>Number of customers with active authorisations at the time of the call</value>
        [Required]
        [DataMember(Name="customerCount", EmitDefaultValue=false)]
        public int CustomerCount { get; set; }

        /// <summary>
        /// Number of Data Recipient Software Products with active authorisations at the time of the call
        /// </summary>
        /// <value>Number of Data Recipient Software Products with active authorisations at the time of the call</value>
        [Required]
        [DataMember(Name="recipientCount", EmitDefaultValue=false)]
        public int RecipientCount { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryHolder
        /// </summary>
        [DataMember(Name="secondaryHolder", EmitDefaultValue=false)]
        public SecondaryHolderMetrics SecondaryHolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseMetricsListV3Data {\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  Invocations: ").Append(Invocations).Append("\n");
            sb.Append("  AverageResponse: ").Append(AverageResponse).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  AverageTps: ").Append(AverageTps).Append("\n");
            sb.Append("  PeakTps: ").Append(PeakTps).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Rejections: ").Append(Rejections).Append("\n");
            sb.Append("  CustomerCount: ").Append(CustomerCount).Append("\n");
            sb.Append("  RecipientCount: ").Append(RecipientCount).Append("\n");
            sb.Append("  SecondaryHolder: ").Append(SecondaryHolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseMetricsListV3Data)obj);
        }

        /// <summary>
        /// Returns true if ResponseMetricsListV3Data instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseMetricsListV3Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseMetricsListV3Data other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestTime == other.RequestTime ||
                    RequestTime != null &&
                    RequestTime.Equals(other.RequestTime)
                ) && 
                (
                    Availability == other.Availability ||
                    Availability != null &&
                    Availability.Equals(other.Availability)
                ) && 
                (
                    Performance == other.Performance ||
                    Performance != null &&
                    Performance.Equals(other.Performance)
                ) && 
                (
                    Invocations == other.Invocations ||
                    Invocations != null &&
                    Invocations.Equals(other.Invocations)
                ) && 
                (
                    AverageResponse == other.AverageResponse ||
                    AverageResponse != null &&
                    AverageResponse.Equals(other.AverageResponse)
                ) && 
                (
                    SessionCount == other.SessionCount ||
                    SessionCount != null &&
                    SessionCount.Equals(other.SessionCount)
                ) && 
                (
                    AverageTps == other.AverageTps ||
                    AverageTps != null &&
                    AverageTps.Equals(other.AverageTps)
                ) && 
                (
                    PeakTps == other.PeakTps ||
                    PeakTps != null &&
                    PeakTps.Equals(other.PeakTps)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.Equals(other.Errors)
                ) && 
                (
                    Rejections == other.Rejections ||
                    Rejections != null &&
                    Rejections.Equals(other.Rejections)
                ) && 
                (
                    CustomerCount == other.CustomerCount ||
                    
                    CustomerCount.Equals(other.CustomerCount)
                ) && 
                (
                    RecipientCount == other.RecipientCount ||
                    
                    RecipientCount.Equals(other.RecipientCount)
                ) && 
                (
                    SecondaryHolder == other.SecondaryHolder ||
                    SecondaryHolder != null &&
                    SecondaryHolder.Equals(other.SecondaryHolder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestTime != null)
                    hashCode = hashCode * 59 + RequestTime.GetHashCode();
                    if (Availability != null)
                    hashCode = hashCode * 59 + Availability.GetHashCode();
                    if (Performance != null)
                    hashCode = hashCode * 59 + Performance.GetHashCode();
                    if (Invocations != null)
                    hashCode = hashCode * 59 + Invocations.GetHashCode();
                    if (AverageResponse != null)
                    hashCode = hashCode * 59 + AverageResponse.GetHashCode();
                    if (SessionCount != null)
                    hashCode = hashCode * 59 + SessionCount.GetHashCode();
                    if (AverageTps != null)
                    hashCode = hashCode * 59 + AverageTps.GetHashCode();
                    if (PeakTps != null)
                    hashCode = hashCode * 59 + PeakTps.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (Rejections != null)
                    hashCode = hashCode * 59 + Rejections.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomerCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + RecipientCount.GetHashCode();
                    if (SecondaryHolder != null)
                    hashCode = hashCode * 59 + SecondaryHolder.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResponseMetricsListV3Data left, ResponseMetricsListV3Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseMetricsListV3Data left, ResponseMetricsListV3Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
