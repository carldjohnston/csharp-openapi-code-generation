/*
 * CDR Admin API
 *
 * Data Holder Consumer Data Standards Administration End Points created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Admin.Converters;

namespace Agl.Cdr.Admin.Models
{ 
    /// <summary>
    /// Average response time in seconds, at millisecond resolution, within each performance tier
    /// </summary>
    [DataContract]
    public partial class AverageResponseMetricsV2 : IEquatable<AverageResponseMetricsV2>
    {
        /// <summary>
        /// Gets or Sets Unauthenticated
        /// </summary>
        [Required]
        [DataMember(Name="unauthenticated", EmitDefaultValue=false)]
        public AverageResponseMetricsV2Unauthenticated Unauthenticated { get; set; }

        /// <summary>
        /// Gets or Sets HighPriority
        /// </summary>
        [Required]
        [DataMember(Name="highPriority", EmitDefaultValue=false)]
        public AverageResponseMetricsV2HighPriority HighPriority { get; set; }

        /// <summary>
        /// Gets or Sets LowPriority
        /// </summary>
        [Required]
        [DataMember(Name="lowPriority", EmitDefaultValue=false)]
        public AverageResponseMetricsV2LowPriority LowPriority { get; set; }

        /// <summary>
        /// Gets or Sets Unattended
        /// </summary>
        [Required]
        [DataMember(Name="unattended", EmitDefaultValue=false)]
        public AverageResponseMetricsV2Unattended Unattended { get; set; }

        /// <summary>
        /// Gets or Sets LargePayload
        /// </summary>
        [Required]
        [DataMember(Name="largePayload", EmitDefaultValue=false)]
        public AverageResponseMetricsV2LargePayload LargePayload { get; set; }

        /// <summary>
        /// Gets or Sets Secondary
        /// </summary>
        [DataMember(Name="secondary", EmitDefaultValue=false)]
        public AverageResponseMetricsV2SecondaryRef Secondary { get; set; }

        /// <summary>
        /// Gets or Sets LargeSecondary
        /// </summary>
        [DataMember(Name="largeSecondary", EmitDefaultValue=false)]
        public AverageResponseMetricsV2LargeSecondary LargeSecondary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AverageResponseMetricsV2 {\n");
            sb.Append("  Unauthenticated: ").Append(Unauthenticated).Append("\n");
            sb.Append("  HighPriority: ").Append(HighPriority).Append("\n");
            sb.Append("  LowPriority: ").Append(LowPriority).Append("\n");
            sb.Append("  Unattended: ").Append(Unattended).Append("\n");
            sb.Append("  LargePayload: ").Append(LargePayload).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  LargeSecondary: ").Append(LargeSecondary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AverageResponseMetricsV2)obj);
        }

        /// <summary>
        /// Returns true if AverageResponseMetricsV2 instances are equal
        /// </summary>
        /// <param name="other">Instance of AverageResponseMetricsV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AverageResponseMetricsV2 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Unauthenticated == other.Unauthenticated ||
                    Unauthenticated != null &&
                    Unauthenticated.Equals(other.Unauthenticated)
                ) && 
                (
                    HighPriority == other.HighPriority ||
                    HighPriority != null &&
                    HighPriority.Equals(other.HighPriority)
                ) && 
                (
                    LowPriority == other.LowPriority ||
                    LowPriority != null &&
                    LowPriority.Equals(other.LowPriority)
                ) && 
                (
                    Unattended == other.Unattended ||
                    Unattended != null &&
                    Unattended.Equals(other.Unattended)
                ) && 
                (
                    LargePayload == other.LargePayload ||
                    LargePayload != null &&
                    LargePayload.Equals(other.LargePayload)
                ) && 
                (
                    Secondary == other.Secondary ||
                    Secondary != null &&
                    Secondary.Equals(other.Secondary)
                ) && 
                (
                    LargeSecondary == other.LargeSecondary ||
                    LargeSecondary != null &&
                    LargeSecondary.Equals(other.LargeSecondary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Unauthenticated != null)
                    hashCode = hashCode * 59 + Unauthenticated.GetHashCode();
                    if (HighPriority != null)
                    hashCode = hashCode * 59 + HighPriority.GetHashCode();
                    if (LowPriority != null)
                    hashCode = hashCode * 59 + LowPriority.GetHashCode();
                    if (Unattended != null)
                    hashCode = hashCode * 59 + Unattended.GetHashCode();
                    if (LargePayload != null)
                    hashCode = hashCode * 59 + LargePayload.GetHashCode();
                    if (Secondary != null)
                    hashCode = hashCode * 59 + Secondary.GetHashCode();
                    if (LargeSecondary != null)
                    hashCode = hashCode * 59 + LargeSecondary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AverageResponseMetricsV2 left, AverageResponseMetricsV2 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AverageResponseMetricsV2 left, AverageResponseMetricsV2 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
