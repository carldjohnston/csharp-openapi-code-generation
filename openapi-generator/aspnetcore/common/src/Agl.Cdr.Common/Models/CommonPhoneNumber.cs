/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Common.Converters;

namespace Agl.Cdr.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CommonPhoneNumber : IEquatable<CommonPhoneNumber>
    {
        /// <summary>
        /// May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present
        /// </summary>
        /// <value>May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present</value>
        [DataMember(Name="isPreferred", EmitDefaultValue=false)]
        public bool IsPreferred { get; set; }


        /// <summary>
        /// The purpose of the number as specified by the customer
        /// </summary>
        /// <value>The purpose of the number as specified by the customer</value>
        [TypeConverter(typeof(CustomEnumConverter<PurposeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PurposeEnum
        {
            
            /// <summary>
            /// Enum HOMEEnum for HOME
            /// </summary>
            [EnumMember(Value = "HOME")]
            HOMEEnum = 1,
            
            /// <summary>
            /// Enum INTERNATIONALEnum for INTERNATIONAL
            /// </summary>
            [EnumMember(Value = "INTERNATIONAL")]
            INTERNATIONALEnum = 2,
            
            /// <summary>
            /// Enum MOBILEEnum for MOBILE
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILEEnum = 3,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 4,
            
            /// <summary>
            /// Enum UNSPECIFIEDEnum for UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "UNSPECIFIED")]
            UNSPECIFIEDEnum = 5,
            
            /// <summary>
            /// Enum WORKEnum for WORK
            /// </summary>
            [EnumMember(Value = "WORK")]
            WORKEnum = 6
        }

        /// <summary>
        /// The purpose of the number as specified by the customer
        /// </summary>
        /// <value>The purpose of the number as specified by the customer</value>
        [Required]
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public PurposeEnum Purpose { get; set; }

        /// <summary>
        /// If absent, assumed to be Australia (+61). The + should be included
        /// </summary>
        /// <value>If absent, assumed to be Australia (+61). The + should be included</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.
        /// </summary>
        /// <value>Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.</value>
        [DataMember(Name="areaCode", EmitDefaultValue=false)]
        public string AreaCode { get; set; }

        /// <summary>
        /// The actual phone number, with leading zeros as appropriate
        /// </summary>
        /// <value>The actual phone number, with leading zeros as appropriate</value>
        [Required]
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// An extension number (if applicable)
        /// </summary>
        /// <value>An extension number (if applicable)</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }

        /// <summary>
        /// Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)
        /// </summary>
        /// <value>Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)</value>
        [Required]
        [DataMember(Name="fullNumber", EmitDefaultValue=false)]
        public string FullNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonPhoneNumber {\n");
            sb.Append("  IsPreferred: ").Append(IsPreferred).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  AreaCode: ").Append(AreaCode).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  FullNumber: ").Append(FullNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommonPhoneNumber)obj);
        }

        /// <summary>
        /// Returns true if CommonPhoneNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of CommonPhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonPhoneNumber other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsPreferred == other.IsPreferred ||
                    
                    IsPreferred.Equals(other.IsPreferred)
                ) && 
                (
                    Purpose == other.Purpose ||
                    
                    Purpose.Equals(other.Purpose)
                ) && 
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    AreaCode == other.AreaCode ||
                    AreaCode != null &&
                    AreaCode.Equals(other.AreaCode)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    Extension == other.Extension ||
                    Extension != null &&
                    Extension.Equals(other.Extension)
                ) && 
                (
                    FullNumber == other.FullNumber ||
                    FullNumber != null &&
                    FullNumber.Equals(other.FullNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsPreferred.GetHashCode();
                    
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                    if (AreaCode != null)
                    hashCode = hashCode * 59 + AreaCode.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Extension != null)
                    hashCode = hashCode * 59 + Extension.GetHashCode();
                    if (FullNumber != null)
                    hashCode = hashCode * 59 + FullNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommonPhoneNumber left, CommonPhoneNumber right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommonPhoneNumber left, CommonPhoneNumber right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
