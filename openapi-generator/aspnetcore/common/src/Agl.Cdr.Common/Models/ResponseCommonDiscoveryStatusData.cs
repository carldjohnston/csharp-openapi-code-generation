/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Common.Converters;

namespace Agl.Cdr.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResponseCommonDiscoveryStatusData : IEquatable<ResponseCommonDiscoveryStatusData>
    {

        /// <summary>
        /// Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)
        /// </summary>
        /// <value>Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum OKEnum for OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OKEnum = 1,
            
            /// <summary>
            /// Enum PARTIALFAILUREEnum for PARTIAL_FAILURE
            /// </summary>
            [EnumMember(Value = "PARTIAL_FAILURE")]
            PARTIALFAILUREEnum = 2,
            
            /// <summary>
            /// Enum SCHEDULEDOUTAGEEnum for SCHEDULED_OUTAGE
            /// </summary>
            [EnumMember(Value = "SCHEDULED_OUTAGE")]
            SCHEDULEDOUTAGEEnum = 3,
            
            /// <summary>
            /// Enum UNAVAILABLEEnum for UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "UNAVAILABLE")]
            UNAVAILABLEEnum = 4
        }

        /// <summary>
        /// Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)
        /// </summary>
        /// <value>Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK
        /// </summary>
        /// <value>Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK</value>
        [DataMember(Name="explanation", EmitDefaultValue=false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE
        /// </summary>
        /// <value>The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE</value>
        [DataMember(Name="detectionTime", EmitDefaultValue=false)]
        public string DetectionTime { get; set; }

        /// <summary>
        /// The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.
        /// </summary>
        /// <value>The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.</value>
        [DataMember(Name="expectedResolutionTime", EmitDefaultValue=false)]
        public string ExpectedResolutionTime { get; set; }

        /// <summary>
        /// The date and time that this status was last updated by the Data Holder.
        /// </summary>
        /// <value>The date and time that this status was last updated by the Data Holder.</value>
        [Required]
        [DataMember(Name="updateTime", EmitDefaultValue=false)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseCommonDiscoveryStatusData {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  DetectionTime: ").Append(DetectionTime).Append("\n");
            sb.Append("  ExpectedResolutionTime: ").Append(ExpectedResolutionTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseCommonDiscoveryStatusData)obj);
        }

        /// <summary>
        /// Returns true if ResponseCommonDiscoveryStatusData instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseCommonDiscoveryStatusData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseCommonDiscoveryStatusData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Explanation == other.Explanation ||
                    Explanation != null &&
                    Explanation.Equals(other.Explanation)
                ) && 
                (
                    DetectionTime == other.DetectionTime ||
                    DetectionTime != null &&
                    DetectionTime.Equals(other.DetectionTime)
                ) && 
                (
                    ExpectedResolutionTime == other.ExpectedResolutionTime ||
                    ExpectedResolutionTime != null &&
                    ExpectedResolutionTime.Equals(other.ExpectedResolutionTime)
                ) && 
                (
                    UpdateTime == other.UpdateTime ||
                    UpdateTime != null &&
                    UpdateTime.Equals(other.UpdateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Explanation != null)
                    hashCode = hashCode * 59 + Explanation.GetHashCode();
                    if (DetectionTime != null)
                    hashCode = hashCode * 59 + DetectionTime.GetHashCode();
                    if (ExpectedResolutionTime != null)
                    hashCode = hashCode * 59 + ExpectedResolutionTime.GetHashCode();
                    if (UpdateTime != null)
                    hashCode = hashCode * 59 + UpdateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResponseCommonDiscoveryStatusData left, ResponseCommonDiscoveryStatusData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseCommonDiscoveryStatusData left, ResponseCommonDiscoveryStatusData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
