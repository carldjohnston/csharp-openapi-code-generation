/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Common.Converters;

namespace Agl.Cdr.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CommonPersonDetailV2 : IEquatable<CommonPersonDetailV2>
    {
        /// <summary>
        /// The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data
        /// </summary>
        /// <value>The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data</value>
        [DataMember(Name="lastUpdateTime", EmitDefaultValue=false)]
        public string LastUpdateTime { get; set; }

        /// <summary>
        /// For people with single names this field need not be present. The single name should be in the lastName field. Where a data holder cannot determine first and middle names from a collection of given names, a single string representing all given names MAY be provided.
        /// </summary>
        /// <value>For people with single names this field need not be present. The single name should be in the lastName field. Where a data holder cannot determine first and middle names from a collection of given names, a single string representing all given names MAY be provided.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// For people with single names the single name should be in this field
        /// </summary>
        /// <value>For people with single names the single name should be in this field</value>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Field is mandatory but array may be empty
        /// </summary>
        /// <value>Field is mandatory but array may be empty</value>
        [Required]
        [DataMember(Name="middleNames", EmitDefaultValue=false)]
        public List<string> MiddleNames { get; set; }

        /// <summary>
        /// Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
        /// </summary>
        /// <value>Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)</value>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Used for a trailing suffix to the name (e.g. Jr)
        /// </summary>
        /// <value>Used for a trailing suffix to the name (e.g. Jr)</value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Value is a valid [ANZSCO](http://www.abs.gov.au/ANZSCO) Standard Occupation classification code. If the occupation code held by the data holder is not one of the supported [ANZSCO](http://www.abs.gov.au/ANZSCO) versions, then it must not be supplied.
        /// </summary>
        /// <value>Value is a valid [ANZSCO](http://www.abs.gov.au/ANZSCO) Standard Occupation classification code. If the occupation code held by the data holder is not one of the supported [ANZSCO](http://www.abs.gov.au/ANZSCO) versions, then it must not be supplied.</value>
        [DataMember(Name="occupationCode", EmitDefaultValue=false)]
        public string OccupationCode { get; set; }


        /// <summary>
        /// The applicable [ANZSCO](http://www.abs.gov.au/ANZSCO) release version of the occupation code provided. Mandatory if an ``occupationCode`` is supplied. If ``occupationCode`` is supplied but ``occupationCodeVersion`` is absent, default is ``ANZSCO_1220.0_2013_V1.2``
        /// </summary>
        /// <value>The applicable [ANZSCO](http://www.abs.gov.au/ANZSCO) release version of the occupation code provided. Mandatory if an ``occupationCode`` is supplied. If ``occupationCode`` is supplied but ``occupationCodeVersion`` is absent, default is ``ANZSCO_1220.0_2013_V1.2``</value>
        [TypeConverter(typeof(CustomEnumConverter<OccupationCodeVersionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OccupationCodeVersionEnum
        {
            
            /// <summary>
            /// Enum _2006V10Enum for ANZSCO_1220.0_2006_V1.0
            /// </summary>
            [EnumMember(Value = "ANZSCO_1220.0_2006_V1.0")]
            _2006V10Enum = 1,
            
            /// <summary>
            /// Enum _2006V11Enum for ANZSCO_1220.0_2006_V1.1
            /// </summary>
            [EnumMember(Value = "ANZSCO_1220.0_2006_V1.1")]
            _2006V11Enum = 2,
            
            /// <summary>
            /// Enum _2013V12Enum for ANZSCO_1220.0_2013_V1.2
            /// </summary>
            [EnumMember(Value = "ANZSCO_1220.0_2013_V1.2")]
            _2013V12Enum = 3,
            
            /// <summary>
            /// Enum _2013V13Enum for ANZSCO_1220.0_2013_V1.3
            /// </summary>
            [EnumMember(Value = "ANZSCO_1220.0_2013_V1.3")]
            _2013V13Enum = 4
        }

        /// <summary>
        /// The applicable [ANZSCO](http://www.abs.gov.au/ANZSCO) release version of the occupation code provided. Mandatory if an &#x60;&#x60;occupationCode&#x60;&#x60; is supplied. If &#x60;&#x60;occupationCode&#x60;&#x60; is supplied but &#x60;&#x60;occupationCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSCO_1220.0_2013_V1.2&#x60;&#x60;
        /// </summary>
        /// <value>The applicable [ANZSCO](http://www.abs.gov.au/ANZSCO) release version of the occupation code provided. Mandatory if an &#x60;&#x60;occupationCode&#x60;&#x60; is supplied. If &#x60;&#x60;occupationCode&#x60;&#x60; is supplied but &#x60;&#x60;occupationCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSCO_1220.0_2013_V1.2&#x60;&#x60;</value>
        [DataMember(Name="occupationCodeVersion", EmitDefaultValue=false)]
        public OccupationCodeVersionEnum OccupationCodeVersion { get; set; } = OccupationCodeVersionEnum._2013V12Enum;

        /// <summary>
        /// Array is mandatory but may be empty if no phone numbers are held
        /// </summary>
        /// <value>Array is mandatory but may be empty if no phone numbers are held</value>
        [Required]
        [DataMember(Name="phoneNumbers", EmitDefaultValue=false)]
        public List<CommonPhoneNumber> PhoneNumbers { get; set; }

        /// <summary>
        /// May be empty
        /// </summary>
        /// <value>May be empty</value>
        [Required]
        [DataMember(Name="emailAddresses", EmitDefaultValue=false)]
        public List<CommonEmailAddress> EmailAddresses { get; set; }

        /// <summary>
        /// Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
        /// </summary>
        /// <value>Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail</value>
        [Required]
        [DataMember(Name="physicalAddresses", EmitDefaultValue=false)]
        public List<CommonPhysicalAddressWithPurpose1> PhysicalAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonPersonDetailV2 {\n");
            sb.Append("  LastUpdateTime: ").Append(LastUpdateTime).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleNames: ").Append(MiddleNames).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  OccupationCode: ").Append(OccupationCode).Append("\n");
            sb.Append("  OccupationCodeVersion: ").Append(OccupationCodeVersion).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  PhysicalAddresses: ").Append(PhysicalAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommonPersonDetailV2)obj);
        }

        /// <summary>
        /// Returns true if CommonPersonDetailV2 instances are equal
        /// </summary>
        /// <param name="other">Instance of CommonPersonDetailV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonPersonDetailV2 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LastUpdateTime == other.LastUpdateTime ||
                    LastUpdateTime != null &&
                    LastUpdateTime.Equals(other.LastUpdateTime)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    MiddleNames == other.MiddleNames ||
                    MiddleNames != null &&
                    other.MiddleNames != null &&
                    MiddleNames.SequenceEqual(other.MiddleNames)
                ) && 
                (
                    Prefix == other.Prefix ||
                    Prefix != null &&
                    Prefix.Equals(other.Prefix)
                ) && 
                (
                    Suffix == other.Suffix ||
                    Suffix != null &&
                    Suffix.Equals(other.Suffix)
                ) && 
                (
                    OccupationCode == other.OccupationCode ||
                    OccupationCode != null &&
                    OccupationCode.Equals(other.OccupationCode)
                ) && 
                (
                    OccupationCodeVersion == other.OccupationCodeVersion ||
                    
                    OccupationCodeVersion.Equals(other.OccupationCodeVersion)
                ) && 
                (
                    PhoneNumbers == other.PhoneNumbers ||
                    PhoneNumbers != null &&
                    other.PhoneNumbers != null &&
                    PhoneNumbers.SequenceEqual(other.PhoneNumbers)
                ) && 
                (
                    EmailAddresses == other.EmailAddresses ||
                    EmailAddresses != null &&
                    other.EmailAddresses != null &&
                    EmailAddresses.SequenceEqual(other.EmailAddresses)
                ) && 
                (
                    PhysicalAddresses == other.PhysicalAddresses ||
                    PhysicalAddresses != null &&
                    other.PhysicalAddresses != null &&
                    PhysicalAddresses.SequenceEqual(other.PhysicalAddresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LastUpdateTime != null)
                    hashCode = hashCode * 59 + LastUpdateTime.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (MiddleNames != null)
                    hashCode = hashCode * 59 + MiddleNames.GetHashCode();
                    if (Prefix != null)
                    hashCode = hashCode * 59 + Prefix.GetHashCode();
                    if (Suffix != null)
                    hashCode = hashCode * 59 + Suffix.GetHashCode();
                    if (OccupationCode != null)
                    hashCode = hashCode * 59 + OccupationCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + OccupationCodeVersion.GetHashCode();
                    if (PhoneNumbers != null)
                    hashCode = hashCode * 59 + PhoneNumbers.GetHashCode();
                    if (EmailAddresses != null)
                    hashCode = hashCode * 59 + EmailAddresses.GetHashCode();
                    if (PhysicalAddresses != null)
                    hashCode = hashCode * 59 + PhysicalAddresses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommonPersonDetailV2 left, CommonPersonDetailV2 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommonPersonDetailV2 left, CommonPersonDetailV2 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
