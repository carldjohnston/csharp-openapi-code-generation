/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Common.Converters;

namespace Agl.Cdr.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CommonPhysicalAddress : IEquatable<CommonPhysicalAddress>
    {

        /// <summary>
        /// The type of address object present
        /// </summary>
        /// <value>The type of address object present</value>
        [TypeConverter(typeof(CustomEnumConverter<AddressUTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AddressUTypeEnum
        {
            
            /// <summary>
            /// Enum PafEnum for paf
            /// </summary>
            [EnumMember(Value = "paf")]
            PafEnum = 1,
            
            /// <summary>
            /// Enum SimpleEnum for simple
            /// </summary>
            [EnumMember(Value = "simple")]
            SimpleEnum = 2
        }

        /// <summary>
        /// The type of address object present
        /// </summary>
        /// <value>The type of address object present</value>
        [Required]
        [DataMember(Name="addressUType", EmitDefaultValue=false)]
        public AddressUTypeEnum AddressUType { get; set; }

        /// <summary>
        /// Gets or Sets Simple
        /// </summary>
        [DataMember(Name="simple", EmitDefaultValue=false)]
        public CommonSimpleAddress Simple { get; set; }

        /// <summary>
        /// Gets or Sets Paf
        /// </summary>
        [DataMember(Name="paf", EmitDefaultValue=false)]
        public CommonPAFAddress Paf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonPhysicalAddress {\n");
            sb.Append("  AddressUType: ").Append(AddressUType).Append("\n");
            sb.Append("  Simple: ").Append(Simple).Append("\n");
            sb.Append("  Paf: ").Append(Paf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommonPhysicalAddress)obj);
        }

        /// <summary>
        /// Returns true if CommonPhysicalAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of CommonPhysicalAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonPhysicalAddress other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddressUType == other.AddressUType ||
                    
                    AddressUType.Equals(other.AddressUType)
                ) && 
                (
                    Simple == other.Simple ||
                    Simple != null &&
                    Simple.Equals(other.Simple)
                ) && 
                (
                    Paf == other.Paf ||
                    Paf != null &&
                    Paf.Equals(other.Paf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AddressUType.GetHashCode();
                    if (Simple != null)
                    hashCode = hashCode * 59 + Simple.GetHashCode();
                    if (Paf != null)
                    hashCode = hashCode * 59 + Paf.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommonPhysicalAddress left, CommonPhysicalAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommonPhysicalAddress left, CommonPhysicalAddress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
