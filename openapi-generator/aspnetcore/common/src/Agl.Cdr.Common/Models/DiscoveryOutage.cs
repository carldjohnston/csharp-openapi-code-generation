/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Common.Converters;

namespace Agl.Cdr.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DiscoveryOutage : IEquatable<DiscoveryOutage>
    {
        /// <summary>
        /// Date and time that the outage is scheduled to begin
        /// </summary>
        /// <value>Date and time that the outage is scheduled to begin</value>
        [Required]
        [DataMember(Name="outageTime", EmitDefaultValue=false)]
        public string OutageTime { get; set; }

        /// <summary>
        /// Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [Required]
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Flag that indicates, if present and set to true, that the outage is only partial meaning that only a subset of normally available end points will be affected by the outage
        /// </summary>
        /// <value>Flag that indicates, if present and set to true, that the outage is only partial meaning that only a subset of normally available end points will be affected by the outage</value>
        [DataMember(Name="isPartial", EmitDefaultValue=false)]
        public bool IsPartial { get; set; }

        /// <summary>
        /// Provides an explanation of the current outage that can be displayed to an end customer
        /// </summary>
        /// <value>Provides an explanation of the current outage that can be displayed to an end customer</value>
        [Required]
        [DataMember(Name="explanation", EmitDefaultValue=false)]
        public string Explanation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveryOutage {\n");
            sb.Append("  OutageTime: ").Append(OutageTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IsPartial: ").Append(IsPartial).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveryOutage)obj);
        }

        /// <summary>
        /// Returns true if DiscoveryOutage instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveryOutage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveryOutage other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OutageTime == other.OutageTime ||
                    OutageTime != null &&
                    OutageTime.Equals(other.OutageTime)
                ) && 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    IsPartial == other.IsPartial ||
                    
                    IsPartial.Equals(other.IsPartial)
                ) && 
                (
                    Explanation == other.Explanation ||
                    Explanation != null &&
                    Explanation.Equals(other.Explanation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OutageTime != null)
                    hashCode = hashCode * 59 + OutageTime.GetHashCode();
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPartial.GetHashCode();
                    if (Explanation != null)
                    hashCode = hashCode * 59 + Explanation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveryOutage left, DiscoveryOutage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveryOutage left, DiscoveryOutage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
