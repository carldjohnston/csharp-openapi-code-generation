/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// Usage data registers available from the meter
    /// </summary>
    [DataContract]
    public partial class EnergyServicePointDetailMetersRegisters : IEquatable<EnergyServicePointDetailMetersRegisters>
    {
        /// <summary>
        /// Unique identifier of the register within this service point.  Is not globally unique
        /// </summary>
        /// <value>Unique identifier of the register within this service point.  Is not globally unique</value>
        [Required]
        [DataMember(Name="registerId", EmitDefaultValue=false)]
        public string RegisterId { get; set; }

        /// <summary>
        /// Register suffix of the meter register where the meter reads are obtained
        /// </summary>
        /// <value>Register suffix of the meter register where the meter reads are obtained</value>
        [Required]
        [DataMember(Name="registerSuffix", EmitDefaultValue=false)]
        public string RegisterSuffix { get; set; }

        /// <summary>
        /// The energy delivered through a connection point or metering point over an extended period normalised to a &#39;per day&#39; basis (kWh). This value is calculated annually.
        /// </summary>
        /// <value>The energy delivered through a connection point or metering point over an extended period normalised to a &#39;per day&#39; basis (kWh). This value is calculated annually.</value>
        [DataMember(Name="averagedDailyLoad", EmitDefaultValue=false)]
        public decimal AveragedDailyLoad { get; set; }


        /// <summary>
        /// Indicates the consumption type of register
        /// </summary>
        /// <value>Indicates the consumption type of register</value>
        [TypeConverter(typeof(CustomEnumConverter<RegisterConsumptionTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RegisterConsumptionTypeEnum
        {
            
            /// <summary>
            /// Enum INTERVALEnum for INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVALEnum = 1,
            
            /// <summary>
            /// Enum BASICEnum for BASIC
            /// </summary>
            [EnumMember(Value = "BASIC")]
            BASICEnum = 2,
            
            /// <summary>
            /// Enum PROFILEDATAEnum for PROFILE_DATA
            /// </summary>
            [EnumMember(Value = "PROFILE_DATA")]
            PROFILEDATAEnum = 3,
            
            /// <summary>
            /// Enum ACTIVEIMPORTEnum for ACTIVE_IMPORT
            /// </summary>
            [EnumMember(Value = "ACTIVE_IMPORT")]
            ACTIVEIMPORTEnum = 4,
            
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 5,
            
            /// <summary>
            /// Enum REACTIVEIMPORTEnum for REACTIVE_IMPORT
            /// </summary>
            [EnumMember(Value = "REACTIVE_IMPORT")]
            REACTIVEIMPORTEnum = 6,
            
            /// <summary>
            /// Enum REACTIVEEnum for REACTIVE
            /// </summary>
            [EnumMember(Value = "REACTIVE")]
            REACTIVEEnum = 7
        }

        /// <summary>
        /// Indicates the consumption type of register
        /// </summary>
        /// <value>Indicates the consumption type of register</value>
        [Required]
        [DataMember(Name="registerConsumptionType", EmitDefaultValue=false)]
        public RegisterConsumptionTypeEnum RegisterConsumptionType { get; set; }

        /// <summary>
        /// The Network Tariff Code is a free text field containing a code supplied and published by the local network service provider
        /// </summary>
        /// <value>The Network Tariff Code is a free text field containing a code supplied and published by the local network service provider</value>
        [DataMember(Name="networkTariffCode", EmitDefaultValue=false)]
        public string NetworkTariffCode { get; set; }

        /// <summary>
        /// The unit of measure for data held in this register
        /// </summary>
        /// <value>The unit of measure for data held in this register</value>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }


        /// <summary>
        /// Code to identify the time validity of register contents
        /// </summary>
        /// <value>Code to identify the time validity of register contents</value>
        [TypeConverter(typeof(CustomEnumConverter<TimeOfDayEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TimeOfDayEnum
        {
            
            /// <summary>
            /// Enum ALLDAYEnum for ALLDAY
            /// </summary>
            [EnumMember(Value = "ALLDAY")]
            ALLDAYEnum = 1,
            
            /// <summary>
            /// Enum INTERVALEnum for INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVALEnum = 2,
            
            /// <summary>
            /// Enum PEAKEnum for PEAK
            /// </summary>
            [EnumMember(Value = "PEAK")]
            PEAKEnum = 3,
            
            /// <summary>
            /// Enum BUSINESSEnum for BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESSEnum = 4,
            
            /// <summary>
            /// Enum SHOULDEREnum for SHOULDER
            /// </summary>
            [EnumMember(Value = "SHOULDER")]
            SHOULDEREnum = 5,
            
            /// <summary>
            /// Enum EVENINGEnum for EVENING
            /// </summary>
            [EnumMember(Value = "EVENING")]
            EVENINGEnum = 6,
            
            /// <summary>
            /// Enum OFFPEAKEnum for OFFPEAK
            /// </summary>
            [EnumMember(Value = "OFFPEAK")]
            OFFPEAKEnum = 7,
            
            /// <summary>
            /// Enum CONTROLLEDEnum for CONTROLLED
            /// </summary>
            [EnumMember(Value = "CONTROLLED")]
            CONTROLLEDEnum = 8,
            
            /// <summary>
            /// Enum DEMANDEnum for DEMAND
            /// </summary>
            [EnumMember(Value = "DEMAND")]
            DEMANDEnum = 9
        }

        /// <summary>
        /// Code to identify the time validity of register contents
        /// </summary>
        /// <value>Code to identify the time validity of register contents</value>
        [DataMember(Name="timeOfDay", EmitDefaultValue=false)]
        public TimeOfDayEnum TimeOfDay { get; set; }

        /// <summary>
        /// Multiplier required to take a register value and turn it into a value representing billable energy
        /// </summary>
        /// <value>Multiplier required to take a register value and turn it into a value representing billable energy</value>
        [DataMember(Name="multiplier", EmitDefaultValue=false)]
        public decimal Multiplier { get; set; }

        /// <summary>
        /// Indicates whether the energy recorded by this register is created under a Controlled Load regime. ControlledLoad field will have &#39;No&#39; if register does not relate to a Controlled Load.  If the register relates to a Controlled Load, it should contain a description of the Controlled Load regime. ControlledLoad field will have &#39;No&#39; if register does not relate to a Controlled Load, “Yes” if register relates to a Controlled Load If absent the status is unknown. 
        /// </summary>
        /// <value>Indicates whether the energy recorded by this register is created under a Controlled Load regime. ControlledLoad field will have &#39;No&#39; if register does not relate to a Controlled Load.  If the register relates to a Controlled Load, it should contain a description of the Controlled Load regime. ControlledLoad field will have &#39;No&#39; if register does not relate to a Controlled Load, “Yes” if register relates to a Controlled Load If absent the status is unknown. </value>
        [DataMember(Name="controlledLoad", EmitDefaultValue=false)]
        public bool ControlledLoad { get; set; }


        /// <summary>
        /// Actual/Subtractive Indicator. Note the details of enumeration values below: <ul><li>**ACTUAL** implies volume of energy actually metered between two dates</li><li>**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates</li></ul>
        /// </summary>
        /// <value>Actual/Subtractive Indicator. Note the details of enumeration values below: <ul><li>**ACTUAL** implies volume of energy actually metered between two dates</li><li>**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates</li></ul></value>
        [TypeConverter(typeof(CustomEnumConverter<ConsumptionTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ConsumptionTypeEnum
        {
            
            /// <summary>
            /// Enum ACTUALEnum for ACTUAL
            /// </summary>
            [EnumMember(Value = "ACTUAL")]
            ACTUALEnum = 1,
            
            /// <summary>
            /// Enum CUMULATIVEEnum for CUMULATIVE
            /// </summary>
            [EnumMember(Value = "CUMULATIVE")]
            CUMULATIVEEnum = 2
        }

        /// <summary>
        /// Actual/Subtractive Indicator. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**ACTUAL** implies volume of energy actually metered between two dates&lt;/li&gt;&lt;li&gt;**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Actual/Subtractive Indicator. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**ACTUAL** implies volume of energy actually metered between two dates&lt;/li&gt;&lt;li&gt;**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="consumptionType", EmitDefaultValue=false)]
        public ConsumptionTypeEnum ConsumptionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetailMetersRegisters {\n");
            sb.Append("  RegisterId: ").Append(RegisterId).Append("\n");
            sb.Append("  RegisterSuffix: ").Append(RegisterSuffix).Append("\n");
            sb.Append("  AveragedDailyLoad: ").Append(AveragedDailyLoad).Append("\n");
            sb.Append("  RegisterConsumptionType: ").Append(RegisterConsumptionType).Append("\n");
            sb.Append("  NetworkTariffCode: ").Append(NetworkTariffCode).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  TimeOfDay: ").Append(TimeOfDay).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  ControlledLoad: ").Append(ControlledLoad).Append("\n");
            sb.Append("  ConsumptionType: ").Append(ConsumptionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyServicePointDetailMetersRegisters)obj);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetailMetersRegisters instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyServicePointDetailMetersRegisters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetailMetersRegisters other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegisterId == other.RegisterId ||
                    RegisterId != null &&
                    RegisterId.Equals(other.RegisterId)
                ) && 
                (
                    RegisterSuffix == other.RegisterSuffix ||
                    RegisterSuffix != null &&
                    RegisterSuffix.Equals(other.RegisterSuffix)
                ) && 
                (
                    AveragedDailyLoad == other.AveragedDailyLoad ||
                    
                    AveragedDailyLoad.Equals(other.AveragedDailyLoad)
                ) && 
                (
                    RegisterConsumptionType == other.RegisterConsumptionType ||
                    
                    RegisterConsumptionType.Equals(other.RegisterConsumptionType)
                ) && 
                (
                    NetworkTariffCode == other.NetworkTariffCode ||
                    NetworkTariffCode != null &&
                    NetworkTariffCode.Equals(other.NetworkTariffCode)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    TimeOfDay == other.TimeOfDay ||
                    
                    TimeOfDay.Equals(other.TimeOfDay)
                ) && 
                (
                    Multiplier == other.Multiplier ||
                    
                    Multiplier.Equals(other.Multiplier)
                ) && 
                (
                    ControlledLoad == other.ControlledLoad ||
                    
                    ControlledLoad.Equals(other.ControlledLoad)
                ) && 
                (
                    ConsumptionType == other.ConsumptionType ||
                    
                    ConsumptionType.Equals(other.ConsumptionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegisterId != null)
                    hashCode = hashCode * 59 + RegisterId.GetHashCode();
                    if (RegisterSuffix != null)
                    hashCode = hashCode * 59 + RegisterSuffix.GetHashCode();
                    
                    hashCode = hashCode * 59 + AveragedDailyLoad.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegisterConsumptionType.GetHashCode();
                    if (NetworkTariffCode != null)
                    hashCode = hashCode * 59 + NetworkTariffCode.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeOfDay.GetHashCode();
                    
                    hashCode = hashCode * 59 + Multiplier.GetHashCode();
                    
                    hashCode = hashCode * 59 + ControlledLoad.GetHashCode();
                    
                    hashCode = hashCode * 59 + ConsumptionType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyServicePointDetailMetersRegisters left, EnergyServicePointDetailMetersRegisters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyServicePointDetailMetersRegisters left, EnergyServicePointDetailMetersRegisters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
