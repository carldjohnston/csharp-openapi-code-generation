/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyInvoiceGasUsageChargesOtherCharges : IEquatable<EnergyInvoiceGasUsageChargesOtherCharges>
    {

        /// <summary>
        /// Type of charge. Assumed to be other if absent
        /// </summary>
        /// <value>Type of charge. Assumed to be other if absent</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ENVIRONMENTALEnum for ENVIRONMENTAL
            /// </summary>
            [EnumMember(Value = "ENVIRONMENTAL")]
            ENVIRONMENTALEnum = 1,
            
            /// <summary>
            /// Enum REGULATEDEnum for REGULATED
            /// </summary>
            [EnumMember(Value = "REGULATED")]
            REGULATEDEnum = 2,
            
            /// <summary>
            /// Enum NETWORKEnum for NETWORK
            /// </summary>
            [EnumMember(Value = "NETWORK")]
            NETWORKEnum = 3,
            
            /// <summary>
            /// Enum METERINGEnum for METERING
            /// </summary>
            [EnumMember(Value = "METERING")]
            METERINGEnum = 4,
            
            /// <summary>
            /// Enum RETAILSERVICEEnum for RETAIL_SERVICE
            /// </summary>
            [EnumMember(Value = "RETAIL_SERVICE")]
            RETAILSERVICEEnum = 5,
            
            /// <summary>
            /// Enum RCTIEnum for RCTI
            /// </summary>
            [EnumMember(Value = "RCTI")]
            RCTIEnum = 6,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 7
        }

        /// <summary>
        /// Type of charge. Assumed to be other if absent
        /// </summary>
        /// <value>Type of charge. Assumed to be other if absent</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The aggregate total of charges for this item (exclusive of GST)
        /// </summary>
        /// <value>The aggregate total of charges for this item (exclusive of GST)</value>
        [Required]
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// A free text description of the type of charge
        /// </summary>
        /// <value>A free text description of the type of charge</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyInvoiceGasUsageChargesOtherCharges {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyInvoiceGasUsageChargesOtherCharges)obj);
        }

        /// <summary>
        /// Returns true if EnergyInvoiceGasUsageChargesOtherCharges instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyInvoiceGasUsageChargesOtherCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyInvoiceGasUsageChargesOtherCharges other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyInvoiceGasUsageChargesOtherCharges left, EnergyInvoiceGasUsageChargesOtherCharges right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyInvoiceGasUsageChargesOtherCharges left, EnergyInvoiceGasUsageChargesOtherCharges right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
