/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyDerRecord : IEquatable<EnergyDerRecord>
    {
        /// <summary>
        /// Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements
        /// </summary>
        /// <value>Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements</value>
        [Required]
        [DataMember(Name="servicePointId", EmitDefaultValue=false)]
        public string ServicePointId { get; set; }

        /// <summary>
        /// Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA
        /// </summary>
        /// <value>Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA</value>
        [Required]
        [DataMember(Name="approvedCapacity", EmitDefaultValue=false)]
        public decimal ApprovedCapacity { get; set; }

        /// <summary>
        /// The number of phases available for the installation of DER
        /// </summary>
        /// <value>The number of phases available for the installation of DER</value>
        [Required]
        [DataMember(Name="availablePhasesCount", EmitDefaultValue=false)]
        public decimal AvailablePhasesCount { get; set; }

        /// <summary>
        /// The number of phases that DER is connected to
        /// </summary>
        /// <value>The number of phases that DER is connected to</value>
        [Required]
        [DataMember(Name="installedPhasesCount", EmitDefaultValue=false)]
        public decimal InstalledPhasesCount { get; set; }

        /// <summary>
        /// For identification of small generating units designed with the ability to operate in an islanded mode
        /// </summary>
        /// <value>For identification of small generating units designed with the ability to operate in an islanded mode</value>
        [Required]
        [DataMember(Name="islandableInstallation", EmitDefaultValue=false)]
        public string IslandableInstallation { get; set; }

        /// <summary>
        /// For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false
        /// </summary>
        /// <value>For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false</value>
        [DataMember(Name="hasCentralProtectionControl", EmitDefaultValue=false)]
        public bool HasCentralProtectionControl { get; set; } = false;

        /// <summary>
        /// Gets or Sets ProtectionMode
        /// </summary>
        [DataMember(Name="protectionMode", EmitDefaultValue=false)]
        public EnergyDerRecordProtectionMode ProtectionMode { get; set; }

        /// <summary>
        /// Gets or Sets AcConnections
        /// </summary>
        [Required]
        [DataMember(Name="acConnections", EmitDefaultValue=false)]
        public List<EnergyDerRecordAcConnections> AcConnections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecord {\n");
            sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
            sb.Append("  ApprovedCapacity: ").Append(ApprovedCapacity).Append("\n");
            sb.Append("  AvailablePhasesCount: ").Append(AvailablePhasesCount).Append("\n");
            sb.Append("  InstalledPhasesCount: ").Append(InstalledPhasesCount).Append("\n");
            sb.Append("  IslandableInstallation: ").Append(IslandableInstallation).Append("\n");
            sb.Append("  HasCentralProtectionControl: ").Append(HasCentralProtectionControl).Append("\n");
            sb.Append("  ProtectionMode: ").Append(ProtectionMode).Append("\n");
            sb.Append("  AcConnections: ").Append(AcConnections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyDerRecord)obj);
        }

        /// <summary>
        /// Returns true if EnergyDerRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyDerRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecord other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServicePointId == other.ServicePointId ||
                    ServicePointId != null &&
                    ServicePointId.Equals(other.ServicePointId)
                ) && 
                (
                    ApprovedCapacity == other.ApprovedCapacity ||
                    
                    ApprovedCapacity.Equals(other.ApprovedCapacity)
                ) && 
                (
                    AvailablePhasesCount == other.AvailablePhasesCount ||
                    
                    AvailablePhasesCount.Equals(other.AvailablePhasesCount)
                ) && 
                (
                    InstalledPhasesCount == other.InstalledPhasesCount ||
                    
                    InstalledPhasesCount.Equals(other.InstalledPhasesCount)
                ) && 
                (
                    IslandableInstallation == other.IslandableInstallation ||
                    IslandableInstallation != null &&
                    IslandableInstallation.Equals(other.IslandableInstallation)
                ) && 
                (
                    HasCentralProtectionControl == other.HasCentralProtectionControl ||
                    
                    HasCentralProtectionControl.Equals(other.HasCentralProtectionControl)
                ) && 
                (
                    ProtectionMode == other.ProtectionMode ||
                    ProtectionMode != null &&
                    ProtectionMode.Equals(other.ProtectionMode)
                ) && 
                (
                    AcConnections == other.AcConnections ||
                    AcConnections != null &&
                    other.AcConnections != null &&
                    AcConnections.SequenceEqual(other.AcConnections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServicePointId != null)
                    hashCode = hashCode * 59 + ServicePointId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovedCapacity.GetHashCode();
                    
                    hashCode = hashCode * 59 + AvailablePhasesCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + InstalledPhasesCount.GetHashCode();
                    if (IslandableInstallation != null)
                    hashCode = hashCode * 59 + IslandableInstallation.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCentralProtectionControl.GetHashCode();
                    if (ProtectionMode != null)
                    hashCode = hashCode * 59 + ProtectionMode.GetHashCode();
                    if (AcConnections != null)
                    hashCode = hashCode * 59 + AcConnections.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyDerRecord left, EnergyDerRecord right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyDerRecord left, EnergyDerRecord right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
