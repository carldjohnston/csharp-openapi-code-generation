/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// Mandatory if readUType is set to intervalRead
    /// </summary>
    [DataContract]
    public partial class EnergyUsageReadIntervalRead : IEquatable<EnergyUsageReadIntervalRead>
    {
        /// <summary>
        /// Read interval length in minutes
        /// </summary>
        /// <value>Read interval length in minutes</value>
        [Required]
        [DataMember(Name="readIntervalLength", EmitDefaultValue=false)]
        public string ReadIntervalLength { get; set; }

        /// <summary>
        /// The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export
        /// </summary>
        /// <value>The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export</value>
        [Required]
        [DataMember(Name="aggregateValue", EmitDefaultValue=false)]
        public decimal AggregateValue { get; set; }

        /// <summary>
        /// Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)
        /// </summary>
        /// <value>Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)</value>
        [Required]
        [DataMember(Name="intervalReads", EmitDefaultValue=false)]
        public List<EnergyUsageReadIntervalReadIntervalReads> IntervalReads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyUsageReadIntervalRead {\n");
            sb.Append("  ReadIntervalLength: ").Append(ReadIntervalLength).Append("\n");
            sb.Append("  AggregateValue: ").Append(AggregateValue).Append("\n");
            sb.Append("  IntervalReads: ").Append(IntervalReads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyUsageReadIntervalRead)obj);
        }

        /// <summary>
        /// Returns true if EnergyUsageReadIntervalRead instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyUsageReadIntervalRead to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyUsageReadIntervalRead other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReadIntervalLength == other.ReadIntervalLength ||
                    ReadIntervalLength != null &&
                    ReadIntervalLength.Equals(other.ReadIntervalLength)
                ) && 
                (
                    AggregateValue == other.AggregateValue ||
                    
                    AggregateValue.Equals(other.AggregateValue)
                ) && 
                (
                    IntervalReads == other.IntervalReads ||
                    IntervalReads != null &&
                    other.IntervalReads != null &&
                    IntervalReads.SequenceEqual(other.IntervalReads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReadIntervalLength != null)
                    hashCode = hashCode * 59 + ReadIntervalLength.GetHashCode();
                    
                    hashCode = hashCode * 59 + AggregateValue.GetHashCode();
                    if (IntervalReads != null)
                    hashCode = hashCode * 59 + IntervalReads.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyUsageReadIntervalRead left, EnergyUsageReadIntervalRead right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyUsageReadIntervalRead left, EnergyUsageReadIntervalRead right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
