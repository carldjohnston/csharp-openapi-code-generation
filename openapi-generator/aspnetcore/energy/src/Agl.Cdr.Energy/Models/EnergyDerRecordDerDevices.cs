/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyDerRecordDerDevices : IEquatable<EnergyDerRecordDerDevices>
    {
        /// <summary>
        /// Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards
        /// </summary>
        /// <value>Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards</value>
        [Required]
        [DataMember(Name="deviceIdentifier", EmitDefaultValue=false)]
        public decimal DeviceIdentifier { get; set; }

        /// <summary>
        /// Number of devices in the group of DER devices
        /// </summary>
        /// <value>Number of devices in the group of DER devices</value>
        [Required]
        [DataMember(Name="count", EmitDefaultValue=false)]
        public decimal Count { get; set; }

        /// <summary>
        /// The name of the device manufacturer. If absent then assumed to be “unknown”
        /// </summary>
        /// <value>The name of the device manufacturer. If absent then assumed to be “unknown”</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// The model number of the device. If absent then assumed to be “unknown”
        /// </summary>
        /// <value>The model number of the device. If absent then assumed to be “unknown”</value>
        [DataMember(Name="modelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }


        /// <summary>
        /// Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 1,
            
            /// <summary>
            /// Enum INACTIVEEnum for INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVEEnum = 2,
            
            /// <summary>
            /// Enum DECOMMISSIONEDEnum for DECOMMISSIONED
            /// </summary>
            [EnumMember(Value = "DECOMMISSIONED")]
            DECOMMISSIONEDEnum = 3
        }

        /// <summary>
        /// Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }


        /// <summary>
        /// Used to indicate the primary technology used in the DER device
        /// </summary>
        /// <value>Used to indicate the primary technology used in the DER device</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum FOSSILEnum for FOSSIL
            /// </summary>
            [EnumMember(Value = "FOSSIL")]
            FOSSILEnum = 1,
            
            /// <summary>
            /// Enum HYDROEnum for HYDRO
            /// </summary>
            [EnumMember(Value = "HYDRO")]
            HYDROEnum = 2,
            
            /// <summary>
            /// Enum WINDEnum for WIND
            /// </summary>
            [EnumMember(Value = "WIND")]
            WINDEnum = 3,
            
            /// <summary>
            /// Enum SOLARPVEnum for SOLAR_PV
            /// </summary>
            [EnumMember(Value = "SOLAR_PV")]
            SOLARPVEnum = 4,
            
            /// <summary>
            /// Enum RENEWABLEEnum for RENEWABLE
            /// </summary>
            [EnumMember(Value = "RENEWABLE")]
            RENEWABLEEnum = 5,
            
            /// <summary>
            /// Enum GEOTHERMALEnum for GEOTHERMAL
            /// </summary>
            [EnumMember(Value = "GEOTHERMAL")]
            GEOTHERMALEnum = 6,
            
            /// <summary>
            /// Enum STORAGEEnum for STORAGE
            /// </summary>
            [EnumMember(Value = "STORAGE")]
            STORAGEEnum = 7,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 8
        }

        /// <summary>
        /// Used to indicate the primary technology used in the DER device
        /// </summary>
        /// <value>Used to indicate the primary technology used in the DER device</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”
        /// </summary>
        /// <value>Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group
        /// </summary>
        /// <value>Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group</value>
        [Required]
        [DataMember(Name="nominalRatedCapacity", EmitDefaultValue=false)]
        public decimal NominalRatedCapacity { get; set; }

        /// <summary>
        /// Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”
        /// </summary>
        /// <value>Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”</value>
        [DataMember(Name="nominalStorageCapacity", EmitDefaultValue=false)]
        public decimal NominalStorageCapacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecordDerDevices {\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  NominalRatedCapacity: ").Append(NominalRatedCapacity).Append("\n");
            sb.Append("  NominalStorageCapacity: ").Append(NominalStorageCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyDerRecordDerDevices)obj);
        }

        /// <summary>
        /// Returns true if EnergyDerRecordDerDevices instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyDerRecordDerDevices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecordDerDevices other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeviceIdentifier == other.DeviceIdentifier ||
                    
                    DeviceIdentifier.Equals(other.DeviceIdentifier)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    ModelNumber == other.ModelNumber ||
                    ModelNumber != null &&
                    ModelNumber.Equals(other.ModelNumber)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Subtype == other.Subtype ||
                    Subtype != null &&
                    Subtype.Equals(other.Subtype)
                ) && 
                (
                    NominalRatedCapacity == other.NominalRatedCapacity ||
                    
                    NominalRatedCapacity.Equals(other.NominalRatedCapacity)
                ) && 
                (
                    NominalStorageCapacity == other.NominalStorageCapacity ||
                    
                    NominalStorageCapacity.Equals(other.NominalStorageCapacity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DeviceIdentifier.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (ModelNumber != null)
                    hashCode = hashCode * 59 + ModelNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Subtype != null)
                    hashCode = hashCode * 59 + Subtype.GetHashCode();
                    
                    hashCode = hashCode * 59 + NominalRatedCapacity.GetHashCode();
                    
                    hashCode = hashCode * 59 + NominalStorageCapacity.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyDerRecordDerDevices left, EnergyDerRecordDerDevices right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyDerRecordDerDevices left, EnergyDerRecordDerDevices right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
