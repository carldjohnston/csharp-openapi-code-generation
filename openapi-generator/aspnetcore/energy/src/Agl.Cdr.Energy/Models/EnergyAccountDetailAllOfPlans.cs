/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyAccountDetailAllOfPlans : IEquatable<EnergyAccountDetailAllOfPlans>
    {
        /// <summary>
        /// Optional display name for the plan provided by the customer to help differentiate multiple plans
        /// </summary>
        /// <value>Optional display name for the plan provided by the customer to help differentiate multiple plans</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// An array of servicePointIds, representing NMIs, that this account is linked to
        /// </summary>
        /// <value>An array of servicePointIds, representing NMIs, that this account is linked to</value>
        [Required]
        [DataMember(Name="servicePointIds", EmitDefaultValue=false)]
        public List<string> ServicePointIds { get; set; }

        /// <summary>
        /// Gets or Sets PlanOverview
        /// </summary>
        [Required]
        [DataMember(Name="planOverview", EmitDefaultValue=false)]
        public EnergyAccountAllOfPlanOverview PlanOverview { get; set; }

        /// <summary>
        /// Gets or Sets PlanDetail
        /// </summary>
        [Required]
        [DataMember(Name="planDetail", EmitDefaultValue=false)]
        public EnergyAccountDetailAllOfPlanDetail PlanDetail { get; set; }

        /// <summary>
        /// An array of additional contacts that are authorised to act on this account
        /// </summary>
        /// <value>An array of additional contacts that are authorised to act on this account</value>
        [DataMember(Name="authorisedContacts", EmitDefaultValue=false)]
        public List<EnergyAccountDetailAllOfAuthorisedContacts> AuthorisedContacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyAccountDetailAllOfPlans {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  ServicePointIds: ").Append(ServicePointIds).Append("\n");
            sb.Append("  PlanOverview: ").Append(PlanOverview).Append("\n");
            sb.Append("  PlanDetail: ").Append(PlanDetail).Append("\n");
            sb.Append("  AuthorisedContacts: ").Append(AuthorisedContacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyAccountDetailAllOfPlans)obj);
        }

        /// <summary>
        /// Returns true if EnergyAccountDetailAllOfPlans instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyAccountDetailAllOfPlans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyAccountDetailAllOfPlans other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    ServicePointIds == other.ServicePointIds ||
                    ServicePointIds != null &&
                    other.ServicePointIds != null &&
                    ServicePointIds.SequenceEqual(other.ServicePointIds)
                ) && 
                (
                    PlanOverview == other.PlanOverview ||
                    PlanOverview != null &&
                    PlanOverview.Equals(other.PlanOverview)
                ) && 
                (
                    PlanDetail == other.PlanDetail ||
                    PlanDetail != null &&
                    PlanDetail.Equals(other.PlanDetail)
                ) && 
                (
                    AuthorisedContacts == other.AuthorisedContacts ||
                    AuthorisedContacts != null &&
                    other.AuthorisedContacts != null &&
                    AuthorisedContacts.SequenceEqual(other.AuthorisedContacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    if (ServicePointIds != null)
                    hashCode = hashCode * 59 + ServicePointIds.GetHashCode();
                    if (PlanOverview != null)
                    hashCode = hashCode * 59 + PlanOverview.GetHashCode();
                    if (PlanDetail != null)
                    hashCode = hashCode * 59 + PlanDetail.GetHashCode();
                    if (AuthorisedContacts != null)
                    hashCode = hashCode * 59 + AuthorisedContacts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyAccountDetailAllOfPlans left, EnergyAccountDetailAllOfPlans right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyAccountDetailAllOfPlans left, EnergyAccountDetailAllOfPlans right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
