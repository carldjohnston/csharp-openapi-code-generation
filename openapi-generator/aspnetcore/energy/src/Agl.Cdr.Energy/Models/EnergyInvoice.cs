/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyInvoice : IEquatable<EnergyInvoice>
    {
        /// <summary>
        /// The ID of the account for which the invoice was issued
        /// </summary>
        /// <value>The ID of the account for which the invoice was issued</value>
        [Required]
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The number assigned to this invoice by the energy Retailer
        /// </summary>
        /// <value>The number assigned to this invoice by the energy Retailer</value>
        [Required]
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The date that the invoice was actually issued (as opposed to generated or calculated)
        /// </summary>
        /// <value>The date that the invoice was actually issued (as opposed to generated or calculated)</value>
        [Required]
        [DataMember(Name="issueDate", EmitDefaultValue=false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// The date that the invoice is due to be paid
        /// </summary>
        /// <value>The date that the invoice is due to be paid</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public string DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public EnergyInvoicePeriod Period { get; set; }

        /// <summary>
        /// The net amount due for this invoice regardless of previous balance
        /// </summary>
        /// <value>The net amount due for this invoice regardless of previous balance</value>
        [DataMember(Name="invoiceAmount", EmitDefaultValue=false)]
        public string InvoiceAmount { get; set; }

        /// <summary>
        /// The total GST amount for this invoice.  If absent then zero is assumed
        /// </summary>
        /// <value>The total GST amount for this invoice.  If absent then zero is assumed</value>
        [DataMember(Name="gstAmount", EmitDefaultValue=false)]
        public string GstAmount { get; set; }

        /// <summary>
        /// Gets or Sets PayOnTimeDiscount
        /// </summary>
        [DataMember(Name="payOnTimeDiscount", EmitDefaultValue=false)]
        public EnergyInvoicePayOnTimeDiscount PayOnTimeDiscount { get; set; }

        /// <summary>
        /// The account balance at the time the invoice was issued
        /// </summary>
        /// <value>The account balance at the time the invoice was issued</value>
        [Required]
        [DataMember(Name="balanceAtIssue", EmitDefaultValue=false)]
        public string BalanceAtIssue { get; set; }

        /// <summary>
        /// Array of service point IDs to which this invoice applies. May be empty if the invoice contains no electricity usage related charges
        /// </summary>
        /// <value>Array of service point IDs to which this invoice applies. May be empty if the invoice contains no electricity usage related charges</value>
        [Required]
        [DataMember(Name="servicePoints", EmitDefaultValue=false)]
        public List<string> ServicePoints { get; set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [DataMember(Name="gas", EmitDefaultValue=false)]
        public EnergyInvoiceGasUsageCharges Gas { get; set; }

        /// <summary>
        /// Gets or Sets Electricity
        /// </summary>
        [DataMember(Name="electricity", EmitDefaultValue=false)]
        public EnergyInvoiceElectricityUsageCharges Electricity { get; set; }

        /// <summary>
        /// Gets or Sets AccountCharges
        /// </summary>
        [DataMember(Name="accountCharges", EmitDefaultValue=false)]
        public EnergyInvoiceAccountCharges AccountCharges { get; set; }


        /// <summary>
        /// Indicator of the payment status for the invoice
        /// </summary>
        /// <value>Indicator of the payment status for the invoice</value>
        [TypeConverter(typeof(CustomEnumConverter<PaymentStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            
            /// <summary>
            /// Enum PAIDEnum for PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAIDEnum = 1,
            
            /// <summary>
            /// Enum PARTIALLYPAIDEnum for PARTIALLY_PAID
            /// </summary>
            [EnumMember(Value = "PARTIALLY_PAID")]
            PARTIALLYPAIDEnum = 2,
            
            /// <summary>
            /// Enum NOTPAIDEnum for NOT_PAID
            /// </summary>
            [EnumMember(Value = "NOT_PAID")]
            NOTPAIDEnum = 3
        }

        /// <summary>
        /// Indicator of the payment status for the invoice
        /// </summary>
        /// <value>Indicator of the payment status for the invoice</value>
        [Required]
        [DataMember(Name="paymentStatus", EmitDefaultValue=false)]
        public PaymentStatusEnum PaymentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyInvoice {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  GstAmount: ").Append(GstAmount).Append("\n");
            sb.Append("  PayOnTimeDiscount: ").Append(PayOnTimeDiscount).Append("\n");
            sb.Append("  BalanceAtIssue: ").Append(BalanceAtIssue).Append("\n");
            sb.Append("  ServicePoints: ").Append(ServicePoints).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  Electricity: ").Append(Electricity).Append("\n");
            sb.Append("  AccountCharges: ").Append(AccountCharges).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyInvoice)obj);
        }

        /// <summary>
        /// Returns true if EnergyInvoice instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyInvoice other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    IssueDate == other.IssueDate ||
                    IssueDate != null &&
                    IssueDate.Equals(other.IssueDate)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    InvoiceAmount == other.InvoiceAmount ||
                    InvoiceAmount != null &&
                    InvoiceAmount.Equals(other.InvoiceAmount)
                ) && 
                (
                    GstAmount == other.GstAmount ||
                    GstAmount != null &&
                    GstAmount.Equals(other.GstAmount)
                ) && 
                (
                    PayOnTimeDiscount == other.PayOnTimeDiscount ||
                    PayOnTimeDiscount != null &&
                    PayOnTimeDiscount.Equals(other.PayOnTimeDiscount)
                ) && 
                (
                    BalanceAtIssue == other.BalanceAtIssue ||
                    BalanceAtIssue != null &&
                    BalanceAtIssue.Equals(other.BalanceAtIssue)
                ) && 
                (
                    ServicePoints == other.ServicePoints ||
                    ServicePoints != null &&
                    other.ServicePoints != null &&
                    ServicePoints.SequenceEqual(other.ServicePoints)
                ) && 
                (
                    Gas == other.Gas ||
                    Gas != null &&
                    Gas.Equals(other.Gas)
                ) && 
                (
                    Electricity == other.Electricity ||
                    Electricity != null &&
                    Electricity.Equals(other.Electricity)
                ) && 
                (
                    AccountCharges == other.AccountCharges ||
                    AccountCharges != null &&
                    AccountCharges.Equals(other.AccountCharges)
                ) && 
                (
                    PaymentStatus == other.PaymentStatus ||
                    
                    PaymentStatus.Equals(other.PaymentStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (IssueDate != null)
                    hashCode = hashCode * 59 + IssueDate.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (InvoiceAmount != null)
                    hashCode = hashCode * 59 + InvoiceAmount.GetHashCode();
                    if (GstAmount != null)
                    hashCode = hashCode * 59 + GstAmount.GetHashCode();
                    if (PayOnTimeDiscount != null)
                    hashCode = hashCode * 59 + PayOnTimeDiscount.GetHashCode();
                    if (BalanceAtIssue != null)
                    hashCode = hashCode * 59 + BalanceAtIssue.GetHashCode();
                    if (ServicePoints != null)
                    hashCode = hashCode * 59 + ServicePoints.GetHashCode();
                    if (Gas != null)
                    hashCode = hashCode * 59 + Gas.GetHashCode();
                    if (Electricity != null)
                    hashCode = hashCode * 59 + Electricity.GetHashCode();
                    if (AccountCharges != null)
                    hashCode = hashCode * 59 + AccountCharges.GetHashCode();
                    
                    hashCode = hashCode * 59 + PaymentStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyInvoice left, EnergyInvoice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyInvoice left, EnergyInvoice right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
