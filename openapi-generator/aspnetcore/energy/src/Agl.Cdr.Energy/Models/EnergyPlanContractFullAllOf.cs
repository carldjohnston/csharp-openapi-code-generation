/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyPlanContractFullAllOf : IEquatable<EnergyPlanContractFullAllOf>
    {

        /// <summary>
        /// The term for the contract.  If absent assumes no specified term
        /// </summary>
        /// <value>The term for the contract.  If absent assumes no specified term</value>
        [TypeConverter(typeof(CustomEnumConverter<TermTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TermTypeEnum
        {
            
            /// <summary>
            /// Enum _1YEAREnum for 1_YEAR
            /// </summary>
            [EnumMember(Value = "1_YEAR")]
            _1YEAREnum = 1,
            
            /// <summary>
            /// Enum _2YEAREnum for 2_YEAR
            /// </summary>
            [EnumMember(Value = "2_YEAR")]
            _2YEAREnum = 2,
            
            /// <summary>
            /// Enum _3YEAREnum for 3_YEAR
            /// </summary>
            [EnumMember(Value = "3_YEAR")]
            _3YEAREnum = 3,
            
            /// <summary>
            /// Enum _4YEAREnum for 4_YEAR
            /// </summary>
            [EnumMember(Value = "4_YEAR")]
            _4YEAREnum = 4,
            
            /// <summary>
            /// Enum _5YEAREnum for 5_YEAR
            /// </summary>
            [EnumMember(Value = "5_YEAR")]
            _5YEAREnum = 5,
            
            /// <summary>
            /// Enum ONGOINGEnum for ONGOING
            /// </summary>
            [EnumMember(Value = "ONGOING")]
            ONGOINGEnum = 6,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 7
        }

        /// <summary>
        /// The term for the contract.  If absent assumes no specified term
        /// </summary>
        /// <value>The term for the contract.  If absent assumes no specified term</value>
        [DataMember(Name="termType", EmitDefaultValue=false)]
        public TermTypeEnum TermType { get; set; }

        /// <summary>
        /// Description of the benefit period.  Should only be present if termType has the value ONGOING
        /// </summary>
        /// <value>Description of the benefit period.  Should only be present if termType has the value ONGOING</value>
        [DataMember(Name="benefitPeriod", EmitDefaultValue=false)]
        public string BenefitPeriod { get; set; }

        /// <summary>
        /// Free text description of the terms for the contract
        /// </summary>
        /// <value>Free text description of the terms for the contract</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// An array of the meter types that this contract is available for
        /// </summary>
        /// <value>An array of the meter types that this contract is available for</value>
        [DataMember(Name="meterTypes", EmitDefaultValue=false)]
        public List<string> MeterTypes { get; set; }

        /// <summary>
        /// Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET 
        /// </summary>
        /// <value>Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET </value>
        [DataMember(Name="coolingOffDays", EmitDefaultValue=false)]
        public string CoolingOffDays { get; set; }

        /// <summary>
        /// An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [Required]
        [DataMember(Name="billFrequency", EmitDefaultValue=false)]
        public List<string> BillFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanContractFullAllOf {\n");
            sb.Append("  TermType: ").Append(TermType).Append("\n");
            sb.Append("  BenefitPeriod: ").Append(BenefitPeriod).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  MeterTypes: ").Append(MeterTypes).Append("\n");
            sb.Append("  CoolingOffDays: ").Append(CoolingOffDays).Append("\n");
            sb.Append("  BillFrequency: ").Append(BillFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyPlanContractFullAllOf)obj);
        }

        /// <summary>
        /// Returns true if EnergyPlanContractFullAllOf instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyPlanContractFullAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanContractFullAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TermType == other.TermType ||
                    
                    TermType.Equals(other.TermType)
                ) && 
                (
                    BenefitPeriod == other.BenefitPeriod ||
                    BenefitPeriod != null &&
                    BenefitPeriod.Equals(other.BenefitPeriod)
                ) && 
                (
                    Terms == other.Terms ||
                    Terms != null &&
                    Terms.Equals(other.Terms)
                ) && 
                (
                    MeterTypes == other.MeterTypes ||
                    MeterTypes != null &&
                    other.MeterTypes != null &&
                    MeterTypes.SequenceEqual(other.MeterTypes)
                ) && 
                (
                    CoolingOffDays == other.CoolingOffDays ||
                    CoolingOffDays != null &&
                    CoolingOffDays.Equals(other.CoolingOffDays)
                ) && 
                (
                    BillFrequency == other.BillFrequency ||
                    BillFrequency != null &&
                    other.BillFrequency != null &&
                    BillFrequency.SequenceEqual(other.BillFrequency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + TermType.GetHashCode();
                    if (BenefitPeriod != null)
                    hashCode = hashCode * 59 + BenefitPeriod.GetHashCode();
                    if (Terms != null)
                    hashCode = hashCode * 59 + Terms.GetHashCode();
                    if (MeterTypes != null)
                    hashCode = hashCode * 59 + MeterTypes.GetHashCode();
                    if (CoolingOffDays != null)
                    hashCode = hashCode * 59 + CoolingOffDays.GetHashCode();
                    if (BillFrequency != null)
                    hashCode = hashCode * 59 + BillFrequency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyPlanContractFullAllOf left, EnergyPlanContractFullAllOf right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyPlanContractFullAllOf left, EnergyPlanContractFullAllOf right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
