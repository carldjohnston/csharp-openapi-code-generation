/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyPlanDetailAllOfMeteringCharges : IEquatable<EnergyPlanDetailAllOfMeteringCharges>
    {
        /// <summary>
        /// Display name of the charge
        /// </summary>
        /// <value>Display name of the charge</value>
        [Required]
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description of the charge
        /// </summary>
        /// <value>Description of the charge</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Minimum value of the charge if the charge is a range or the absolute value of the charge if no range is specified
        /// </summary>
        /// <value>Minimum value of the charge if the charge is a range or the absolute value of the charge if no range is specified</value>
        [Required]
        [DataMember(Name="minimumValue", EmitDefaultValue=false)]
        public string MinimumValue { get; set; }

        /// <summary>
        /// The upper limit of the charge if the charge could occur in a range
        /// </summary>
        /// <value>The upper limit of the charge if the charge could occur in a range</value>
        [DataMember(Name="maximumValue", EmitDefaultValue=false)]
        public string MaximumValue { get; set; }

        /// <summary>
        /// The charges that occur on a schedule indicates the frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The charges that occur on a schedule indicates the frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanDetailAllOfMeteringCharges {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MinimumValue: ").Append(MinimumValue).Append("\n");
            sb.Append("  MaximumValue: ").Append(MaximumValue).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyPlanDetailAllOfMeteringCharges)obj);
        }

        /// <summary>
        /// Returns true if EnergyPlanDetailAllOfMeteringCharges instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyPlanDetailAllOfMeteringCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanDetailAllOfMeteringCharges other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    MinimumValue == other.MinimumValue ||
                    MinimumValue != null &&
                    MinimumValue.Equals(other.MinimumValue)
                ) && 
                (
                    MaximumValue == other.MaximumValue ||
                    MaximumValue != null &&
                    MaximumValue.Equals(other.MaximumValue)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (MinimumValue != null)
                    hashCode = hashCode * 59 + MinimumValue.GetHashCode();
                    if (MaximumValue != null)
                    hashCode = hashCode * 59 + MaximumValue.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyPlanDetailAllOfMeteringCharges left, EnergyPlanDetailAllOfMeteringCharges right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyPlanDetailAllOfMeteringCharges left, EnergyPlanDetailAllOfMeteringCharges right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
