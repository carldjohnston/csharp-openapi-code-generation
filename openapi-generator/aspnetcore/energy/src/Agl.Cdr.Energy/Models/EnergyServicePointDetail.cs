/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyServicePointDetail : IEquatable<EnergyServicePointDetail>
    {
        /// <summary>
        /// The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence
        /// </summary>
        /// <value>The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence</value>
        [Required]
        [DataMember(Name="servicePointId", EmitDefaultValue=false)]
        public string ServicePointId { get; set; }

        /// <summary>
        /// The independent ID of the service point, known in the industry as the NMI
        /// </summary>
        /// <value>The independent ID of the service point, known in the industry as the NMI</value>
        [Required]
        [DataMember(Name="nationalMeteringId", EmitDefaultValue=false)]
        public string NationalMeteringId { get; set; }


        /// <summary>
        /// The classification of the service point as defined in MSATS procedures
        /// </summary>
        /// <value>The classification of the service point as defined in MSATS procedures</value>
        [TypeConverter(typeof(CustomEnumConverter<ServicePointClassificationEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ServicePointClassificationEnum
        {
            
            /// <summary>
            /// Enum EXTERNALPROFILEEnum for EXTERNAL_PROFILE
            /// </summary>
            [EnumMember(Value = "EXTERNAL_PROFILE")]
            EXTERNALPROFILEEnum = 1,
            
            /// <summary>
            /// Enum GENERATOREnum for GENERATOR
            /// </summary>
            [EnumMember(Value = "GENERATOR")]
            GENERATOREnum = 2,
            
            /// <summary>
            /// Enum LARGEEnum for LARGE
            /// </summary>
            [EnumMember(Value = "LARGE")]
            LARGEEnum = 3,
            
            /// <summary>
            /// Enum SMALLEnum for SMALL
            /// </summary>
            [EnumMember(Value = "SMALL")]
            SMALLEnum = 4,
            
            /// <summary>
            /// Enum WHOLESALEEnum for WHOLESALE
            /// </summary>
            [EnumMember(Value = "WHOLESALE")]
            WHOLESALEEnum = 5,
            
            /// <summary>
            /// Enum NONCONTESTUNMETEREDLOADEnum for NON_CONTEST_UNMETERED_LOAD
            /// </summary>
            [EnumMember(Value = "NON_CONTEST_UNMETERED_LOAD")]
            NONCONTESTUNMETEREDLOADEnum = 6,
            
            /// <summary>
            /// Enum NONREGISTEREDEMBEDDEDGENERATOREnum for NON_REGISTERED_EMBEDDED_GENERATOR
            /// </summary>
            [EnumMember(Value = "NON_REGISTERED_EMBEDDED_GENERATOR")]
            NONREGISTEREDEMBEDDEDGENERATOREnum = 7,
            
            /// <summary>
            /// Enum DISTRIBUTIONWHOLESALEEnum for DISTRIBUTION_WHOLESALE
            /// </summary>
            [EnumMember(Value = "DISTRIBUTION_WHOLESALE")]
            DISTRIBUTIONWHOLESALEEnum = 8
        }

        /// <summary>
        /// The classification of the service point as defined in MSATS procedures
        /// </summary>
        /// <value>The classification of the service point as defined in MSATS procedures</value>
        [Required]
        [DataMember(Name="servicePointClassification", EmitDefaultValue=false)]
        public ServicePointClassificationEnum ServicePointClassification { get; set; }


        /// <summary>
        /// Code used to indicate the status of the service point. Note the details for the enumeration values below:<ul><li>**ACTIVE** - An active, energised, service point</li><li>**DE_ENERGISED** - The service point exists but is deenergised</li><li>**EXTINCT** - The service point has been permanently decommissioned</li><li>**GREENFIELD** - Applies to a service point that has never been energised</li><li>**OFF_MARKET** - Applies when the service point is no longer settled in the NEM</li></ul> 
        /// </summary>
        /// <value>Code used to indicate the status of the service point. Note the details for the enumeration values below:<ul><li>**ACTIVE** - An active, energised, service point</li><li>**DE_ENERGISED** - The service point exists but is deenergised</li><li>**EXTINCT** - The service point has been permanently decommissioned</li><li>**GREENFIELD** - Applies to a service point that has never been energised</li><li>**OFF_MARKET** - Applies when the service point is no longer settled in the NEM</li></ul> </value>
        [TypeConverter(typeof(CustomEnumConverter<ServicePointStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ServicePointStatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 1,
            
            /// <summary>
            /// Enum DEENERGISEDEnum for DE_ENERGISED
            /// </summary>
            [EnumMember(Value = "DE_ENERGISED")]
            DEENERGISEDEnum = 2,
            
            /// <summary>
            /// Enum EXTINCTEnum for EXTINCT
            /// </summary>
            [EnumMember(Value = "EXTINCT")]
            EXTINCTEnum = 3,
            
            /// <summary>
            /// Enum GREENFIELDEnum for GREENFIELD
            /// </summary>
            [EnumMember(Value = "GREENFIELD")]
            GREENFIELDEnum = 4,
            
            /// <summary>
            /// Enum OFFMARKETEnum for OFF_MARKET
            /// </summary>
            [EnumMember(Value = "OFF_MARKET")]
            OFFMARKETEnum = 5
        }

        /// <summary>
        /// Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt; 
        /// </summary>
        /// <value>Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt; </value>
        [Required]
        [DataMember(Name="servicePointStatus", EmitDefaultValue=false)]
        public ServicePointStatusEnum ServicePointStatus { get; set; }


        /// <summary>
        /// Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:<ul><li>**ALL** - All Jurisdictions</li><li>**ACT** - Australian Capital Territory</li><li>**NEM** - National Electricity Market</li><li>**NSW** - New South Wales</li><li>**QLD** - Queensland</li><li>**SA** - South Australia</li><li>**TAS** - Tasmania</li><li>**VIC** - Victoria</li></ul>
        /// </summary>
        /// <value>Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:<ul><li>**ALL** - All Jurisdictions</li><li>**ACT** - Australian Capital Territory</li><li>**NEM** - National Electricity Market</li><li>**NSW** - New South Wales</li><li>**QLD** - Queensland</li><li>**SA** - South Australia</li><li>**TAS** - Tasmania</li><li>**VIC** - Victoria</li></ul></value>
        [TypeConverter(typeof(CustomEnumConverter<JurisdictionCodeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum JurisdictionCodeEnum
        {
            
            /// <summary>
            /// Enum ALLEnum for ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALLEnum = 1,
            
            /// <summary>
            /// Enum ACTEnum for ACT
            /// </summary>
            [EnumMember(Value = "ACT")]
            ACTEnum = 2,
            
            /// <summary>
            /// Enum NEMEnum for NEM
            /// </summary>
            [EnumMember(Value = "NEM")]
            NEMEnum = 3,
            
            /// <summary>
            /// Enum NSWEnum for NSW
            /// </summary>
            [EnumMember(Value = "NSW")]
            NSWEnum = 4,
            
            /// <summary>
            /// Enum QLDEnum for QLD
            /// </summary>
            [EnumMember(Value = "QLD")]
            QLDEnum = 5,
            
            /// <summary>
            /// Enum SAEnum for SA
            /// </summary>
            [EnumMember(Value = "SA")]
            SAEnum = 6,
            
            /// <summary>
            /// Enum TASEnum for TAS
            /// </summary>
            [EnumMember(Value = "TAS")]
            TASEnum = 7,
            
            /// <summary>
            /// Enum VICEnum for VIC
            /// </summary>
            [EnumMember(Value = "VIC")]
            VICEnum = 8
        }

        /// <summary>
        /// Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;</value>
        [Required]
        [DataMember(Name="jurisdictionCode", EmitDefaultValue=false)]
        public JurisdictionCodeEnum JurisdictionCode { get; set; }

        /// <summary>
        /// This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer
        /// </summary>
        /// <value>This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer</value>
        [DataMember(Name="isGenerator", EmitDefaultValue=false)]
        public bool IsGenerator { get; set; }

        /// <summary>
        /// The start date from which this service point first became valid
        /// </summary>
        /// <value>The start date from which this service point first became valid</value>
        [Required]
        [DataMember(Name="validFromDate", EmitDefaultValue=false)]
        public string ValidFromDate { get; set; }

        /// <summary>
        /// The date and time that the information for this service point was modified
        /// </summary>
        /// <value>The date and time that the information for this service point was modified</value>
        [Required]
        [DataMember(Name="lastUpdateDateTime", EmitDefaultValue=false)]
        public string LastUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerProfile
        /// </summary>
        [DataMember(Name="consumerProfile", EmitDefaultValue=false)]
        public EnergyServicePointConsumerProfile ConsumerProfile { get; set; }

        /// <summary>
        /// Gets or Sets DistributionLossFactor
        /// </summary>
        [Required]
        [DataMember(Name="distributionLossFactor", EmitDefaultValue=false)]
        public EnergyServicePointDetailDistributionLossFactor DistributionLossFactor { get; set; }

        /// <summary>
        /// Gets or Sets RelatedParticipants
        /// </summary>
        [Required]
        [DataMember(Name="relatedParticipants", EmitDefaultValue=false)]
        public List<EnergyServicePointDetailRelatedParticipants> RelatedParticipants { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public EnergyServicePointDetailLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Meters
        /// </summary>
        [Required]
        [DataMember(Name="meters", EmitDefaultValue=false)]
        public EnergyServicePointDetailMeters Meters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetail {\n");
            sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
            sb.Append("  NationalMeteringId: ").Append(NationalMeteringId).Append("\n");
            sb.Append("  ServicePointClassification: ").Append(ServicePointClassification).Append("\n");
            sb.Append("  ServicePointStatus: ").Append(ServicePointStatus).Append("\n");
            sb.Append("  JurisdictionCode: ").Append(JurisdictionCode).Append("\n");
            sb.Append("  IsGenerator: ").Append(IsGenerator).Append("\n");
            sb.Append("  ValidFromDate: ").Append(ValidFromDate).Append("\n");
            sb.Append("  LastUpdateDateTime: ").Append(LastUpdateDateTime).Append("\n");
            sb.Append("  ConsumerProfile: ").Append(ConsumerProfile).Append("\n");
            sb.Append("  DistributionLossFactor: ").Append(DistributionLossFactor).Append("\n");
            sb.Append("  RelatedParticipants: ").Append(RelatedParticipants).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Meters: ").Append(Meters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyServicePointDetail)obj);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyServicePointDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServicePointId == other.ServicePointId ||
                    ServicePointId != null &&
                    ServicePointId.Equals(other.ServicePointId)
                ) && 
                (
                    NationalMeteringId == other.NationalMeteringId ||
                    NationalMeteringId != null &&
                    NationalMeteringId.Equals(other.NationalMeteringId)
                ) && 
                (
                    ServicePointClassification == other.ServicePointClassification ||
                    
                    ServicePointClassification.Equals(other.ServicePointClassification)
                ) && 
                (
                    ServicePointStatus == other.ServicePointStatus ||
                    
                    ServicePointStatus.Equals(other.ServicePointStatus)
                ) && 
                (
                    JurisdictionCode == other.JurisdictionCode ||
                    
                    JurisdictionCode.Equals(other.JurisdictionCode)
                ) && 
                (
                    IsGenerator == other.IsGenerator ||
                    
                    IsGenerator.Equals(other.IsGenerator)
                ) && 
                (
                    ValidFromDate == other.ValidFromDate ||
                    ValidFromDate != null &&
                    ValidFromDate.Equals(other.ValidFromDate)
                ) && 
                (
                    LastUpdateDateTime == other.LastUpdateDateTime ||
                    LastUpdateDateTime != null &&
                    LastUpdateDateTime.Equals(other.LastUpdateDateTime)
                ) && 
                (
                    ConsumerProfile == other.ConsumerProfile ||
                    ConsumerProfile != null &&
                    ConsumerProfile.Equals(other.ConsumerProfile)
                ) && 
                (
                    DistributionLossFactor == other.DistributionLossFactor ||
                    DistributionLossFactor != null &&
                    DistributionLossFactor.Equals(other.DistributionLossFactor)
                ) && 
                (
                    RelatedParticipants == other.RelatedParticipants ||
                    RelatedParticipants != null &&
                    other.RelatedParticipants != null &&
                    RelatedParticipants.SequenceEqual(other.RelatedParticipants)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Meters == other.Meters ||
                    Meters != null &&
                    Meters.Equals(other.Meters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServicePointId != null)
                    hashCode = hashCode * 59 + ServicePointId.GetHashCode();
                    if (NationalMeteringId != null)
                    hashCode = hashCode * 59 + NationalMeteringId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServicePointClassification.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServicePointStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + JurisdictionCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsGenerator.GetHashCode();
                    if (ValidFromDate != null)
                    hashCode = hashCode * 59 + ValidFromDate.GetHashCode();
                    if (LastUpdateDateTime != null)
                    hashCode = hashCode * 59 + LastUpdateDateTime.GetHashCode();
                    if (ConsumerProfile != null)
                    hashCode = hashCode * 59 + ConsumerProfile.GetHashCode();
                    if (DistributionLossFactor != null)
                    hashCode = hashCode * 59 + DistributionLossFactor.GetHashCode();
                    if (RelatedParticipants != null)
                    hashCode = hashCode * 59 + RelatedParticipants.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Meters != null)
                    hashCode = hashCode * 59 + Meters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyServicePointDetail left, EnergyServicePointDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyServicePointDetail left, EnergyServicePointDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
