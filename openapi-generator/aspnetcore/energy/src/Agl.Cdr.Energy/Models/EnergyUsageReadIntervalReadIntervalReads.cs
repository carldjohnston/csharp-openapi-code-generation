/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyUsageReadIntervalReadIntervalReads : IEquatable<EnergyUsageReadIntervalReadIntervalReads>
    {

        /// <summary>
        /// The quality of the read taken.  If absent then assumed to be ACTUAL
        /// </summary>
        /// <value>The quality of the read taken.  If absent then assumed to be ACTUAL</value>
        [TypeConverter(typeof(CustomEnumConverter<QualityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum QualityEnum
        {
            
            /// <summary>
            /// Enum ACTUALEnum for ACTUAL
            /// </summary>
            [EnumMember(Value = "ACTUAL")]
            ACTUALEnum = 1,
            
            /// <summary>
            /// Enum SUBSTITUTEEnum for SUBSTITUTE
            /// </summary>
            [EnumMember(Value = "SUBSTITUTE")]
            SUBSTITUTEEnum = 2,
            
            /// <summary>
            /// Enum FINALSUBSTITUTEEnum for FINAL_SUBSTITUTE
            /// </summary>
            [EnumMember(Value = "FINAL_SUBSTITUTE")]
            FINALSUBSTITUTEEnum = 3
        }

        /// <summary>
        /// The quality of the read taken.  If absent then assumed to be ACTUAL
        /// </summary>
        /// <value>The quality of the read taken.  If absent then assumed to be ACTUAL</value>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public QualityEnum Quality { get; set; } = QualityEnum.ACTUALEnum;

        /// <summary>
        /// Interval value.  If positive then it means consumption, if negative it means export
        /// </summary>
        /// <value>Interval value.  If positive then it means consumption, if negative it means export</value>
        [Required]
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyUsageReadIntervalReadIntervalReads {\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyUsageReadIntervalReadIntervalReads)obj);
        }

        /// <summary>
        /// Returns true if EnergyUsageReadIntervalReadIntervalReads instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyUsageReadIntervalReadIntervalReads to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyUsageReadIntervalReadIntervalReads other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Quality == other.Quality ||
                    
                    Quality.Equals(other.Quality)
                ) && 
                (
                    Value == other.Value ||
                    
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Quality.GetHashCode();
                    
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyUsageReadIntervalReadIntervalReads left, EnergyUsageReadIntervalReadIntervalReads right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyUsageReadIntervalReadIntervalReads left, EnergyUsageReadIntervalReadIntervalReads right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
