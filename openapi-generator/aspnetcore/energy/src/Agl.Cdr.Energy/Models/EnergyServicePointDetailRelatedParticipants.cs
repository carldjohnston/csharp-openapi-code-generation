/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyServicePointDetailRelatedParticipants : IEquatable<EnergyServicePointDetailRelatedParticipants>
    {
        /// <summary>
        /// The name of the party/orginsation related to this service point
        /// </summary>
        /// <value>The name of the party/orginsation related to this service point</value>
        [Required]
        [DataMember(Name="party", EmitDefaultValue=false)]
        public string Party { get; set; }


        /// <summary>
        /// The role performed by this participant in relation to the service point. Note the details of enumeration values below: <ul><li>**FRMP** - Financially Responsible Market Participant</li><li>**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points</li><li>**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included</li></ul>
        /// </summary>
        /// <value>The role performed by this participant in relation to the service point. Note the details of enumeration values below: <ul><li>**FRMP** - Financially Responsible Market Participant</li><li>**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points</li><li>**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included</li></ul></value>
        [TypeConverter(typeof(CustomEnumConverter<RoleEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum FRMPEnum for FRMP
            /// </summary>
            [EnumMember(Value = "FRMP")]
            FRMPEnum = 1,
            
            /// <summary>
            /// Enum LNSPEnum for LNSP
            /// </summary>
            [EnumMember(Value = "LNSP")]
            LNSPEnum = 2,
            
            /// <summary>
            /// Enum DRSPEnum for DRSP
            /// </summary>
            [EnumMember(Value = "DRSP")]
            DRSPEnum = 3
        }

        /// <summary>
        /// The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;</value>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetailRelatedParticipants {\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyServicePointDetailRelatedParticipants)obj);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetailRelatedParticipants instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyServicePointDetailRelatedParticipants to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetailRelatedParticipants other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Party == other.Party ||
                    Party != null &&
                    Party.Equals(other.Party)
                ) && 
                (
                    Role == other.Role ||
                    
                    Role.Equals(other.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Party != null)
                    hashCode = hashCode * 59 + Party.GetHashCode();
                    
                    hashCode = hashCode * 59 + Role.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyServicePointDetailRelatedParticipants left, EnergyServicePointDetailRelatedParticipants right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyServicePointDetailRelatedParticipants left, EnergyServicePointDetailRelatedParticipants right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
