/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyBillingTransaction : IEquatable<EnergyBillingTransaction>
    {
        /// <summary>
        /// The ID of the account for which transaction applies
        /// </summary>
        /// <value>The ID of the account for which transaction applies</value>
        [Required]
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The date and time that the transaction occurred
        /// </summary>
        /// <value>The date and time that the transaction occurred</value>
        [Required]
        [DataMember(Name="executionDateTime", EmitDefaultValue=false)]
        public string ExecutionDateTime { get; set; }

        /// <summary>
        /// The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed
        /// </summary>
        /// <value>The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed</value>
        [DataMember(Name="gst", EmitDefaultValue=false)]
        public string Gst { get; set; }


        /// <summary>
        /// Indicator of the type of transaction object present in this record
        /// </summary>
        /// <value>Indicator of the type of transaction object present in this record</value>
        [TypeConverter(typeof(CustomEnumConverter<TransactionUTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TransactionUTypeEnum
        {
            
            /// <summary>
            /// Enum UsageEnum for usage
            /// </summary>
            [EnumMember(Value = "usage")]
            UsageEnum = 1,
            
            /// <summary>
            /// Enum DemandEnum for demand
            /// </summary>
            [EnumMember(Value = "demand")]
            DemandEnum = 2,
            
            /// <summary>
            /// Enum OnceOffEnum for onceOff
            /// </summary>
            [EnumMember(Value = "onceOff")]
            OnceOffEnum = 3,
            
            /// <summary>
            /// Enum OtherChargesEnum for otherCharges
            /// </summary>
            [EnumMember(Value = "otherCharges")]
            OtherChargesEnum = 4,
            
            /// <summary>
            /// Enum PaymentEnum for payment
            /// </summary>
            [EnumMember(Value = "payment")]
            PaymentEnum = 5
        }

        /// <summary>
        /// Indicator of the type of transaction object present in this record
        /// </summary>
        /// <value>Indicator of the type of transaction object present in this record</value>
        [Required]
        [DataMember(Name="transactionUType", EmitDefaultValue=false)]
        public TransactionUTypeEnum TransactionUType { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public EnergyBillingUsageTransaction Usage { get; set; }

        /// <summary>
        /// Gets or Sets Demand
        /// </summary>
        [DataMember(Name="demand", EmitDefaultValue=false)]
        public EnergyBillingDemandTransaction Demand { get; set; }

        /// <summary>
        /// Gets or Sets OnceOff
        /// </summary>
        [DataMember(Name="onceOff", EmitDefaultValue=false)]
        public EnergyBillingOnceOffTransaction OnceOff { get; set; }

        /// <summary>
        /// Gets or Sets OtherCharges
        /// </summary>
        [DataMember(Name="otherCharges", EmitDefaultValue=false)]
        public EnergyBillingOtherTransaction OtherCharges { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=false)]
        public EnergyBillingPaymentTransaction Payment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingTransaction {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ExecutionDateTime: ").Append(ExecutionDateTime).Append("\n");
            sb.Append("  Gst: ").Append(Gst).Append("\n");
            sb.Append("  TransactionUType: ").Append(TransactionUType).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  OnceOff: ").Append(OnceOff).Append("\n");
            sb.Append("  OtherCharges: ").Append(OtherCharges).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyBillingTransaction)obj);
        }

        /// <summary>
        /// Returns true if EnergyBillingTransaction instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyBillingTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingTransaction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    ExecutionDateTime == other.ExecutionDateTime ||
                    ExecutionDateTime != null &&
                    ExecutionDateTime.Equals(other.ExecutionDateTime)
                ) && 
                (
                    Gst == other.Gst ||
                    Gst != null &&
                    Gst.Equals(other.Gst)
                ) && 
                (
                    TransactionUType == other.TransactionUType ||
                    
                    TransactionUType.Equals(other.TransactionUType)
                ) && 
                (
                    Usage == other.Usage ||
                    Usage != null &&
                    Usage.Equals(other.Usage)
                ) && 
                (
                    Demand == other.Demand ||
                    Demand != null &&
                    Demand.Equals(other.Demand)
                ) && 
                (
                    OnceOff == other.OnceOff ||
                    OnceOff != null &&
                    OnceOff.Equals(other.OnceOff)
                ) && 
                (
                    OtherCharges == other.OtherCharges ||
                    OtherCharges != null &&
                    OtherCharges.Equals(other.OtherCharges)
                ) && 
                (
                    Payment == other.Payment ||
                    Payment != null &&
                    Payment.Equals(other.Payment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (ExecutionDateTime != null)
                    hashCode = hashCode * 59 + ExecutionDateTime.GetHashCode();
                    if (Gst != null)
                    hashCode = hashCode * 59 + Gst.GetHashCode();
                    
                    hashCode = hashCode * 59 + TransactionUType.GetHashCode();
                    if (Usage != null)
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                    if (Demand != null)
                    hashCode = hashCode * 59 + Demand.GetHashCode();
                    if (OnceOff != null)
                    hashCode = hashCode * 59 + OnceOff.GetHashCode();
                    if (OtherCharges != null)
                    hashCode = hashCode * 59 + OtherCharges.GetHashCode();
                    if (Payment != null)
                    hashCode = hashCode * 59 + Payment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyBillingTransaction left, EnergyBillingTransaction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyBillingTransaction left, EnergyBillingTransaction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
