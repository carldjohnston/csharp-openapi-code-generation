/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyServicePointDetailMeters : IEquatable<EnergyServicePointDetailMeters>
    {
        /// <summary>
        /// The meter ID uniquely identifies a meter for a given service point.  It is unique in the context of the service point.  It is not globally unique
        /// </summary>
        /// <value>The meter ID uniquely identifies a meter for a given service point.  It is unique in the context of the service point.  It is not globally unique</value>
        [Required]
        [DataMember(Name="meterId", EmitDefaultValue=false)]
        public string MeterId { get; set; }

        /// <summary>
        /// Gets or Sets Specifications
        /// </summary>
        [Required]
        [DataMember(Name="specifications", EmitDefaultValue=false)]
        public EnergyServicePointDetailMetersSpecifications Specifications { get; set; }

        /// <summary>
        /// Gets or Sets Registers
        /// </summary>
        [Required]
        [DataMember(Name="registers", EmitDefaultValue=false)]
        public EnergyServicePointDetailMetersRegisters Registers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetailMeters {\n");
            sb.Append("  MeterId: ").Append(MeterId).Append("\n");
            sb.Append("  Specifications: ").Append(Specifications).Append("\n");
            sb.Append("  Registers: ").Append(Registers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyServicePointDetailMeters)obj);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetailMeters instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyServicePointDetailMeters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetailMeters other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MeterId == other.MeterId ||
                    MeterId != null &&
                    MeterId.Equals(other.MeterId)
                ) && 
                (
                    Specifications == other.Specifications ||
                    Specifications != null &&
                    Specifications.Equals(other.Specifications)
                ) && 
                (
                    Registers == other.Registers ||
                    Registers != null &&
                    Registers.Equals(other.Registers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MeterId != null)
                    hashCode = hashCode * 59 + MeterId.GetHashCode();
                    if (Specifications != null)
                    hashCode = hashCode * 59 + Specifications.GetHashCode();
                    if (Registers != null)
                    hashCode = hashCode * 59 + Registers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyServicePointDetailMeters left, EnergyServicePointDetailMeters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyServicePointDetailMeters left, EnergyServicePointDetailMeters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
