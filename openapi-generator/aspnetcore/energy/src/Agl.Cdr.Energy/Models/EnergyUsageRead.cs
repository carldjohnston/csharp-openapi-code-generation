/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyUsageRead : IEquatable<EnergyUsageRead>
    {
        /// <summary>
        /// Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements
        /// </summary>
        /// <value>Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements</value>
        [Required]
        [DataMember(Name="servicePointId", EmitDefaultValue=false)]
        public string ServicePointId { get; set; }

        /// <summary>
        /// Register ID of the meter register where the meter reads are obtained
        /// </summary>
        /// <value>Register ID of the meter register where the meter reads are obtained</value>
        [DataMember(Name="registerId", EmitDefaultValue=false)]
        public string RegisterId { get; set; }

        /// <summary>
        /// Register suffix of the meter register where the meter reads are obtained
        /// </summary>
        /// <value>Register suffix of the meter register where the meter reads are obtained</value>
        [Required]
        [DataMember(Name="registerSuffix", EmitDefaultValue=false)]
        public string RegisterSuffix { get; set; }

        /// <summary>
        /// Meter id/serial number as it appears in customer’s bill. ID permanence rules do not apply.
        /// </summary>
        /// <value>Meter id/serial number as it appears in customer’s bill. ID permanence rules do not apply.</value>
        [DataMember(Name="meterID", EmitDefaultValue=false)]
        public string MeterID { get; set; }

        /// <summary>
        /// Indicates whether the energy recorded by this register is created under a Controlled Load regime. ControlledLoad field will have &#39;No if register does not relate to a Controlled Load, “Yes” if register relates to a Controlled Load If absent the status is unknown. 
        /// </summary>
        /// <value>Indicates whether the energy recorded by this register is created under a Controlled Load regime. ControlledLoad field will have &#39;No if register does not relate to a Controlled Load, “Yes” if register relates to a Controlled Load If absent the status is unknown. </value>
        [DataMember(Name="controlledLoad", EmitDefaultValue=false)]
        public bool ControlledLoad { get; set; }

        /// <summary>
        /// Date time when the meter reads start
        /// </summary>
        /// <value>Date time when the meter reads start</value>
        [Required]
        [DataMember(Name="readStartDate", EmitDefaultValue=false)]
        public string ReadStartDate { get; set; }

        /// <summary>
        /// Date time when the meter reads end.  If absent then assumed to be equal to readStartDate.  In this case the entry represents data for a single date specified by readStartDate
        /// </summary>
        /// <value>Date time when the meter reads end.  If absent then assumed to be equal to readStartDate.  In this case the entry represents data for a single date specified by readStartDate</value>
        [DataMember(Name="readEndDate", EmitDefaultValue=false)]
        public string ReadEndDate { get; set; }

        /// <summary>
        /// Unit of measure of the meter reads. Refer to Appendix B of &lt;a href&#x3D;&#39;https://www.aemo.com.au/-/media/files/stakeholder_consultation/consultations/nem-consultations/2019/5ms-metering-package-2/final-determination/mdff-specification-nem12-nem13-v21-final-determination-clean.pdf?la&#x3D;en&amp;hash&#x3D;03FCBA0D60E091DE00F2361AE76206EA&#39;&gt;MDFF Specification NEM12 NEM13 v2.1&lt;/a&gt; for a list of possible values
        /// </summary>
        /// <value>Unit of measure of the meter reads. Refer to Appendix B of &lt;a href&#x3D;&#39;https://www.aemo.com.au/-/media/files/stakeholder_consultation/consultations/nem-consultations/2019/5ms-metering-package-2/final-determination/mdff-specification-nem12-nem13-v21-final-determination-clean.pdf?la&#x3D;en&amp;hash&#x3D;03FCBA0D60E091DE00F2361AE76206EA&#39;&gt;MDFF Specification NEM12 NEM13 v2.1&lt;/a&gt; for a list of possible values</value>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public string UnitOfMeasure { get; set; }


        /// <summary>
        /// Specify the type of the meter read data
        /// </summary>
        /// <value>Specify the type of the meter read data</value>
        [TypeConverter(typeof(CustomEnumConverter<ReadUTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReadUTypeEnum
        {
            
            /// <summary>
            /// Enum BasicReadEnum for basicRead
            /// </summary>
            [EnumMember(Value = "basicRead")]
            BasicReadEnum = 1,
            
            /// <summary>
            /// Enum IntervalReadEnum for intervalRead
            /// </summary>
            [EnumMember(Value = "intervalRead")]
            IntervalReadEnum = 2
        }

        /// <summary>
        /// Specify the type of the meter read data
        /// </summary>
        /// <value>Specify the type of the meter read data</value>
        [Required]
        [DataMember(Name="readUType", EmitDefaultValue=false)]
        public ReadUTypeEnum ReadUType { get; set; }

        /// <summary>
        /// Gets or Sets BasicRead
        /// </summary>
        [DataMember(Name="basicRead", EmitDefaultValue=false)]
        public EnergyUsageReadBasicRead BasicRead { get; set; }

        /// <summary>
        /// Gets or Sets IntervalRead
        /// </summary>
        [DataMember(Name="intervalRead", EmitDefaultValue=false)]
        public EnergyUsageReadIntervalRead IntervalRead { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyUsageRead {\n");
            sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
            sb.Append("  RegisterId: ").Append(RegisterId).Append("\n");
            sb.Append("  RegisterSuffix: ").Append(RegisterSuffix).Append("\n");
            sb.Append("  MeterID: ").Append(MeterID).Append("\n");
            sb.Append("  ControlledLoad: ").Append(ControlledLoad).Append("\n");
            sb.Append("  ReadStartDate: ").Append(ReadStartDate).Append("\n");
            sb.Append("  ReadEndDate: ").Append(ReadEndDate).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  ReadUType: ").Append(ReadUType).Append("\n");
            sb.Append("  BasicRead: ").Append(BasicRead).Append("\n");
            sb.Append("  IntervalRead: ").Append(IntervalRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyUsageRead)obj);
        }

        /// <summary>
        /// Returns true if EnergyUsageRead instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyUsageRead to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyUsageRead other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServicePointId == other.ServicePointId ||
                    ServicePointId != null &&
                    ServicePointId.Equals(other.ServicePointId)
                ) && 
                (
                    RegisterId == other.RegisterId ||
                    RegisterId != null &&
                    RegisterId.Equals(other.RegisterId)
                ) && 
                (
                    RegisterSuffix == other.RegisterSuffix ||
                    RegisterSuffix != null &&
                    RegisterSuffix.Equals(other.RegisterSuffix)
                ) && 
                (
                    MeterID == other.MeterID ||
                    MeterID != null &&
                    MeterID.Equals(other.MeterID)
                ) && 
                (
                    ControlledLoad == other.ControlledLoad ||
                    
                    ControlledLoad.Equals(other.ControlledLoad)
                ) && 
                (
                    ReadStartDate == other.ReadStartDate ||
                    ReadStartDate != null &&
                    ReadStartDate.Equals(other.ReadStartDate)
                ) && 
                (
                    ReadEndDate == other.ReadEndDate ||
                    ReadEndDate != null &&
                    ReadEndDate.Equals(other.ReadEndDate)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                ) && 
                (
                    ReadUType == other.ReadUType ||
                    
                    ReadUType.Equals(other.ReadUType)
                ) && 
                (
                    BasicRead == other.BasicRead ||
                    BasicRead != null &&
                    BasicRead.Equals(other.BasicRead)
                ) && 
                (
                    IntervalRead == other.IntervalRead ||
                    IntervalRead != null &&
                    IntervalRead.Equals(other.IntervalRead)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServicePointId != null)
                    hashCode = hashCode * 59 + ServicePointId.GetHashCode();
                    if (RegisterId != null)
                    hashCode = hashCode * 59 + RegisterId.GetHashCode();
                    if (RegisterSuffix != null)
                    hashCode = hashCode * 59 + RegisterSuffix.GetHashCode();
                    if (MeterID != null)
                    hashCode = hashCode * 59 + MeterID.GetHashCode();
                    
                    hashCode = hashCode * 59 + ControlledLoad.GetHashCode();
                    if (ReadStartDate != null)
                    hashCode = hashCode * 59 + ReadStartDate.GetHashCode();
                    if (ReadEndDate != null)
                    hashCode = hashCode * 59 + ReadEndDate.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReadUType.GetHashCode();
                    if (BasicRead != null)
                    hashCode = hashCode * 59 + BasicRead.GetHashCode();
                    if (IntervalRead != null)
                    hashCode = hashCode * 59 + IntervalRead.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyUsageRead left, EnergyUsageRead right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyUsageRead left, EnergyUsageRead right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
