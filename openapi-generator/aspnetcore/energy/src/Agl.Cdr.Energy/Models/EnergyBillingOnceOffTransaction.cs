/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyBillingOnceOffTransaction : IEquatable<EnergyBillingOnceOffTransaction>
    {
        /// <summary>
        /// The ID of the service point to which this transaction applies if any
        /// </summary>
        /// <value>The ID of the service point to which this transaction applies if any</value>
        [DataMember(Name="servicePointId", EmitDefaultValue=false)]
        public string ServicePointId { get; set; }

        /// <summary>
        /// The number of the invoice in which this transaction is included if it has been issued
        /// </summary>
        /// <value>The number of the invoice in which this transaction is included if it has been issued</value>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The amount of the charge or credit.  A positive value indicates a charge and a negative value indicates a credit
        /// </summary>
        /// <value>The amount of the charge or credit.  A positive value indicates a charge and a negative value indicates a credit</value>
        [Required]
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// A free text description of the item
        /// </summary>
        /// <value>A free text description of the item</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingOnceOffTransaction {\n");
            sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyBillingOnceOffTransaction)obj);
        }

        /// <summary>
        /// Returns true if EnergyBillingOnceOffTransaction instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyBillingOnceOffTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingOnceOffTransaction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServicePointId == other.ServicePointId ||
                    ServicePointId != null &&
                    ServicePointId.Equals(other.ServicePointId)
                ) && 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServicePointId != null)
                    hashCode = hashCode * 59 + ServicePointId.GetHashCode();
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyBillingOnceOffTransaction left, EnergyBillingOnceOffTransaction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyBillingOnceOffTransaction left, EnergyBillingOnceOffTransaction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
