/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// Technical characteristics of the meter
    /// </summary>
    [DataContract]
    public partial class EnergyServicePointDetailMetersSpecifications : IEquatable<EnergyServicePointDetailMetersSpecifications>
    {

        /// <summary>
        /// A code to denote the status of the meter. Note the details of enumeration values below: <ul><li>**CURRENT** -Applies when a meter is current and not disconnected</li><li>**DISCONNECTED** - Applies when a meter is present but has been remotely disconnected</li></ul>
        /// </summary>
        /// <value>A code to denote the status of the meter. Note the details of enumeration values below: <ul><li>**CURRENT** -Applies when a meter is current and not disconnected</li><li>**DISCONNECTED** - Applies when a meter is present but has been remotely disconnected</li></ul></value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CURRENTEnum for CURRENT
            /// </summary>
            [EnumMember(Value = "CURRENT")]
            CURRENTEnum = 1,
            
            /// <summary>
            /// Enum DISCONNECTEDEnum for DISCONNECTED
            /// </summary>
            [EnumMember(Value = "DISCONNECTED")]
            DISCONNECTEDEnum = 2
        }

        /// <summary>
        /// A code to denote the status of the meter. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**CURRENT** -Applies when a meter is current and not disconnected&lt;/li&gt;&lt;li&gt;**DISCONNECTED** - Applies when a meter is present but has been remotely disconnected&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>A code to denote the status of the meter. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**CURRENT** -Applies when a meter is current and not disconnected&lt;/li&gt;&lt;li&gt;**DISCONNECTED** - Applies when a meter is present but has been remotely disconnected&lt;/li&gt;&lt;/ul&gt;</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }


        /// <summary>
        /// The metering Installation type code indicates whether the metering installation has to be manually read. Note the details of enumeration values below: <ul><li>**BASIC** - Accumulation Meter – Type 6</li><li>**COMMS1** - Interval Meter with communications – Type 1</li><li>**COMMS2** - Interval Meter with communications – Type 2</li><li>**COMMS3** - Interval Meter with communications – Type 3</li><li>**COMMS4** - Interval Meter with communications – Type 4</li><li>**COMMS4C** - CT connected metering installation that meets the minimum services specifications</li><li>**COMMS4D** - Whole current metering installation that meets the minimum services specifications</li><li>**MRAM** - Small customer metering installation – Type 4A</li><li>**MRIM** - Manually Read Interval Meter – Type 5</li><li>**UMCP** - Unmetered Supply – Type 7</li><li>**VICAMI** - A relevant metering installation as defined in clause 9.9C of the NER</li><li>**NCONUML** - Non-contestable unmeter load - Introduced as part of Global Settlement</li></ul>
        /// </summary>
        /// <value>The metering Installation type code indicates whether the metering installation has to be manually read. Note the details of enumeration values below: <ul><li>**BASIC** - Accumulation Meter – Type 6</li><li>**COMMS1** - Interval Meter with communications – Type 1</li><li>**COMMS2** - Interval Meter with communications – Type 2</li><li>**COMMS3** - Interval Meter with communications – Type 3</li><li>**COMMS4** - Interval Meter with communications – Type 4</li><li>**COMMS4C** - CT connected metering installation that meets the minimum services specifications</li><li>**COMMS4D** - Whole current metering installation that meets the minimum services specifications</li><li>**MRAM** - Small customer metering installation – Type 4A</li><li>**MRIM** - Manually Read Interval Meter – Type 5</li><li>**UMCP** - Unmetered Supply – Type 7</li><li>**VICAMI** - A relevant metering installation as defined in clause 9.9C of the NER</li><li>**NCONUML** - Non-contestable unmeter load - Introduced as part of Global Settlement</li></ul></value>
        [TypeConverter(typeof(CustomEnumConverter<InstallationTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum InstallationTypeEnum
        {
            
            /// <summary>
            /// Enum BASICEnum for BASIC
            /// </summary>
            [EnumMember(Value = "BASIC")]
            BASICEnum = 1,
            
            /// <summary>
            /// Enum COMMS1Enum for COMMS1
            /// </summary>
            [EnumMember(Value = "COMMS1")]
            COMMS1Enum = 2,
            
            /// <summary>
            /// Enum COMMS2Enum for COMMS2
            /// </summary>
            [EnumMember(Value = "COMMS2")]
            COMMS2Enum = 3,
            
            /// <summary>
            /// Enum COMMS3Enum for COMMS3
            /// </summary>
            [EnumMember(Value = "COMMS3")]
            COMMS3Enum = 4,
            
            /// <summary>
            /// Enum COMMS4Enum for COMMS4
            /// </summary>
            [EnumMember(Value = "COMMS4")]
            COMMS4Enum = 5,
            
            /// <summary>
            /// Enum COMMS4CEnum for COMMS4C
            /// </summary>
            [EnumMember(Value = "COMMS4C")]
            COMMS4CEnum = 6,
            
            /// <summary>
            /// Enum COMMS4DEnum for COMMS4D
            /// </summary>
            [EnumMember(Value = "COMMS4D")]
            COMMS4DEnum = 7,
            
            /// <summary>
            /// Enum MRAMEnum for MRAM
            /// </summary>
            [EnumMember(Value = "MRAM")]
            MRAMEnum = 8,
            
            /// <summary>
            /// Enum MRIMEnum for MRIM
            /// </summary>
            [EnumMember(Value = "MRIM")]
            MRIMEnum = 9,
            
            /// <summary>
            /// Enum PROFEnum for PROF
            /// </summary>
            [EnumMember(Value = "PROF")]
            PROFEnum = 10,
            
            /// <summary>
            /// Enum SAMPLEEnum for SAMPLE
            /// </summary>
            [EnumMember(Value = "SAMPLE")]
            SAMPLEEnum = 11,
            
            /// <summary>
            /// Enum UMCPEnum for UMCP
            /// </summary>
            [EnumMember(Value = "UMCP")]
            UMCPEnum = 12,
            
            /// <summary>
            /// Enum VICAMIEnum for VICAMI
            /// </summary>
            [EnumMember(Value = "VICAMI")]
            VICAMIEnum = 13,
            
            /// <summary>
            /// Enum NCOLNUMLEnum for NCOLNUML
            /// </summary>
            [EnumMember(Value = "NCOLNUML")]
            NCOLNUMLEnum = 14
        }

        /// <summary>
        /// The metering Installation type code indicates whether the metering installation has to be manually read. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**BASIC** - Accumulation Meter – Type 6&lt;/li&gt;&lt;li&gt;**COMMS1** - Interval Meter with communications – Type 1&lt;/li&gt;&lt;li&gt;**COMMS2** - Interval Meter with communications – Type 2&lt;/li&gt;&lt;li&gt;**COMMS3** - Interval Meter with communications – Type 3&lt;/li&gt;&lt;li&gt;**COMMS4** - Interval Meter with communications – Type 4&lt;/li&gt;&lt;li&gt;**COMMS4C** - CT connected metering installation that meets the minimum services specifications&lt;/li&gt;&lt;li&gt;**COMMS4D** - Whole current metering installation that meets the minimum services specifications&lt;/li&gt;&lt;li&gt;**MRAM** - Small customer metering installation – Type 4A&lt;/li&gt;&lt;li&gt;**MRIM** - Manually Read Interval Meter – Type 5&lt;/li&gt;&lt;li&gt;**UMCP** - Unmetered Supply – Type 7&lt;/li&gt;&lt;li&gt;**VICAMI** - A relevant metering installation as defined in clause 9.9C of the NER&lt;/li&gt;&lt;li&gt;**NCONUML** - Non-contestable unmeter load - Introduced as part of Global Settlement&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The metering Installation type code indicates whether the metering installation has to be manually read. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**BASIC** - Accumulation Meter – Type 6&lt;/li&gt;&lt;li&gt;**COMMS1** - Interval Meter with communications – Type 1&lt;/li&gt;&lt;li&gt;**COMMS2** - Interval Meter with communications – Type 2&lt;/li&gt;&lt;li&gt;**COMMS3** - Interval Meter with communications – Type 3&lt;/li&gt;&lt;li&gt;**COMMS4** - Interval Meter with communications – Type 4&lt;/li&gt;&lt;li&gt;**COMMS4C** - CT connected metering installation that meets the minimum services specifications&lt;/li&gt;&lt;li&gt;**COMMS4D** - Whole current metering installation that meets the minimum services specifications&lt;/li&gt;&lt;li&gt;**MRAM** - Small customer metering installation – Type 4A&lt;/li&gt;&lt;li&gt;**MRIM** - Manually Read Interval Meter – Type 5&lt;/li&gt;&lt;li&gt;**UMCP** - Unmetered Supply – Type 7&lt;/li&gt;&lt;li&gt;**VICAMI** - A relevant metering installation as defined in clause 9.9C of the NER&lt;/li&gt;&lt;li&gt;**NCONUML** - Non-contestable unmeter load - Introduced as part of Global Settlement&lt;/li&gt;&lt;/ul&gt;</value>
        [Required]
        [DataMember(Name="installationType", EmitDefaultValue=false)]
        public InstallationTypeEnum InstallationType { get; set; }

        /// <summary>
        /// Free text field to identify the manufacturer of the installed meter
        /// </summary>
        /// <value>Free text field to identify the manufacturer of the installed meter</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Free text field to identify the meter manufacturer’s designation for the meter model
        /// </summary>
        /// <value>Free text field to identify the meter manufacturer’s designation for the meter model</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Code to denote the method and frequency of Meter Reading. The value is formatted as follows: &lt;ul&gt;&lt;li&gt;First Character &#x3D; Remote (R) or Manual (M)&lt;/li&gt;&lt;li&gt;Second Character &#x3D; Mode: T &#x3D; telephone W &#x3D; wireless P &#x3D; powerline I &#x3D; infra-red G &#x3D; galvanic V &#x3D; visual &lt;/li&gt;&lt;li&gt;Third Character &#x3D; Frequency of Scheduled Meter Readings: 1 &#x3D; Twelve times per year 2 &#x3D; Six times per year 3 &#x3D; Four times per year D &#x3D; Daily or weekly&lt;/li&gt;&lt;li&gt;Optional Fourth Character &#x3D; to identify what interval length the meter is capable of reading. This includes five, 15 and 30 minute granularity as the following: A – 5 minute B – 15 minute C – 30 minute D – Cannot convert to 5 minute (i.e. due to metering installation de-energised) M - Manually Read Accumulation Meter&lt;/li&gt;&lt;/ul&gt; For example, &lt;ul&gt;&lt;li&gt;MV3 &#x3D; Manual, Visual, Quarterly&lt;/li&gt; &lt;li&gt;MV3M &#x3D; Manual, Visual, Quarterly, Manually Read Accumulation Meter&lt;/li&gt; &lt;li&gt;RWDC &#x3D; Remote, Wireless, Daily, 30 minutes interval&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Code to denote the method and frequency of Meter Reading. The value is formatted as follows: &lt;ul&gt;&lt;li&gt;First Character &#x3D; Remote (R) or Manual (M)&lt;/li&gt;&lt;li&gt;Second Character &#x3D; Mode: T &#x3D; telephone W &#x3D; wireless P &#x3D; powerline I &#x3D; infra-red G &#x3D; galvanic V &#x3D; visual &lt;/li&gt;&lt;li&gt;Third Character &#x3D; Frequency of Scheduled Meter Readings: 1 &#x3D; Twelve times per year 2 &#x3D; Six times per year 3 &#x3D; Four times per year D &#x3D; Daily or weekly&lt;/li&gt;&lt;li&gt;Optional Fourth Character &#x3D; to identify what interval length the meter is capable of reading. This includes five, 15 and 30 minute granularity as the following: A – 5 minute B – 15 minute C – 30 minute D – Cannot convert to 5 minute (i.e. due to metering installation de-energised) M - Manually Read Accumulation Meter&lt;/li&gt;&lt;/ul&gt; For example, &lt;ul&gt;&lt;li&gt;MV3 &#x3D; Manual, Visual, Quarterly&lt;/li&gt; &lt;li&gt;MV3M &#x3D; Manual, Visual, Quarterly, Manually Read Accumulation Meter&lt;/li&gt; &lt;li&gt;RWDC &#x3D; Remote, Wireless, Daily, 30 minutes interval&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name="readType", EmitDefaultValue=false)]
        public string ReadType { get; set; }

        /// <summary>
        /// This date is the next scheduled meter read date (NSRD) if a manual Meter Reading is required
        /// </summary>
        /// <value>This date is the next scheduled meter read date (NSRD) if a manual Meter Reading is required</value>
        [DataMember(Name="nextScheduledReadDate", EmitDefaultValue=false)]
        public string NextScheduledReadDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetailMetersSpecifications {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InstallationType: ").Append(InstallationType).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ReadType: ").Append(ReadType).Append("\n");
            sb.Append("  NextScheduledReadDate: ").Append(NextScheduledReadDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyServicePointDetailMetersSpecifications)obj);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetailMetersSpecifications instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyServicePointDetailMetersSpecifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetailMetersSpecifications other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    InstallationType == other.InstallationType ||
                    
                    InstallationType.Equals(other.InstallationType)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    ReadType == other.ReadType ||
                    ReadType != null &&
                    ReadType.Equals(other.ReadType)
                ) && 
                (
                    NextScheduledReadDate == other.NextScheduledReadDate ||
                    NextScheduledReadDate != null &&
                    NextScheduledReadDate.Equals(other.NextScheduledReadDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + InstallationType.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (ReadType != null)
                    hashCode = hashCode * 59 + ReadType.GetHashCode();
                    if (NextScheduledReadDate != null)
                    hashCode = hashCode * 59 + NextScheduledReadDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyServicePointDetailMetersSpecifications left, EnergyServicePointDetailMetersSpecifications right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyServicePointDetailMetersSpecifications left, EnergyServicePointDetailMetersSpecifications right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
