/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyBillingPaymentTransaction : IEquatable<EnergyBillingPaymentTransaction>
    {
        /// <summary>
        /// The amount paid
        /// </summary>
        /// <value>The amount paid</value>
        [Required]
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }


        /// <summary>
        /// The method of payment
        /// </summary>
        /// <value>The method of payment</value>
        [TypeConverter(typeof(CustomEnumConverter<MethodEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum DIRECTDEBITEnum for DIRECT_DEBIT
            /// </summary>
            [EnumMember(Value = "DIRECT_DEBIT")]
            DIRECTDEBITEnum = 1,
            
            /// <summary>
            /// Enum CARDEnum for CARD
            /// </summary>
            [EnumMember(Value = "CARD")]
            CARDEnum = 2,
            
            /// <summary>
            /// Enum TRANSFEREnum for TRANSFER
            /// </summary>
            [EnumMember(Value = "TRANSFER")]
            TRANSFEREnum = 3,
            
            /// <summary>
            /// Enum BPAYEnum for BPAY
            /// </summary>
            [EnumMember(Value = "BPAY")]
            BPAYEnum = 4,
            
            /// <summary>
            /// Enum CASHEnum for CASH
            /// </summary>
            [EnumMember(Value = "CASH")]
            CASHEnum = 5,
            
            /// <summary>
            /// Enum CHEQUEEnum for CHEQUE
            /// </summary>
            [EnumMember(Value = "CHEQUE")]
            CHEQUEEnum = 6,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 7
        }

        /// <summary>
        /// The method of payment
        /// </summary>
        /// <value>The method of payment</value>
        [Required]
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingPaymentTransaction {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyBillingPaymentTransaction)obj);
        }

        /// <summary>
        /// Returns true if EnergyBillingPaymentTransaction instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyBillingPaymentTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingPaymentTransaction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Method == other.Method ||
                    
                    Method.Equals(other.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Method.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyBillingPaymentTransaction left, EnergyBillingPaymentTransaction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyBillingPaymentTransaction left, EnergyBillingPaymentTransaction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
