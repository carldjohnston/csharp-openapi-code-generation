/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyDerRecordAcConnections : IEquatable<EnergyDerRecordAcConnections>
    {
        /// <summary>
        /// AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards
        /// </summary>
        /// <value>AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards</value>
        [Required]
        [DataMember(Name="connectionIdentifier", EmitDefaultValue=false)]
        public decimal ConnectionIdentifier { get; set; }

        /// <summary>
        /// Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes
        /// </summary>
        /// <value>Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes</value>
        [Required]
        [DataMember(Name="count", EmitDefaultValue=false)]
        public string Count { get; set; }


        /// <summary>
        /// Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.
        /// </summary>
        /// <value>Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.</value>
        [TypeConverter(typeof(CustomEnumConverter<EquipmentTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EquipmentTypeEnum
        {
            
            /// <summary>
            /// Enum INVERTEREnum for INVERTER
            /// </summary>
            [EnumMember(Value = "INVERTER")]
            INVERTEREnum = 1,
            
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 2
        }

        /// <summary>
        /// Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.
        /// </summary>
        /// <value>Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.</value>
        [DataMember(Name="equipmentType", EmitDefaultValue=false)]
        public EquipmentTypeEnum EquipmentType { get; set; }

        /// <summary>
        /// The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name="manufacturerName", EmitDefaultValue=false)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// The inverter series. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The inverter series. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name="inverterSeries", EmitDefaultValue=false)]
        public string InverterSeries { get; set; }

        /// <summary>
        /// The inverter model number. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The inverter model number. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name="inverterModelNumber", EmitDefaultValue=false)]
        public string InverterModelNumber { get; set; }

        /// <summary>
        /// The date that the DER installation is commissioned
        /// </summary>
        /// <value>The date that the DER installation is commissioned</value>
        [Required]
        [DataMember(Name="commissioningDate", EmitDefaultValue=false)]
        public string CommissioningDate { get; set; }


        /// <summary>
        /// Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 1,
            
            /// <summary>
            /// Enum INACTIVEEnum for INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVEEnum = 2,
            
            /// <summary>
            /// Enum DECOMMISSIONEDEnum for DECOMMISSIONED
            /// </summary>
            [EnumMember(Value = "DECOMMISSIONED")]
            DECOMMISSIONEDEnum = 3
        }

        /// <summary>
        /// Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name="inverterDeviceCapacity", EmitDefaultValue=false)]
        public decimal InverterDeviceCapacity { get; set; }

        /// <summary>
        /// Gets or Sets DerDevices
        /// </summary>
        [Required]
        [DataMember(Name="derDevices", EmitDefaultValue=false)]
        public List<EnergyDerRecordDerDevices> DerDevices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecordAcConnections {\n");
            sb.Append("  ConnectionIdentifier: ").Append(ConnectionIdentifier).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  EquipmentType: ").Append(EquipmentType).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  InverterSeries: ").Append(InverterSeries).Append("\n");
            sb.Append("  InverterModelNumber: ").Append(InverterModelNumber).Append("\n");
            sb.Append("  CommissioningDate: ").Append(CommissioningDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InverterDeviceCapacity: ").Append(InverterDeviceCapacity).Append("\n");
            sb.Append("  DerDevices: ").Append(DerDevices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyDerRecordAcConnections)obj);
        }

        /// <summary>
        /// Returns true if EnergyDerRecordAcConnections instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyDerRecordAcConnections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecordAcConnections other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConnectionIdentifier == other.ConnectionIdentifier ||
                    
                    ConnectionIdentifier.Equals(other.ConnectionIdentifier)
                ) && 
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                ) && 
                (
                    EquipmentType == other.EquipmentType ||
                    
                    EquipmentType.Equals(other.EquipmentType)
                ) && 
                (
                    ManufacturerName == other.ManufacturerName ||
                    ManufacturerName != null &&
                    ManufacturerName.Equals(other.ManufacturerName)
                ) && 
                (
                    InverterSeries == other.InverterSeries ||
                    InverterSeries != null &&
                    InverterSeries.Equals(other.InverterSeries)
                ) && 
                (
                    InverterModelNumber == other.InverterModelNumber ||
                    InverterModelNumber != null &&
                    InverterModelNumber.Equals(other.InverterModelNumber)
                ) && 
                (
                    CommissioningDate == other.CommissioningDate ||
                    CommissioningDate != null &&
                    CommissioningDate.Equals(other.CommissioningDate)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    InverterDeviceCapacity == other.InverterDeviceCapacity ||
                    
                    InverterDeviceCapacity.Equals(other.InverterDeviceCapacity)
                ) && 
                (
                    DerDevices == other.DerDevices ||
                    DerDevices != null &&
                    other.DerDevices != null &&
                    DerDevices.SequenceEqual(other.DerDevices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ConnectionIdentifier.GetHashCode();
                    if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    
                    hashCode = hashCode * 59 + EquipmentType.GetHashCode();
                    if (ManufacturerName != null)
                    hashCode = hashCode * 59 + ManufacturerName.GetHashCode();
                    if (InverterSeries != null)
                    hashCode = hashCode * 59 + InverterSeries.GetHashCode();
                    if (InverterModelNumber != null)
                    hashCode = hashCode * 59 + InverterModelNumber.GetHashCode();
                    if (CommissioningDate != null)
                    hashCode = hashCode * 59 + CommissioningDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + InverterDeviceCapacity.GetHashCode();
                    if (DerDevices != null)
                    hashCode = hashCode * 59 + DerDevices.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyDerRecordAcConnections left, EnergyDerRecordAcConnections right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyDerRecordAcConnections left, EnergyDerRecordAcConnections right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
