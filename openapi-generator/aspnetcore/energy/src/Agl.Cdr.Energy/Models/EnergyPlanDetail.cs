/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnergyPlanDetail : IEquatable<EnergyPlanDetail>
    {
        /// <summary>
        /// The ID of the specific plan
        /// </summary>
        /// <value>The ID of the specific plan</value>
        [Required]
        [DataMember(Name="planId", EmitDefaultValue=false)]
        public string PlanId { get; set; }

        /// <summary>
        /// The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate
        /// </summary>
        /// <value>The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate</value>
        [DataMember(Name="effectiveFrom", EmitDefaultValue=false)]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans
        /// </summary>
        /// <value>The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans</value>
        [DataMember(Name="effectiveTo", EmitDefaultValue=false)]
        public string EffectiveTo { get; set; }

        /// <summary>
        /// The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered)
        /// </summary>
        /// <value>The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered)</value>
        [Required]
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// The display name of the plan
        /// </summary>
        /// <value>The display name of the plan</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description of the plan
        /// </summary>
        /// <value>A description of the plan</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// The type of the plan
        /// </summary>
        /// <value>The type of the plan</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum STANDINGEnum for STANDING
            /// </summary>
            [EnumMember(Value = "STANDING")]
            STANDINGEnum = 1,
            
            /// <summary>
            /// Enum MARKETEnum for MARKET
            /// </summary>
            [EnumMember(Value = "MARKET")]
            MARKETEnum = 2,
            
            /// <summary>
            /// Enum REGULATEDEnum for REGULATED
            /// </summary>
            [EnumMember(Value = "REGULATED")]
            REGULATEDEnum = 3
        }

        /// <summary>
        /// The type of the plan
        /// </summary>
        /// <value>The type of the plan</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// The fuel types covered by the plan
        /// </summary>
        /// <value>The fuel types covered by the plan</value>
        [TypeConverter(typeof(CustomEnumConverter<FuelTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FuelTypeEnum
        {
            
            /// <summary>
            /// Enum ELECTRICITYEnum for ELECTRICITY
            /// </summary>
            [EnumMember(Value = "ELECTRICITY")]
            ELECTRICITYEnum = 1,
            
            /// <summary>
            /// Enum GASEnum for GAS
            /// </summary>
            [EnumMember(Value = "GAS")]
            GASEnum = 2,
            
            /// <summary>
            /// Enum DUALEnum for DUAL
            /// </summary>
            [EnumMember(Value = "DUAL")]
            DUALEnum = 3
        }

        /// <summary>
        /// The fuel types covered by the plan
        /// </summary>
        /// <value>The fuel types covered by the plan</value>
        [Required]
        [DataMember(Name="fuelType", EmitDefaultValue=false)]
        public FuelTypeEnum FuelType { get; set; }

        /// <summary>
        /// The ID of the brand under which this plan is offered
        /// </summary>
        /// <value>The ID of the brand under which this plan is offered</value>
        [Required]
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// The display name of the brand under which this plan is offered
        /// </summary>
        /// <value>The display name of the brand under which this plan is offered</value>
        [Required]
        [DataMember(Name="brandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// A link to an application web page where this plan can be applied for
        /// </summary>
        /// <value>A link to an application web page where this plan can be applied for</value>
        [DataMember(Name="applicationUri", EmitDefaultValue=false)]
        public string ApplicationUri { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public EnergyPlanAdditionalInformation AdditionalInformation { get; set; }


        /// <summary>
        /// The type of customer that the plan is offered to.  If absent then the plan is available to all customers
        /// </summary>
        /// <value>The type of customer that the plan is offered to.  If absent then the plan is available to all customers</value>
        [TypeConverter(typeof(CustomEnumConverter<CustomerTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CustomerTypeEnum
        {
            
            /// <summary>
            /// Enum RESIDENTIALEnum for RESIDENTIAL
            /// </summary>
            [EnumMember(Value = "RESIDENTIAL")]
            RESIDENTIALEnum = 1,
            
            /// <summary>
            /// Enum BUSINESSEnum for BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESSEnum = 2
        }

        /// <summary>
        /// The type of customer that the plan is offered to.  If absent then the plan is available to all customers
        /// </summary>
        /// <value>The type of customer that the plan is offered to.  If absent then the plan is available to all customers</value>
        [DataMember(Name="customerType", EmitDefaultValue=false)]
        public CustomerTypeEnum CustomerType { get; set; }

        /// <summary>
        /// Gets or Sets Geography
        /// </summary>
        [DataMember(Name="geography", EmitDefaultValue=false)]
        public EnergyPlanGeography Geography { get; set; }

        /// <summary>
        /// Charges for metering included in the plan
        /// </summary>
        /// <value>Charges for metering included in the plan</value>
        [DataMember(Name="meteringCharges", EmitDefaultValue=false)]
        public List<EnergyPlanDetailAllOfMeteringCharges> MeteringCharges { get; set; }

        /// <summary>
        /// Gets or Sets GasContract
        /// </summary>
        [DataMember(Name="gasContract", EmitDefaultValue=false)]
        public EnergyPlanContractFull GasContract { get; set; }

        /// <summary>
        /// Gets or Sets ElectricityContract
        /// </summary>
        [DataMember(Name="electricityContract", EmitDefaultValue=false)]
        public EnergyPlanContractFull ElectricityContract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanDetail {\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveTo: ").Append(EffectiveTo).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  ApplicationUri: ").Append(ApplicationUri).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            sb.Append("  Geography: ").Append(Geography).Append("\n");
            sb.Append("  MeteringCharges: ").Append(MeteringCharges).Append("\n");
            sb.Append("  GasContract: ").Append(GasContract).Append("\n");
            sb.Append("  ElectricityContract: ").Append(ElectricityContract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyPlanDetail)obj);
        }

        /// <summary>
        /// Returns true if EnergyPlanDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyPlanDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PlanId == other.PlanId ||
                    PlanId != null &&
                    PlanId.Equals(other.PlanId)
                ) && 
                (
                    EffectiveFrom == other.EffectiveFrom ||
                    EffectiveFrom != null &&
                    EffectiveFrom.Equals(other.EffectiveFrom)
                ) && 
                (
                    EffectiveTo == other.EffectiveTo ||
                    EffectiveTo != null &&
                    EffectiveTo.Equals(other.EffectiveTo)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    LastUpdated != null &&
                    LastUpdated.Equals(other.LastUpdated)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    FuelType == other.FuelType ||
                    
                    FuelType.Equals(other.FuelType)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.Equals(other.BrandName)
                ) && 
                (
                    ApplicationUri == other.ApplicationUri ||
                    ApplicationUri != null &&
                    ApplicationUri.Equals(other.ApplicationUri)
                ) && 
                (
                    AdditionalInformation == other.AdditionalInformation ||
                    AdditionalInformation != null &&
                    AdditionalInformation.Equals(other.AdditionalInformation)
                ) && 
                (
                    CustomerType == other.CustomerType ||
                    
                    CustomerType.Equals(other.CustomerType)
                ) && 
                (
                    Geography == other.Geography ||
                    Geography != null &&
                    Geography.Equals(other.Geography)
                ) && 
                (
                    MeteringCharges == other.MeteringCharges ||
                    MeteringCharges != null &&
                    other.MeteringCharges != null &&
                    MeteringCharges.SequenceEqual(other.MeteringCharges)
                ) && 
                (
                    GasContract == other.GasContract ||
                    GasContract != null &&
                    GasContract.Equals(other.GasContract)
                ) && 
                (
                    ElectricityContract == other.ElectricityContract ||
                    ElectricityContract != null &&
                    ElectricityContract.Equals(other.ElectricityContract)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PlanId != null)
                    hashCode = hashCode * 59 + PlanId.GetHashCode();
                    if (EffectiveFrom != null)
                    hashCode = hashCode * 59 + EffectiveFrom.GetHashCode();
                    if (EffectiveTo != null)
                    hashCode = hashCode * 59 + EffectiveTo.GetHashCode();
                    if (LastUpdated != null)
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + FuelType.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    if (ApplicationUri != null)
                    hashCode = hashCode * 59 + ApplicationUri.GetHashCode();
                    if (AdditionalInformation != null)
                    hashCode = hashCode * 59 + AdditionalInformation.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomerType.GetHashCode();
                    if (Geography != null)
                    hashCode = hashCode * 59 + Geography.GetHashCode();
                    if (MeteringCharges != null)
                    hashCode = hashCode * 59 + MeteringCharges.GetHashCode();
                    if (GasContract != null)
                    hashCode = hashCode * 59 + GasContract.GetHashCode();
                    if (ElectricityContract != null)
                    hashCode = hashCode * 59 + ElectricityContract.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyPlanDetail left, EnergyPlanDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyPlanDetail left, EnergyPlanDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
