/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Agl.Cdr.Energy.Converters;

namespace Agl.Cdr.Energy.Models
{ 
    /// <summary>
    /// Object contain charges and credits related to electricity usage
    /// </summary>
    [DataContract]
    public partial class EnergyInvoiceAccountCharges : IEquatable<EnergyInvoiceAccountCharges>
    {
        /// <summary>
        /// The aggregate total of account level charges for the period covered by the invoice
        /// </summary>
        /// <value>The aggregate total of account level charges for the period covered by the invoice</value>
        [Required]
        [DataMember(Name="totalCharges", EmitDefaultValue=false)]
        public string TotalCharges { get; set; }

        /// <summary>
        /// The aggregate total of account level discounts or credits for the period covered by the invoice
        /// </summary>
        /// <value>The aggregate total of account level discounts or credits for the period covered by the invoice</value>
        [Required]
        [DataMember(Name="totalDiscounts", EmitDefaultValue=false)]
        public string TotalDiscounts { get; set; }

        /// <summary>
        /// The total GST for all account level charges.  If absent then zero is assumed
        /// </summary>
        /// <value>The total GST for all account level charges.  If absent then zero is assumed</value>
        [DataMember(Name="totalGst", EmitDefaultValue=false)]
        public string TotalGst { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyInvoiceAccountCharges {\n");
            sb.Append("  TotalCharges: ").Append(TotalCharges).Append("\n");
            sb.Append("  TotalDiscounts: ").Append(TotalDiscounts).Append("\n");
            sb.Append("  TotalGst: ").Append(TotalGst).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnergyInvoiceAccountCharges)obj);
        }

        /// <summary>
        /// Returns true if EnergyInvoiceAccountCharges instances are equal
        /// </summary>
        /// <param name="other">Instance of EnergyInvoiceAccountCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyInvoiceAccountCharges other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TotalCharges == other.TotalCharges ||
                    TotalCharges != null &&
                    TotalCharges.Equals(other.TotalCharges)
                ) && 
                (
                    TotalDiscounts == other.TotalDiscounts ||
                    TotalDiscounts != null &&
                    TotalDiscounts.Equals(other.TotalDiscounts)
                ) && 
                (
                    TotalGst == other.TotalGst ||
                    TotalGst != null &&
                    TotalGst.Equals(other.TotalGst)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TotalCharges != null)
                    hashCode = hashCode * 59 + TotalCharges.GetHashCode();
                    if (TotalDiscounts != null)
                    hashCode = hashCode * 59 + TotalDiscounts.GetHashCode();
                    if (TotalGst != null)
                    hashCode = hashCode * 59 + TotalGst.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnergyInvoiceAccountCharges left, EnergyInvoiceAccountCharges right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnergyInvoiceAccountCharges left, EnergyInvoiceAccountCharges right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
