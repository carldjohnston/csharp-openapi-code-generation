/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// CommonEmailAddress
    /// </summary>
    [DataContract(Name = "CommonEmailAddress")]
    public partial class CommonEmailAddress : IEquatable<CommonEmailAddress>, IValidatableObject
    {
        /// <summary>
        /// The purpose for the email, as specified by the customer (Enumeration)
        /// </summary>
        /// <value>The purpose for the email, as specified by the customer (Enumeration)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum HOME for value: HOME
            /// </summary>
            [EnumMember(Value = "HOME")]
            HOME = 1,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 2,

            /// <summary>
            /// Enum UNSPECIFIED for value: UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "UNSPECIFIED")]
            UNSPECIFIED = 3,

            /// <summary>
            /// Enum WORK for value: WORK
            /// </summary>
            [EnumMember(Value = "WORK")]
            WORK = 4

        }


        /// <summary>
        /// The purpose for the email, as specified by the customer (Enumeration)
        /// </summary>
        /// <value>The purpose for the email, as specified by the customer (Enumeration)</value>
        [DataMember(Name = "purpose", IsRequired = true, EmitDefaultValue = false)]
        public PurposeEnum Purpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonEmailAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonEmailAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonEmailAddress" /> class.
        /// </summary>
        /// <param name="isPreferred">May be true for one and only one email record in the collection. Denotes the default email address.</param>
        /// <param name="purpose">The purpose for the email, as specified by the customer (Enumeration) (required).</param>
        /// <param name="address">A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt) (required).</param>
        public CommonEmailAddress(bool isPreferred = default(bool), PurposeEnum purpose = default(PurposeEnum), string address = default(string))
        {
            this.Purpose = purpose;
            // to ensure "address" is required (not null)
            this.Address = address ?? throw new ArgumentNullException("address is a required property for CommonEmailAddress and cannot be null");
            this.IsPreferred = isPreferred;
        }

        /// <summary>
        /// May be true for one and only one email record in the collection. Denotes the default email address
        /// </summary>
        /// <value>May be true for one and only one email record in the collection. Denotes the default email address</value>
        [DataMember(Name = "isPreferred", EmitDefaultValue = true)]
        public bool IsPreferred { get; set; }

        /// <summary>
        /// A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)
        /// </summary>
        /// <value>A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonEmailAddress {\n");
            sb.Append("  IsPreferred: ").Append(IsPreferred).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonEmailAddress);
        }

        /// <summary>
        /// Returns true if CommonEmailAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonEmailAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonEmailAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsPreferred == input.IsPreferred ||
                    this.IsPreferred.Equals(input.IsPreferred)
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    this.Purpose.Equals(input.Purpose)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsPreferred.GetHashCode();
                hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
