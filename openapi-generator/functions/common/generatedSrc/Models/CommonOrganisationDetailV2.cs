/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// CommonOrganisationDetailV2
    /// </summary>
    [DataContract(Name = "CommonOrganisationDetailV2")]
    public partial class CommonOrganisationDetailV2 : IEquatable<CommonOrganisationDetailV2>, IValidatableObject
    {
        /// <summary>
        /// The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if &#x60;&#x60;industryCode&#x60;&#x60; is also supplied. If &#x60;&#x60;industryCode&#x60;&#x60; is supplied but &#x60;&#x60;industryCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSIC_1292.0_2006_V2.0&#x60;&#x60;
        /// </summary>
        /// <value>The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if &#x60;&#x60;industryCode&#x60;&#x60; is also supplied. If &#x60;&#x60;industryCode&#x60;&#x60; is supplied but &#x60;&#x60;industryCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSIC_1292.0_2006_V2.0&#x60;&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndustryCodeVersionEnum
        {
            /// <summary>
            /// Enum V10 for value: ANZSIC_1292.0_2006_V1.0
            /// </summary>
            [EnumMember(Value = "ANZSIC_1292.0_2006_V1.0")]
            V10 = 1,

            /// <summary>
            /// Enum V20 for value: ANZSIC_1292.0_2006_V2.0
            /// </summary>
            [EnumMember(Value = "ANZSIC_1292.0_2006_V2.0")]
            V20 = 2

        }


        /// <summary>
        /// The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if &#x60;&#x60;industryCode&#x60;&#x60; is also supplied. If &#x60;&#x60;industryCode&#x60;&#x60; is supplied but &#x60;&#x60;industryCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSIC_1292.0_2006_V2.0&#x60;&#x60;
        /// </summary>
        /// <value>The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if &#x60;&#x60;industryCode&#x60;&#x60; is also supplied. If &#x60;&#x60;industryCode&#x60;&#x60; is supplied but &#x60;&#x60;industryCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSIC_1292.0_2006_V2.0&#x60;&#x60;</value>
        [DataMember(Name = "industryCodeVersion", EmitDefaultValue = false)]
        public IndustryCodeVersionEnum? IndustryCodeVersion { get; set; }
        /// <summary>
        /// Legal organisation type
        /// </summary>
        /// <value>Legal organisation type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrganisationTypeEnum
        {
            /// <summary>
            /// Enum COMPANY for value: COMPANY
            /// </summary>
            [EnumMember(Value = "COMPANY")]
            COMPANY = 1,

            /// <summary>
            /// Enum GOVERNMENTENTITY for value: GOVERNMENT_ENTITY
            /// </summary>
            [EnumMember(Value = "GOVERNMENT_ENTITY")]
            GOVERNMENTENTITY = 2,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 3,

            /// <summary>
            /// Enum PARTNERSHIP for value: PARTNERSHIP
            /// </summary>
            [EnumMember(Value = "PARTNERSHIP")]
            PARTNERSHIP = 4,

            /// <summary>
            /// Enum SOLETRADER for value: SOLE_TRADER
            /// </summary>
            [EnumMember(Value = "SOLE_TRADER")]
            SOLETRADER = 5,

            /// <summary>
            /// Enum TRUST for value: TRUST
            /// </summary>
            [EnumMember(Value = "TRUST")]
            TRUST = 6

        }


        /// <summary>
        /// Legal organisation type
        /// </summary>
        /// <value>Legal organisation type</value>
        [DataMember(Name = "organisationType", IsRequired = true, EmitDefaultValue = false)]
        public OrganisationTypeEnum OrganisationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOrganisationDetailV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonOrganisationDetailV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOrganisationDetailV2" /> class.
        /// </summary>
        /// <param name="lastUpdateTime">The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data.</param>
        /// <param name="agentFirstName">The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field.</param>
        /// <param name="agentLastName">The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field (required).</param>
        /// <param name="agentRole">The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known (required).</param>
        /// <param name="businessName">Name of the organisation (required).</param>
        /// <param name="legalName">Legal name, if different to the business name.</param>
        /// <param name="shortName">Short name used for communication, if different to the business name.</param>
        /// <param name="abn">Australian Business Number for the organisation.</param>
        /// <param name="acn">Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type.</param>
        /// <param name="isACNCRegistered">True if registered with the ACNC.  False if not. Absent or null if not confirmed..</param>
        /// <param name="industryCode">A valid [ANZSIC](http://www.abs.gov.au/ANZSIC) code for the organisation. If the industry code held by the data holder is not one of the supported [ANZSIC](http://www.abs.gov.au/ANZSIC) versions, then it must not be supplied..</param>
        /// <param name="industryCodeVersion">The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if &#x60;&#x60;industryCode&#x60;&#x60; is also supplied. If &#x60;&#x60;industryCode&#x60;&#x60; is supplied but &#x60;&#x60;industryCodeVersion&#x60;&#x60; is absent, default is &#x60;&#x60;ANZSIC_1292.0_2006_V2.0&#x60;&#x60; (default to IndustryCodeVersionEnum.V20).</param>
        /// <param name="organisationType">Legal organisation type (required).</param>
        /// <param name="registeredCountry">Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent.</param>
        /// <param name="establishmentDate">The date the organisation described was established.</param>
        /// <param name="physicalAddresses">Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail (required).</param>
        public CommonOrganisationDetailV2(string lastUpdateTime = default(string), string agentFirstName = default(string), string agentLastName = default(string), string agentRole = default(string), string businessName = default(string), string legalName = default(string), string shortName = default(string), string abn = default(string), string acn = default(string), bool isACNCRegistered = default(bool), string industryCode = default(string), IndustryCodeVersionEnum? industryCodeVersion = IndustryCodeVersionEnum.V20, OrganisationTypeEnum organisationType = default(OrganisationTypeEnum), string registeredCountry = default(string), string establishmentDate = default(string), List<CommonPhysicalAddressWithPurpose2> physicalAddresses = default(List<CommonPhysicalAddressWithPurpose2>))
        {
            // to ensure "agentLastName" is required (not null)
            this.AgentLastName = agentLastName ?? throw new ArgumentNullException("agentLastName is a required property for CommonOrganisationDetailV2 and cannot be null");
            // to ensure "agentRole" is required (not null)
            this.AgentRole = agentRole ?? throw new ArgumentNullException("agentRole is a required property for CommonOrganisationDetailV2 and cannot be null");
            // to ensure "businessName" is required (not null)
            this.BusinessName = businessName ?? throw new ArgumentNullException("businessName is a required property for CommonOrganisationDetailV2 and cannot be null");
            this.OrganisationType = organisationType;
            // to ensure "physicalAddresses" is required (not null)
            this.PhysicalAddresses = physicalAddresses ?? throw new ArgumentNullException("physicalAddresses is a required property for CommonOrganisationDetailV2 and cannot be null");
            this.LastUpdateTime = lastUpdateTime;
            this.AgentFirstName = agentFirstName;
            this.LegalName = legalName;
            this.ShortName = shortName;
            this.Abn = abn;
            this.Acn = acn;
            this.IsACNCRegistered = isACNCRegistered;
            this.IndustryCode = industryCode;
            this.IndustryCodeVersion = industryCodeVersion;
            this.RegisteredCountry = registeredCountry;
            this.EstablishmentDate = establishmentDate;
        }

        /// <summary>
        /// The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data
        /// </summary>
        /// <value>The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data</value>
        [DataMember(Name = "lastUpdateTime", EmitDefaultValue = false)]
        public string LastUpdateTime { get; set; }

        /// <summary>
        /// The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field
        /// </summary>
        /// <value>The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field</value>
        [DataMember(Name = "agentFirstName", EmitDefaultValue = false)]
        public string AgentFirstName { get; set; }

        /// <summary>
        /// The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field
        /// </summary>
        /// <value>The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field</value>
        [DataMember(Name = "agentLastName", IsRequired = true, EmitDefaultValue = false)]
        public string AgentLastName { get; set; }

        /// <summary>
        /// The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known
        /// </summary>
        /// <value>The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known</value>
        [DataMember(Name = "agentRole", IsRequired = true, EmitDefaultValue = false)]
        public string AgentRole { get; set; }

        /// <summary>
        /// Name of the organisation
        /// </summary>
        /// <value>Name of the organisation</value>
        [DataMember(Name = "businessName", IsRequired = true, EmitDefaultValue = false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Legal name, if different to the business name
        /// </summary>
        /// <value>Legal name, if different to the business name</value>
        [DataMember(Name = "legalName", EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Short name used for communication, if different to the business name
        /// </summary>
        /// <value>Short name used for communication, if different to the business name</value>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Australian Business Number for the organisation
        /// </summary>
        /// <value>Australian Business Number for the organisation</value>
        [DataMember(Name = "abn", EmitDefaultValue = false)]
        public string Abn { get; set; }

        /// <summary>
        /// Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type
        /// </summary>
        /// <value>Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type</value>
        [DataMember(Name = "acn", EmitDefaultValue = false)]
        public string Acn { get; set; }

        /// <summary>
        /// True if registered with the ACNC.  False if not. Absent or null if not confirmed.
        /// </summary>
        /// <value>True if registered with the ACNC.  False if not. Absent or null if not confirmed.</value>
        [DataMember(Name = "isACNCRegistered", EmitDefaultValue = true)]
        public bool IsACNCRegistered { get; set; }

        /// <summary>
        /// A valid [ANZSIC](http://www.abs.gov.au/ANZSIC) code for the organisation. If the industry code held by the data holder is not one of the supported [ANZSIC](http://www.abs.gov.au/ANZSIC) versions, then it must not be supplied.
        /// </summary>
        /// <value>A valid [ANZSIC](http://www.abs.gov.au/ANZSIC) code for the organisation. If the industry code held by the data holder is not one of the supported [ANZSIC](http://www.abs.gov.au/ANZSIC) versions, then it must not be supplied.</value>
        [DataMember(Name = "industryCode", EmitDefaultValue = false)]
        public string IndustryCode { get; set; }

        /// <summary>
        /// Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent
        /// </summary>
        /// <value>Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent</value>
        [DataMember(Name = "registeredCountry", EmitDefaultValue = false)]
        public string RegisteredCountry { get; set; }

        /// <summary>
        /// The date the organisation described was established
        /// </summary>
        /// <value>The date the organisation described was established</value>
        [DataMember(Name = "establishmentDate", EmitDefaultValue = false)]
        public string EstablishmentDate { get; set; }

        /// <summary>
        /// Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
        /// </summary>
        /// <value>Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail</value>
        [DataMember(Name = "physicalAddresses", IsRequired = true, EmitDefaultValue = false)]
        public List<CommonPhysicalAddressWithPurpose2> PhysicalAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonOrganisationDetailV2 {\n");
            sb.Append("  LastUpdateTime: ").Append(LastUpdateTime).Append("\n");
            sb.Append("  AgentFirstName: ").Append(AgentFirstName).Append("\n");
            sb.Append("  AgentLastName: ").Append(AgentLastName).Append("\n");
            sb.Append("  AgentRole: ").Append(AgentRole).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Abn: ").Append(Abn).Append("\n");
            sb.Append("  Acn: ").Append(Acn).Append("\n");
            sb.Append("  IsACNCRegistered: ").Append(IsACNCRegistered).Append("\n");
            sb.Append("  IndustryCode: ").Append(IndustryCode).Append("\n");
            sb.Append("  IndustryCodeVersion: ").Append(IndustryCodeVersion).Append("\n");
            sb.Append("  OrganisationType: ").Append(OrganisationType).Append("\n");
            sb.Append("  RegisteredCountry: ").Append(RegisteredCountry).Append("\n");
            sb.Append("  EstablishmentDate: ").Append(EstablishmentDate).Append("\n");
            sb.Append("  PhysicalAddresses: ").Append(PhysicalAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonOrganisationDetailV2);
        }

        /// <summary>
        /// Returns true if CommonOrganisationDetailV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonOrganisationDetailV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonOrganisationDetailV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastUpdateTime == input.LastUpdateTime ||
                    (this.LastUpdateTime != null &&
                    this.LastUpdateTime.Equals(input.LastUpdateTime))
                ) && 
                (
                    this.AgentFirstName == input.AgentFirstName ||
                    (this.AgentFirstName != null &&
                    this.AgentFirstName.Equals(input.AgentFirstName))
                ) && 
                (
                    this.AgentLastName == input.AgentLastName ||
                    (this.AgentLastName != null &&
                    this.AgentLastName.Equals(input.AgentLastName))
                ) && 
                (
                    this.AgentRole == input.AgentRole ||
                    (this.AgentRole != null &&
                    this.AgentRole.Equals(input.AgentRole))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Abn == input.Abn ||
                    (this.Abn != null &&
                    this.Abn.Equals(input.Abn))
                ) && 
                (
                    this.Acn == input.Acn ||
                    (this.Acn != null &&
                    this.Acn.Equals(input.Acn))
                ) && 
                (
                    this.IsACNCRegistered == input.IsACNCRegistered ||
                    this.IsACNCRegistered.Equals(input.IsACNCRegistered)
                ) && 
                (
                    this.IndustryCode == input.IndustryCode ||
                    (this.IndustryCode != null &&
                    this.IndustryCode.Equals(input.IndustryCode))
                ) && 
                (
                    this.IndustryCodeVersion == input.IndustryCodeVersion ||
                    this.IndustryCodeVersion.Equals(input.IndustryCodeVersion)
                ) && 
                (
                    this.OrganisationType == input.OrganisationType ||
                    this.OrganisationType.Equals(input.OrganisationType)
                ) && 
                (
                    this.RegisteredCountry == input.RegisteredCountry ||
                    (this.RegisteredCountry != null &&
                    this.RegisteredCountry.Equals(input.RegisteredCountry))
                ) && 
                (
                    this.EstablishmentDate == input.EstablishmentDate ||
                    (this.EstablishmentDate != null &&
                    this.EstablishmentDate.Equals(input.EstablishmentDate))
                ) && 
                (
                    this.PhysicalAddresses == input.PhysicalAddresses ||
                    this.PhysicalAddresses != null &&
                    input.PhysicalAddresses != null &&
                    this.PhysicalAddresses.SequenceEqual(input.PhysicalAddresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastUpdateTime != null)
                    hashCode = hashCode * 59 + this.LastUpdateTime.GetHashCode();
                if (this.AgentFirstName != null)
                    hashCode = hashCode * 59 + this.AgentFirstName.GetHashCode();
                if (this.AgentLastName != null)
                    hashCode = hashCode * 59 + this.AgentLastName.GetHashCode();
                if (this.AgentRole != null)
                    hashCode = hashCode * 59 + this.AgentRole.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.Abn != null)
                    hashCode = hashCode * 59 + this.Abn.GetHashCode();
                if (this.Acn != null)
                    hashCode = hashCode * 59 + this.Acn.GetHashCode();
                hashCode = hashCode * 59 + this.IsACNCRegistered.GetHashCode();
                if (this.IndustryCode != null)
                    hashCode = hashCode * 59 + this.IndustryCode.GetHashCode();
                hashCode = hashCode * 59 + this.IndustryCodeVersion.GetHashCode();
                hashCode = hashCode * 59 + this.OrganisationType.GetHashCode();
                if (this.RegisteredCountry != null)
                    hashCode = hashCode * 59 + this.RegisteredCountry.GetHashCode();
                if (this.EstablishmentDate != null)
                    hashCode = hashCode * 59 + this.EstablishmentDate.GetHashCode();
                if (this.PhysicalAddresses != null)
                    hashCode = hashCode * 59 + this.PhysicalAddresses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
