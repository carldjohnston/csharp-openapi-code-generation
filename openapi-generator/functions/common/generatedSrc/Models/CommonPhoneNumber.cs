/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// CommonPhoneNumber
    /// </summary>
    [DataContract(Name = "CommonPhoneNumber")]
    public partial class CommonPhoneNumber : IEquatable<CommonPhoneNumber>, IValidatableObject
    {
        /// <summary>
        /// The purpose of the number as specified by the customer
        /// </summary>
        /// <value>The purpose of the number as specified by the customer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum HOME for value: HOME
            /// </summary>
            [EnumMember(Value = "HOME")]
            HOME = 1,

            /// <summary>
            /// Enum INTERNATIONAL for value: INTERNATIONAL
            /// </summary>
            [EnumMember(Value = "INTERNATIONAL")]
            INTERNATIONAL = 2,

            /// <summary>
            /// Enum MOBILE for value: MOBILE
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILE = 3,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4,

            /// <summary>
            /// Enum UNSPECIFIED for value: UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "UNSPECIFIED")]
            UNSPECIFIED = 5,

            /// <summary>
            /// Enum WORK for value: WORK
            /// </summary>
            [EnumMember(Value = "WORK")]
            WORK = 6

        }


        /// <summary>
        /// The purpose of the number as specified by the customer
        /// </summary>
        /// <value>The purpose of the number as specified by the customer</value>
        [DataMember(Name = "purpose", IsRequired = true, EmitDefaultValue = false)]
        public PurposeEnum Purpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonPhoneNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonPhoneNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonPhoneNumber" /> class.
        /// </summary>
        /// <param name="isPreferred">May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present.</param>
        /// <param name="purpose">The purpose of the number as specified by the customer (required).</param>
        /// <param name="countryCode">If absent, assumed to be Australia (+61). The + should be included.</param>
        /// <param name="areaCode">Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted..</param>
        /// <param name="number">The actual phone number, with leading zeros as appropriate (required).</param>
        /// <param name="extension">An extension number (if applicable).</param>
        /// <param name="fullNumber">Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt) (required).</param>
        public CommonPhoneNumber(bool isPreferred = default(bool), PurposeEnum purpose = default(PurposeEnum), string countryCode = default(string), string areaCode = default(string), string number = default(string), string extension = default(string), string fullNumber = default(string))
        {
            this.Purpose = purpose;
            // to ensure "number" is required (not null)
            this.Number = number ?? throw new ArgumentNullException("number is a required property for CommonPhoneNumber and cannot be null");
            // to ensure "fullNumber" is required (not null)
            this.FullNumber = fullNumber ?? throw new ArgumentNullException("fullNumber is a required property for CommonPhoneNumber and cannot be null");
            this.IsPreferred = isPreferred;
            this.CountryCode = countryCode;
            this.AreaCode = areaCode;
            this.Extension = extension;
        }

        /// <summary>
        /// May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present
        /// </summary>
        /// <value>May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present</value>
        [DataMember(Name = "isPreferred", EmitDefaultValue = true)]
        public bool IsPreferred { get; set; }

        /// <summary>
        /// If absent, assumed to be Australia (+61). The + should be included
        /// </summary>
        /// <value>If absent, assumed to be Australia (+61). The + should be included</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.
        /// </summary>
        /// <value>Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.</value>
        [DataMember(Name = "areaCode", EmitDefaultValue = false)]
        public string AreaCode { get; set; }

        /// <summary>
        /// The actual phone number, with leading zeros as appropriate
        /// </summary>
        /// <value>The actual phone number, with leading zeros as appropriate</value>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// An extension number (if applicable)
        /// </summary>
        /// <value>An extension number (if applicable)</value>
        [DataMember(Name = "extension", EmitDefaultValue = false)]
        public string Extension { get; set; }

        /// <summary>
        /// Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)
        /// </summary>
        /// <value>Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)</value>
        [DataMember(Name = "fullNumber", IsRequired = true, EmitDefaultValue = false)]
        public string FullNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonPhoneNumber {\n");
            sb.Append("  IsPreferred: ").Append(IsPreferred).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  AreaCode: ").Append(AreaCode).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  FullNumber: ").Append(FullNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonPhoneNumber);
        }

        /// <summary>
        /// Returns true if CommonPhoneNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonPhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonPhoneNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsPreferred == input.IsPreferred ||
                    this.IsPreferred.Equals(input.IsPreferred)
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    this.Purpose.Equals(input.Purpose)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.AreaCode == input.AreaCode ||
                    (this.AreaCode != null &&
                    this.AreaCode.Equals(input.AreaCode))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.FullNumber == input.FullNumber ||
                    (this.FullNumber != null &&
                    this.FullNumber.Equals(input.FullNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsPreferred.GetHashCode();
                hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.AreaCode != null)
                    hashCode = hashCode * 59 + this.AreaCode.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.FullNumber != null)
                    hashCode = hashCode * 59 + this.FullNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
