/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)
    /// </summary>
    [DataContract(Name = "CommonPAFAddress")]
    public partial class CommonPAFAddress : IEquatable<CommonPAFAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonPAFAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonPAFAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonPAFAddress" /> class.
        /// </summary>
        /// <param name="dpid">Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier.</param>
        /// <param name="thoroughfareNumber1">Thoroughfare number for a property (first number in a property ranged address).</param>
        /// <param name="thoroughfareNumber1Suffix">Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated.</param>
        /// <param name="thoroughfareNumber2">Second thoroughfare number (only used if the property has a ranged address eg 23-25).</param>
        /// <param name="thoroughfareNumber2Suffix">Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated.</param>
        /// <param name="flatUnitType">Type of flat or unit for the address.</param>
        /// <param name="flatUnitNumber">Unit number (including suffix, if applicable).</param>
        /// <param name="floorLevelType">Type of floor or level for the address.</param>
        /// <param name="floorLevelNumber">Floor or level number (including alpha characters).</param>
        /// <param name="lotNumber">Allotment number for the address.</param>
        /// <param name="buildingName1">Building/Property name 1.</param>
        /// <param name="buildingName2">Building/Property name 2.</param>
        /// <param name="streetName">The name of the street.</param>
        /// <param name="streetType">The street type. Valid enumeration defined by Australia Post PAF code file.</param>
        /// <param name="streetSuffix">The street type suffix. Valid enumeration defined by Australia Post PAF code file.</param>
        /// <param name="postalDeliveryType">Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file.</param>
        /// <param name="postalDeliveryNumber">Postal delivery number if the address is a postal delivery type.</param>
        /// <param name="postalDeliveryNumberPrefix">Postal delivery number prefix related to the postal delivery number.</param>
        /// <param name="postalDeliveryNumberSuffix">Postal delivery number suffix related to the postal delivery number.</param>
        /// <param name="localityName">Full name of locality (required).</param>
        /// <param name="postcode">Postcode for the locality (required).</param>
        /// <param name="state">State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT (required).</param>
        public CommonPAFAddress(string dpid = default(string), int thoroughfareNumber1 = default(int), string thoroughfareNumber1Suffix = default(string), int thoroughfareNumber2 = default(int), string thoroughfareNumber2Suffix = default(string), string flatUnitType = default(string), string flatUnitNumber = default(string), string floorLevelType = default(string), string floorLevelNumber = default(string), string lotNumber = default(string), string buildingName1 = default(string), string buildingName2 = default(string), string streetName = default(string), string streetType = default(string), string streetSuffix = default(string), string postalDeliveryType = default(string), int postalDeliveryNumber = default(int), string postalDeliveryNumberPrefix = default(string), string postalDeliveryNumberSuffix = default(string), string localityName = default(string), string postcode = default(string), string state = default(string))
        {
            // to ensure "localityName" is required (not null)
            this.LocalityName = localityName ?? throw new ArgumentNullException("localityName is a required property for CommonPAFAddress and cannot be null");
            // to ensure "postcode" is required (not null)
            this.Postcode = postcode ?? throw new ArgumentNullException("postcode is a required property for CommonPAFAddress and cannot be null");
            // to ensure "state" is required (not null)
            this.State = state ?? throw new ArgumentNullException("state is a required property for CommonPAFAddress and cannot be null");
            this.Dpid = dpid;
            this.ThoroughfareNumber1 = thoroughfareNumber1;
            this.ThoroughfareNumber1Suffix = thoroughfareNumber1Suffix;
            this.ThoroughfareNumber2 = thoroughfareNumber2;
            this.ThoroughfareNumber2Suffix = thoroughfareNumber2Suffix;
            this.FlatUnitType = flatUnitType;
            this.FlatUnitNumber = flatUnitNumber;
            this.FloorLevelType = floorLevelType;
            this.FloorLevelNumber = floorLevelNumber;
            this.LotNumber = lotNumber;
            this.BuildingName1 = buildingName1;
            this.BuildingName2 = buildingName2;
            this.StreetName = streetName;
            this.StreetType = streetType;
            this.StreetSuffix = streetSuffix;
            this.PostalDeliveryType = postalDeliveryType;
            this.PostalDeliveryNumber = postalDeliveryNumber;
            this.PostalDeliveryNumberPrefix = postalDeliveryNumberPrefix;
            this.PostalDeliveryNumberSuffix = postalDeliveryNumberSuffix;
        }

        /// <summary>
        /// Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier
        /// </summary>
        /// <value>Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier</value>
        [DataMember(Name = "dpid", EmitDefaultValue = false)]
        public string Dpid { get; set; }

        /// <summary>
        /// Thoroughfare number for a property (first number in a property ranged address)
        /// </summary>
        /// <value>Thoroughfare number for a property (first number in a property ranged address)</value>
        [DataMember(Name = "thoroughfareNumber1", EmitDefaultValue = false)]
        public int ThoroughfareNumber1 { get; set; }

        /// <summary>
        /// Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated
        /// </summary>
        /// <value>Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated</value>
        [DataMember(Name = "thoroughfareNumber1Suffix", EmitDefaultValue = false)]
        public string ThoroughfareNumber1Suffix { get; set; }

        /// <summary>
        /// Second thoroughfare number (only used if the property has a ranged address eg 23-25)
        /// </summary>
        /// <value>Second thoroughfare number (only used if the property has a ranged address eg 23-25)</value>
        [DataMember(Name = "thoroughfareNumber2", EmitDefaultValue = false)]
        public int ThoroughfareNumber2 { get; set; }

        /// <summary>
        /// Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated
        /// </summary>
        /// <value>Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated</value>
        [DataMember(Name = "thoroughfareNumber2Suffix", EmitDefaultValue = false)]
        public string ThoroughfareNumber2Suffix { get; set; }

        /// <summary>
        /// Type of flat or unit for the address
        /// </summary>
        /// <value>Type of flat or unit for the address</value>
        [DataMember(Name = "flatUnitType", EmitDefaultValue = false)]
        public string FlatUnitType { get; set; }

        /// <summary>
        /// Unit number (including suffix, if applicable)
        /// </summary>
        /// <value>Unit number (including suffix, if applicable)</value>
        [DataMember(Name = "flatUnitNumber", EmitDefaultValue = false)]
        public string FlatUnitNumber { get; set; }

        /// <summary>
        /// Type of floor or level for the address
        /// </summary>
        /// <value>Type of floor or level for the address</value>
        [DataMember(Name = "floorLevelType", EmitDefaultValue = false)]
        public string FloorLevelType { get; set; }

        /// <summary>
        /// Floor or level number (including alpha characters)
        /// </summary>
        /// <value>Floor or level number (including alpha characters)</value>
        [DataMember(Name = "floorLevelNumber", EmitDefaultValue = false)]
        public string FloorLevelNumber { get; set; }

        /// <summary>
        /// Allotment number for the address
        /// </summary>
        /// <value>Allotment number for the address</value>
        [DataMember(Name = "lotNumber", EmitDefaultValue = false)]
        public string LotNumber { get; set; }

        /// <summary>
        /// Building/Property name 1
        /// </summary>
        /// <value>Building/Property name 1</value>
        [DataMember(Name = "buildingName1", EmitDefaultValue = false)]
        public string BuildingName1 { get; set; }

        /// <summary>
        /// Building/Property name 2
        /// </summary>
        /// <value>Building/Property name 2</value>
        [DataMember(Name = "buildingName2", EmitDefaultValue = false)]
        public string BuildingName2 { get; set; }

        /// <summary>
        /// The name of the street
        /// </summary>
        /// <value>The name of the street</value>
        [DataMember(Name = "streetName", EmitDefaultValue = false)]
        public string StreetName { get; set; }

        /// <summary>
        /// The street type. Valid enumeration defined by Australia Post PAF code file
        /// </summary>
        /// <value>The street type. Valid enumeration defined by Australia Post PAF code file</value>
        [DataMember(Name = "streetType", EmitDefaultValue = false)]
        public string StreetType { get; set; }

        /// <summary>
        /// The street type suffix. Valid enumeration defined by Australia Post PAF code file
        /// </summary>
        /// <value>The street type suffix. Valid enumeration defined by Australia Post PAF code file</value>
        [DataMember(Name = "streetSuffix", EmitDefaultValue = false)]
        public string StreetSuffix { get; set; }

        /// <summary>
        /// Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file
        /// </summary>
        /// <value>Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file</value>
        [DataMember(Name = "postalDeliveryType", EmitDefaultValue = false)]
        public string PostalDeliveryType { get; set; }

        /// <summary>
        /// Postal delivery number if the address is a postal delivery type
        /// </summary>
        /// <value>Postal delivery number if the address is a postal delivery type</value>
        [DataMember(Name = "postalDeliveryNumber", EmitDefaultValue = false)]
        public int PostalDeliveryNumber { get; set; }

        /// <summary>
        /// Postal delivery number prefix related to the postal delivery number
        /// </summary>
        /// <value>Postal delivery number prefix related to the postal delivery number</value>
        [DataMember(Name = "postalDeliveryNumberPrefix", EmitDefaultValue = false)]
        public string PostalDeliveryNumberPrefix { get; set; }

        /// <summary>
        /// Postal delivery number suffix related to the postal delivery number
        /// </summary>
        /// <value>Postal delivery number suffix related to the postal delivery number</value>
        [DataMember(Name = "postalDeliveryNumberSuffix", EmitDefaultValue = false)]
        public string PostalDeliveryNumberSuffix { get; set; }

        /// <summary>
        /// Full name of locality
        /// </summary>
        /// <value>Full name of locality</value>
        [DataMember(Name = "localityName", IsRequired = true, EmitDefaultValue = false)]
        public string LocalityName { get; set; }

        /// <summary>
        /// Postcode for the locality
        /// </summary>
        /// <value>Postcode for the locality</value>
        [DataMember(Name = "postcode", IsRequired = true, EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
        /// </summary>
        /// <value>State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonPAFAddress {\n");
            sb.Append("  Dpid: ").Append(Dpid).Append("\n");
            sb.Append("  ThoroughfareNumber1: ").Append(ThoroughfareNumber1).Append("\n");
            sb.Append("  ThoroughfareNumber1Suffix: ").Append(ThoroughfareNumber1Suffix).Append("\n");
            sb.Append("  ThoroughfareNumber2: ").Append(ThoroughfareNumber2).Append("\n");
            sb.Append("  ThoroughfareNumber2Suffix: ").Append(ThoroughfareNumber2Suffix).Append("\n");
            sb.Append("  FlatUnitType: ").Append(FlatUnitType).Append("\n");
            sb.Append("  FlatUnitNumber: ").Append(FlatUnitNumber).Append("\n");
            sb.Append("  FloorLevelType: ").Append(FloorLevelType).Append("\n");
            sb.Append("  FloorLevelNumber: ").Append(FloorLevelNumber).Append("\n");
            sb.Append("  LotNumber: ").Append(LotNumber).Append("\n");
            sb.Append("  BuildingName1: ").Append(BuildingName1).Append("\n");
            sb.Append("  BuildingName2: ").Append(BuildingName2).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  PostalDeliveryType: ").Append(PostalDeliveryType).Append("\n");
            sb.Append("  PostalDeliveryNumber: ").Append(PostalDeliveryNumber).Append("\n");
            sb.Append("  PostalDeliveryNumberPrefix: ").Append(PostalDeliveryNumberPrefix).Append("\n");
            sb.Append("  PostalDeliveryNumberSuffix: ").Append(PostalDeliveryNumberSuffix).Append("\n");
            sb.Append("  LocalityName: ").Append(LocalityName).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonPAFAddress);
        }

        /// <summary>
        /// Returns true if CommonPAFAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonPAFAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonPAFAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dpid == input.Dpid ||
                    (this.Dpid != null &&
                    this.Dpid.Equals(input.Dpid))
                ) && 
                (
                    this.ThoroughfareNumber1 == input.ThoroughfareNumber1 ||
                    this.ThoroughfareNumber1.Equals(input.ThoroughfareNumber1)
                ) && 
                (
                    this.ThoroughfareNumber1Suffix == input.ThoroughfareNumber1Suffix ||
                    (this.ThoroughfareNumber1Suffix != null &&
                    this.ThoroughfareNumber1Suffix.Equals(input.ThoroughfareNumber1Suffix))
                ) && 
                (
                    this.ThoroughfareNumber2 == input.ThoroughfareNumber2 ||
                    this.ThoroughfareNumber2.Equals(input.ThoroughfareNumber2)
                ) && 
                (
                    this.ThoroughfareNumber2Suffix == input.ThoroughfareNumber2Suffix ||
                    (this.ThoroughfareNumber2Suffix != null &&
                    this.ThoroughfareNumber2Suffix.Equals(input.ThoroughfareNumber2Suffix))
                ) && 
                (
                    this.FlatUnitType == input.FlatUnitType ||
                    (this.FlatUnitType != null &&
                    this.FlatUnitType.Equals(input.FlatUnitType))
                ) && 
                (
                    this.FlatUnitNumber == input.FlatUnitNumber ||
                    (this.FlatUnitNumber != null &&
                    this.FlatUnitNumber.Equals(input.FlatUnitNumber))
                ) && 
                (
                    this.FloorLevelType == input.FloorLevelType ||
                    (this.FloorLevelType != null &&
                    this.FloorLevelType.Equals(input.FloorLevelType))
                ) && 
                (
                    this.FloorLevelNumber == input.FloorLevelNumber ||
                    (this.FloorLevelNumber != null &&
                    this.FloorLevelNumber.Equals(input.FloorLevelNumber))
                ) && 
                (
                    this.LotNumber == input.LotNumber ||
                    (this.LotNumber != null &&
                    this.LotNumber.Equals(input.LotNumber))
                ) && 
                (
                    this.BuildingName1 == input.BuildingName1 ||
                    (this.BuildingName1 != null &&
                    this.BuildingName1.Equals(input.BuildingName1))
                ) && 
                (
                    this.BuildingName2 == input.BuildingName2 ||
                    (this.BuildingName2 != null &&
                    this.BuildingName2.Equals(input.BuildingName2))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.PostalDeliveryType == input.PostalDeliveryType ||
                    (this.PostalDeliveryType != null &&
                    this.PostalDeliveryType.Equals(input.PostalDeliveryType))
                ) && 
                (
                    this.PostalDeliveryNumber == input.PostalDeliveryNumber ||
                    this.PostalDeliveryNumber.Equals(input.PostalDeliveryNumber)
                ) && 
                (
                    this.PostalDeliveryNumberPrefix == input.PostalDeliveryNumberPrefix ||
                    (this.PostalDeliveryNumberPrefix != null &&
                    this.PostalDeliveryNumberPrefix.Equals(input.PostalDeliveryNumberPrefix))
                ) && 
                (
                    this.PostalDeliveryNumberSuffix == input.PostalDeliveryNumberSuffix ||
                    (this.PostalDeliveryNumberSuffix != null &&
                    this.PostalDeliveryNumberSuffix.Equals(input.PostalDeliveryNumberSuffix))
                ) && 
                (
                    this.LocalityName == input.LocalityName ||
                    (this.LocalityName != null &&
                    this.LocalityName.Equals(input.LocalityName))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dpid != null)
                    hashCode = hashCode * 59 + this.Dpid.GetHashCode();
                hashCode = hashCode * 59 + this.ThoroughfareNumber1.GetHashCode();
                if (this.ThoroughfareNumber1Suffix != null)
                    hashCode = hashCode * 59 + this.ThoroughfareNumber1Suffix.GetHashCode();
                hashCode = hashCode * 59 + this.ThoroughfareNumber2.GetHashCode();
                if (this.ThoroughfareNumber2Suffix != null)
                    hashCode = hashCode * 59 + this.ThoroughfareNumber2Suffix.GetHashCode();
                if (this.FlatUnitType != null)
                    hashCode = hashCode * 59 + this.FlatUnitType.GetHashCode();
                if (this.FlatUnitNumber != null)
                    hashCode = hashCode * 59 + this.FlatUnitNumber.GetHashCode();
                if (this.FloorLevelType != null)
                    hashCode = hashCode * 59 + this.FloorLevelType.GetHashCode();
                if (this.FloorLevelNumber != null)
                    hashCode = hashCode * 59 + this.FloorLevelNumber.GetHashCode();
                if (this.LotNumber != null)
                    hashCode = hashCode * 59 + this.LotNumber.GetHashCode();
                if (this.BuildingName1 != null)
                    hashCode = hashCode * 59 + this.BuildingName1.GetHashCode();
                if (this.BuildingName2 != null)
                    hashCode = hashCode * 59 + this.BuildingName2.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetType != null)
                    hashCode = hashCode * 59 + this.StreetType.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.PostalDeliveryType != null)
                    hashCode = hashCode * 59 + this.PostalDeliveryType.GetHashCode();
                hashCode = hashCode * 59 + this.PostalDeliveryNumber.GetHashCode();
                if (this.PostalDeliveryNumberPrefix != null)
                    hashCode = hashCode * 59 + this.PostalDeliveryNumberPrefix.GetHashCode();
                if (this.PostalDeliveryNumberSuffix != null)
                    hashCode = hashCode * 59 + this.PostalDeliveryNumberSuffix.GetHashCode();
                if (this.LocalityName != null)
                    hashCode = hashCode * 59 + this.LocalityName.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
