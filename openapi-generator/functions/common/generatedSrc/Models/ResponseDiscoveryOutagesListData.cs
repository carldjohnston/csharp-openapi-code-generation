/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// ResponseDiscoveryOutagesListData
    /// </summary>
    [DataContract(Name = "ResponseDiscoveryOutagesList_data")]
    public partial class ResponseDiscoveryOutagesListData : IEquatable<ResponseDiscoveryOutagesListData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseDiscoveryOutagesListData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseDiscoveryOutagesListData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseDiscoveryOutagesListData" /> class.
        /// </summary>
        /// <param name="outages">List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled (required).</param>
        public ResponseDiscoveryOutagesListData(List<DiscoveryOutage> outages = default(List<DiscoveryOutage>))
        {
            // to ensure "outages" is required (not null)
            this.Outages = outages ?? throw new ArgumentNullException("outages is a required property for ResponseDiscoveryOutagesListData and cannot be null");
        }

        /// <summary>
        /// List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled
        /// </summary>
        /// <value>List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled</value>
        [DataMember(Name = "outages", IsRequired = true, EmitDefaultValue = false)]
        public List<DiscoveryOutage> Outages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseDiscoveryOutagesListData {\n");
            sb.Append("  Outages: ").Append(Outages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseDiscoveryOutagesListData);
        }

        /// <summary>
        /// Returns true if ResponseDiscoveryOutagesListData instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseDiscoveryOutagesListData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseDiscoveryOutagesListData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Outages == input.Outages ||
                    this.Outages != null &&
                    input.Outages != null &&
                    this.Outages.SequenceEqual(input.Outages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Outages != null)
                    hashCode = hashCode * 59 + this.Outages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
