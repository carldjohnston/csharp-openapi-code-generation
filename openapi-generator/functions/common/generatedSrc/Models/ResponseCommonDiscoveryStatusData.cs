/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// ResponseCommonDiscoveryStatusData
    /// </summary>
    [DataContract(Name = "ResponseCommonDiscoveryStatus_data")]
    public partial class ResponseCommonDiscoveryStatusData : IEquatable<ResponseCommonDiscoveryStatusData>, IValidatableObject
    {
        /// <summary>
        /// Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)
        /// </summary>
        /// <value>Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,

            /// <summary>
            /// Enum PARTIALFAILURE for value: PARTIAL_FAILURE
            /// </summary>
            [EnumMember(Value = "PARTIAL_FAILURE")]
            PARTIALFAILURE = 2,

            /// <summary>
            /// Enum SCHEDULEDOUTAGE for value: SCHEDULED_OUTAGE
            /// </summary>
            [EnumMember(Value = "SCHEDULED_OUTAGE")]
            SCHEDULEDOUTAGE = 3,

            /// <summary>
            /// Enum UNAVAILABLE for value: UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "UNAVAILABLE")]
            UNAVAILABLE = 4

        }


        /// <summary>
        /// Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)
        /// </summary>
        /// <value>Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseCommonDiscoveryStatusData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseCommonDiscoveryStatusData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseCommonDiscoveryStatusData" /> class.
        /// </summary>
        /// <param name="status">Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect) (required).</param>
        /// <param name="explanation">Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK.</param>
        /// <param name="detectionTime">The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE.</param>
        /// <param name="expectedResolutionTime">The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK..</param>
        /// <param name="updateTime">The date and time that this status was last updated by the Data Holder. (required).</param>
        public ResponseCommonDiscoveryStatusData(StatusEnum status = default(StatusEnum), string explanation = default(string), string detectionTime = default(string), string expectedResolutionTime = default(string), string updateTime = default(string))
        {
            this.Status = status;
            // to ensure "updateTime" is required (not null)
            this.UpdateTime = updateTime ?? throw new ArgumentNullException("updateTime is a required property for ResponseCommonDiscoveryStatusData and cannot be null");
            this.Explanation = explanation;
            this.DetectionTime = detectionTime;
            this.ExpectedResolutionTime = expectedResolutionTime;
        }

        /// <summary>
        /// Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK
        /// </summary>
        /// <value>Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK</value>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE
        /// </summary>
        /// <value>The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE</value>
        [DataMember(Name = "detectionTime", EmitDefaultValue = false)]
        public string DetectionTime { get; set; }

        /// <summary>
        /// The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.
        /// </summary>
        /// <value>The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.</value>
        [DataMember(Name = "expectedResolutionTime", EmitDefaultValue = false)]
        public string ExpectedResolutionTime { get; set; }

        /// <summary>
        /// The date and time that this status was last updated by the Data Holder.
        /// </summary>
        /// <value>The date and time that this status was last updated by the Data Holder.</value>
        [DataMember(Name = "updateTime", IsRequired = true, EmitDefaultValue = false)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseCommonDiscoveryStatusData {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  DetectionTime: ").Append(DetectionTime).Append("\n");
            sb.Append("  ExpectedResolutionTime: ").Append(ExpectedResolutionTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseCommonDiscoveryStatusData);
        }

        /// <summary>
        /// Returns true if ResponseCommonDiscoveryStatusData instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseCommonDiscoveryStatusData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseCommonDiscoveryStatusData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Explanation == input.Explanation ||
                    (this.Explanation != null &&
                    this.Explanation.Equals(input.Explanation))
                ) && 
                (
                    this.DetectionTime == input.DetectionTime ||
                    (this.DetectionTime != null &&
                    this.DetectionTime.Equals(input.DetectionTime))
                ) && 
                (
                    this.ExpectedResolutionTime == input.ExpectedResolutionTime ||
                    (this.ExpectedResolutionTime != null &&
                    this.ExpectedResolutionTime.Equals(input.ExpectedResolutionTime))
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Explanation != null)
                    hashCode = hashCode * 59 + this.Explanation.GetHashCode();
                if (this.DetectionTime != null)
                    hashCode = hashCode * 59 + this.DetectionTime.GetHashCode();
                if (this.ExpectedResolutionTime != null)
                    hashCode = hashCode * 59 + this.ExpectedResolutionTime.GetHashCode();
                if (this.UpdateTime != null)
                    hashCode = hashCode * 59 + this.UpdateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
