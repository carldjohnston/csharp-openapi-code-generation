/*
 * CDR Common API
 *
 * Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: contact@consumerdatastandards.gov.au
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Common.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Common.Models
{
    /// <summary>
    /// CommonOrganisationDetailV2AllOf
    /// </summary>
    [DataContract(Name = "CommonOrganisationDetailV2_allOf")]
    public partial class CommonOrganisationDetailV2AllOf : IEquatable<CommonOrganisationDetailV2AllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOrganisationDetailV2AllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonOrganisationDetailV2AllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOrganisationDetailV2AllOf" /> class.
        /// </summary>
        /// <param name="physicalAddresses">Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail (required).</param>
        public CommonOrganisationDetailV2AllOf(List<CommonPhysicalAddressWithPurpose2> physicalAddresses = default(List<CommonPhysicalAddressWithPurpose2>))
        {
            // to ensure "physicalAddresses" is required (not null)
            this.PhysicalAddresses = physicalAddresses ?? throw new ArgumentNullException("physicalAddresses is a required property for CommonOrganisationDetailV2AllOf and cannot be null");
        }

        /// <summary>
        /// Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
        /// </summary>
        /// <value>Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail</value>
        [DataMember(Name = "physicalAddresses", IsRequired = true, EmitDefaultValue = false)]
        public List<CommonPhysicalAddressWithPurpose2> PhysicalAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonOrganisationDetailV2AllOf {\n");
            sb.Append("  PhysicalAddresses: ").Append(PhysicalAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonOrganisationDetailV2AllOf);
        }

        /// <summary>
        /// Returns true if CommonOrganisationDetailV2AllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonOrganisationDetailV2AllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonOrganisationDetailV2AllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PhysicalAddresses == input.PhysicalAddresses ||
                    this.PhysicalAddresses != null &&
                    input.PhysicalAddresses != null &&
                    this.PhysicalAddresses.SequenceEqual(input.PhysicalAddresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PhysicalAddresses != null)
                    hashCode = hashCode * 59 + this.PhysicalAddresses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
