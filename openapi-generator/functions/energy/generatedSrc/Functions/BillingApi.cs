/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;

namespace Agl.Cdr.Energy.Apis
{ 
    public partial class BillingApi
    { 
        [FunctionName("BillingApi_GetBalanceForAccount")]
        public async Task<IActionResult> _GetBalanceForAccount([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/accounts/{accountId}/balance")]HttpRequest req, ExecutionContext context, string accountId)
        {
            var method = this.GetType().GetMethod("GetBalanceForAccount");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_GetBillingForAccount")]
        public async Task<IActionResult> _GetBillingForAccount([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/accounts/{accountId}/billing")]HttpRequest req, ExecutionContext context, string accountId)
        {
            var method = this.GetType().GetMethod("GetBillingForAccount");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_GetInvoicesForAccount")]
        public async Task<IActionResult> _GetInvoicesForAccount([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/accounts/{accountId}/invoices")]HttpRequest req, ExecutionContext context, string accountId)
        {
            var method = this.GetType().GetMethod("GetInvoicesForAccount");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_ListBalancesBulk")]
        public async Task<IActionResult> _ListBalancesBulk([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/accounts/balances")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListBalancesBulk");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_ListBalancesForAccounts")]
        public async Task<IActionResult> _ListBalancesForAccounts([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/energy/accounts/balances")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListBalancesForAccounts");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_ListBillingBulk")]
        public async Task<IActionResult> _ListBillingBulk([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/accounts/billing")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListBillingBulk");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_ListBillingForAccounts")]
        public async Task<IActionResult> _ListBillingForAccounts([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/energy/accounts/billing")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListBillingForAccounts");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_ListInvoicesBulk")]
        public async Task<IActionResult> _ListInvoicesBulk([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/accounts/invoices")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListInvoicesBulk");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("BillingApi_ListInvoicesForAccounts")]
        public async Task<IActionResult> _ListInvoicesForAccounts([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/energy/accounts/invoices")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListInvoicesForAccounts");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }
    }
}

