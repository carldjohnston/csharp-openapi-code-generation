/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;

namespace Agl.Cdr.Energy.Apis
{ 
    public partial class DistributedEnergyResourcesApi
    { 
        [FunctionName("DistributedEnergyResourcesApi_GetDERForServicePoint")]
        public async Task<IActionResult> _GetDERForServicePoint([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/electricity/servicepoints/{servicePointId}/der")]HttpRequest req, ExecutionContext context, string servicePointId)
        {
            var method = this.GetType().GetMethod("GetDERForServicePoint");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("DistributedEnergyResourcesApi_ListDERBulk")]
        public async Task<IActionResult> _ListDERBulk([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/energy/electricity/servicepoints/der")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListDERBulk");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("DistributedEnergyResourcesApi_ListDERForServicePoints")]
        public async Task<IActionResult> _ListDERForServicePoints([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/energy/electricity/servicepoints/der")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ListDERForServicePoints");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }
    }
}

