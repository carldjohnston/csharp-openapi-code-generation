/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyAccountDetailAllOfAuthorisedContacts
    /// </summary>
    [DataContract(Name = "EnergyAccountDetail_allOf_authorisedContacts")]
    public partial class EnergyAccountDetailAllOfAuthorisedContacts : IEquatable<EnergyAccountDetailAllOfAuthorisedContacts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyAccountDetailAllOfAuthorisedContacts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyAccountDetailAllOfAuthorisedContacts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyAccountDetailAllOfAuthorisedContacts" /> class.
        /// </summary>
        /// <param name="firstName">For people with single names this field need not be present. The single name should be in the lastName field.</param>
        /// <param name="lastName">For people with single names the single name should be in this field (required).</param>
        /// <param name="middleNames">Field is mandatory but array may be empty.</param>
        /// <param name="prefix">Also known as title or salutation. The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc).</param>
        /// <param name="suffix">Used for a trailing suffix to the name (e.g. Jr).</param>
        public EnergyAccountDetailAllOfAuthorisedContacts(string firstName = default(string), string lastName = default(string), List<string> middleNames = default(List<string>), string prefix = default(string), string suffix = default(string))
        {
            // to ensure "lastName" is required (not null)
            this.LastName = lastName ?? throw new ArgumentNullException("lastName is a required property for EnergyAccountDetailAllOfAuthorisedContacts and cannot be null");
            this.FirstName = firstName;
            this.MiddleNames = middleNames;
            this.Prefix = prefix;
            this.Suffix = suffix;
        }

        /// <summary>
        /// For people with single names this field need not be present. The single name should be in the lastName field
        /// </summary>
        /// <value>For people with single names this field need not be present. The single name should be in the lastName field</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// For people with single names the single name should be in this field
        /// </summary>
        /// <value>For people with single names the single name should be in this field</value>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Field is mandatory but array may be empty
        /// </summary>
        /// <value>Field is mandatory but array may be empty</value>
        [DataMember(Name = "middleNames", EmitDefaultValue = false)]
        public List<string> MiddleNames { get; set; }

        /// <summary>
        /// Also known as title or salutation. The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
        /// </summary>
        /// <value>Also known as title or salutation. The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)</value>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Used for a trailing suffix to the name (e.g. Jr)
        /// </summary>
        /// <value>Used for a trailing suffix to the name (e.g. Jr)</value>
        [DataMember(Name = "suffix", EmitDefaultValue = false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyAccountDetailAllOfAuthorisedContacts {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleNames: ").Append(MiddleNames).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyAccountDetailAllOfAuthorisedContacts);
        }

        /// <summary>
        /// Returns true if EnergyAccountDetailAllOfAuthorisedContacts instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyAccountDetailAllOfAuthorisedContacts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyAccountDetailAllOfAuthorisedContacts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MiddleNames == input.MiddleNames ||
                    this.MiddleNames != null &&
                    input.MiddleNames != null &&
                    this.MiddleNames.SequenceEqual(input.MiddleNames)
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MiddleNames != null)
                    hashCode = hashCode * 59 + this.MiddleNames.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
