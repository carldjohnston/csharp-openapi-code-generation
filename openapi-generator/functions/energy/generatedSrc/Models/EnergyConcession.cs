/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyConcession
    /// </summary>
    [DataContract(Name = "EnergyConcession")]
    public partial class EnergyConcession : IEquatable<EnergyConcession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyConcession" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyConcession() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyConcession" /> class.
        /// </summary>
        /// <param name="displayName">The display name of the concession (required).</param>
        /// <param name="additionalInfo">Display text providing more information on the concession.</param>
        /// <param name="additionalInfoUri">Optional link to additional information regarding the concession.</param>
        /// <param name="startDate">Optional start date for the application of the concession.</param>
        /// <param name="endDate">Optional end date for the application of the concession.</param>
        /// <param name="dailyDiscount">Daily discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided.</param>
        /// <param name="monthlyDiscount">Monthly discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided.</param>
        /// <param name="yearlyDiscount">Annual discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided.</param>
        /// <param name="percentageDiscount">Percentage of each invoice to be discounted due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided.</param>
        public EnergyConcession(string displayName = default(string), string additionalInfo = default(string), string additionalInfoUri = default(string), string startDate = default(string), string endDate = default(string), string dailyDiscount = default(string), string monthlyDiscount = default(string), string yearlyDiscount = default(string), string percentageDiscount = default(string))
        {
            // to ensure "displayName" is required (not null)
            this.DisplayName = displayName ?? throw new ArgumentNullException("displayName is a required property for EnergyConcession and cannot be null");
            this.AdditionalInfo = additionalInfo;
            this.AdditionalInfoUri = additionalInfoUri;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.DailyDiscount = dailyDiscount;
            this.MonthlyDiscount = monthlyDiscount;
            this.YearlyDiscount = yearlyDiscount;
            this.PercentageDiscount = percentageDiscount;
        }

        /// <summary>
        /// The display name of the concession
        /// </summary>
        /// <value>The display name of the concession</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Display text providing more information on the concession
        /// </summary>
        /// <value>Display text providing more information on the concession</value>
        [DataMember(Name = "additionalInfo", EmitDefaultValue = false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Optional link to additional information regarding the concession
        /// </summary>
        /// <value>Optional link to additional information regarding the concession</value>
        [DataMember(Name = "additionalInfoUri", EmitDefaultValue = false)]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Optional start date for the application of the concession
        /// </summary>
        /// <value>Optional start date for the application of the concession</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Optional end date for the application of the concession
        /// </summary>
        /// <value>Optional end date for the application of the concession</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Daily discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided
        /// </summary>
        /// <value>Daily discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided</value>
        [DataMember(Name = "dailyDiscount", EmitDefaultValue = false)]
        public string DailyDiscount { get; set; }

        /// <summary>
        /// Monthly discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided
        /// </summary>
        /// <value>Monthly discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided</value>
        [DataMember(Name = "monthlyDiscount", EmitDefaultValue = false)]
        public string MonthlyDiscount { get; set; }

        /// <summary>
        /// Annual discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided
        /// </summary>
        /// <value>Annual discount value due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided</value>
        [DataMember(Name = "yearlyDiscount", EmitDefaultValue = false)]
        public string YearlyDiscount { get; set; }

        /// <summary>
        /// Percentage of each invoice to be discounted due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided
        /// </summary>
        /// <value>Percentage of each invoice to be discounted due to the concession.  At least one dailyDiscount, monthlyDiscount, yearlyDiscount and percentageDiscount must be provided</value>
        [DataMember(Name = "percentageDiscount", EmitDefaultValue = false)]
        public string PercentageDiscount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyConcession {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  DailyDiscount: ").Append(DailyDiscount).Append("\n");
            sb.Append("  MonthlyDiscount: ").Append(MonthlyDiscount).Append("\n");
            sb.Append("  YearlyDiscount: ").Append(YearlyDiscount).Append("\n");
            sb.Append("  PercentageDiscount: ").Append(PercentageDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyConcession);
        }

        /// <summary>
        /// Returns true if EnergyConcession instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyConcession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyConcession input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.AdditionalInfoUri == input.AdditionalInfoUri ||
                    (this.AdditionalInfoUri != null &&
                    this.AdditionalInfoUri.Equals(input.AdditionalInfoUri))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.DailyDiscount == input.DailyDiscount ||
                    (this.DailyDiscount != null &&
                    this.DailyDiscount.Equals(input.DailyDiscount))
                ) && 
                (
                    this.MonthlyDiscount == input.MonthlyDiscount ||
                    (this.MonthlyDiscount != null &&
                    this.MonthlyDiscount.Equals(input.MonthlyDiscount))
                ) && 
                (
                    this.YearlyDiscount == input.YearlyDiscount ||
                    (this.YearlyDiscount != null &&
                    this.YearlyDiscount.Equals(input.YearlyDiscount))
                ) && 
                (
                    this.PercentageDiscount == input.PercentageDiscount ||
                    (this.PercentageDiscount != null &&
                    this.PercentageDiscount.Equals(input.PercentageDiscount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + this.AdditionalInfoUri.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.DailyDiscount != null)
                    hashCode = hashCode * 59 + this.DailyDiscount.GetHashCode();
                if (this.MonthlyDiscount != null)
                    hashCode = hashCode * 59 + this.MonthlyDiscount.GetHashCode();
                if (this.YearlyDiscount != null)
                    hashCode = hashCode * 59 + this.YearlyDiscount.GetHashCode();
                if (this.PercentageDiscount != null)
                    hashCode = hashCode * 59 + this.PercentageDiscount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
