/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// Represents a regular credit card payment schedule. Mandatory if paymentScheduleUType is set to cardDebit
    /// </summary>
    [DataContract(Name = "EnergyPaymentSchedule_cardDebit")]
    public partial class EnergyPaymentScheduleCardDebit : IEquatable<EnergyPaymentScheduleCardDebit>, IValidatableObject
    {
        /// <summary>
        /// The type of credit card held on file
        /// </summary>
        /// <value>The type of credit card held on file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardSchemeEnum
        {
            /// <summary>
            /// Enum VISA for value: VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISA = 1,

            /// <summary>
            /// Enum MASTERCARD for value: MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARD = 2,

            /// <summary>
            /// Enum AMEX for value: AMEX
            /// </summary>
            [EnumMember(Value = "AMEX")]
            AMEX = 3,

            /// <summary>
            /// Enum DINERS for value: DINERS
            /// </summary>
            [EnumMember(Value = "DINERS")]
            DINERS = 4,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 5,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 6

        }


        /// <summary>
        /// The type of credit card held on file
        /// </summary>
        /// <value>The type of credit card held on file</value>
        [DataMember(Name = "cardScheme", IsRequired = true, EmitDefaultValue = false)]
        public CardSchemeEnum CardScheme { get; set; }
        /// <summary>
        /// The mechanism by which the payment amount is calculated.  Explanation of values are as follows:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;**STATIC** - Indicates a consistent, static amount, per payment&lt;/li&gt;&lt;li&gt;**BALANCE** - Indicates that the outstanding balance for the account is paid per period&lt;/li&gt;&lt;li&gt;**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The mechanism by which the payment amount is calculated.  Explanation of values are as follows:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;**STATIC** - Indicates a consistent, static amount, per payment&lt;/li&gt;&lt;li&gt;**BALANCE** - Indicates that the outstanding balance for the account is paid per period&lt;/li&gt;&lt;li&gt;**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CalculationTypeEnum
        {
            /// <summary>
            /// Enum STATIC for value: STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATIC = 1,

            /// <summary>
            /// Enum BALANCE for value: BALANCE
            /// </summary>
            [EnumMember(Value = "BALANCE")]
            BALANCE = 2,

            /// <summary>
            /// Enum CALCULATED for value: CALCULATED
            /// </summary>
            [EnumMember(Value = "CALCULATED")]
            CALCULATED = 3

        }


        /// <summary>
        /// The mechanism by which the payment amount is calculated.  Explanation of values are as follows:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;**STATIC** - Indicates a consistent, static amount, per payment&lt;/li&gt;&lt;li&gt;**BALANCE** - Indicates that the outstanding balance for the account is paid per period&lt;/li&gt;&lt;li&gt;**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The mechanism by which the payment amount is calculated.  Explanation of values are as follows:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;**STATIC** - Indicates a consistent, static amount, per payment&lt;/li&gt;&lt;li&gt;**BALANCE** - Indicates that the outstanding balance for the account is paid per period&lt;/li&gt;&lt;li&gt;**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "calculationType", IsRequired = true, EmitDefaultValue = false)]
        public CalculationTypeEnum CalculationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPaymentScheduleCardDebit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyPaymentScheduleCardDebit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPaymentScheduleCardDebit" /> class.
        /// </summary>
        /// <param name="cardScheme">The type of credit card held on file (required).</param>
        /// <param name="paymentFrequency">The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) (required).</param>
        /// <param name="calculationType">The mechanism by which the payment amount is calculated.  Explanation of values are as follows:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;**STATIC** - Indicates a consistent, static amount, per payment&lt;/li&gt;&lt;li&gt;**BALANCE** - Indicates that the outstanding balance for the account is paid per period&lt;/li&gt;&lt;li&gt;**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm&lt;/li&gt;&lt;/ul&gt; (required).</param>
        public EnergyPaymentScheduleCardDebit(CardSchemeEnum cardScheme = default(CardSchemeEnum), string paymentFrequency = default(string), CalculationTypeEnum calculationType = default(CalculationTypeEnum))
        {
            this.CardScheme = cardScheme;
            // to ensure "paymentFrequency" is required (not null)
            this.PaymentFrequency = paymentFrequency ?? throw new ArgumentNullException("paymentFrequency is a required property for EnergyPaymentScheduleCardDebit and cannot be null");
            this.CalculationType = calculationType;
        }

        /// <summary>
        /// The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name = "paymentFrequency", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPaymentScheduleCardDebit {\n");
            sb.Append("  CardScheme: ").Append(CardScheme).Append("\n");
            sb.Append("  PaymentFrequency: ").Append(PaymentFrequency).Append("\n");
            sb.Append("  CalculationType: ").Append(CalculationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyPaymentScheduleCardDebit);
        }

        /// <summary>
        /// Returns true if EnergyPaymentScheduleCardDebit instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyPaymentScheduleCardDebit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPaymentScheduleCardDebit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardScheme == input.CardScheme ||
                    this.CardScheme.Equals(input.CardScheme)
                ) && 
                (
                    this.PaymentFrequency == input.PaymentFrequency ||
                    (this.PaymentFrequency != null &&
                    this.PaymentFrequency.Equals(input.PaymentFrequency))
                ) && 
                (
                    this.CalculationType == input.CalculationType ||
                    this.CalculationType.Equals(input.CalculationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CardScheme.GetHashCode();
                if (this.PaymentFrequency != null)
                    hashCode = hashCode * 59 + this.PaymentFrequency.GetHashCode();
                hashCode = hashCode * 59 + this.CalculationType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
