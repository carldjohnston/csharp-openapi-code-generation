/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyDerRecord
    /// </summary>
    [DataContract(Name = "EnergyDerRecord")]
    public partial class EnergyDerRecord : IEquatable<EnergyDerRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyDerRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecord" /> class.
        /// </summary>
        /// <param name="servicePointId">Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements (required).</param>
        /// <param name="approvedCapacity">Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA (required).</param>
        /// <param name="availablePhasesCount">The number of phases available for the installation of DER (required).</param>
        /// <param name="installedPhasesCount">The number of phases that DER is connected to (required).</param>
        /// <param name="islandableInstallation">For identification of small generating units designed with the ability to operate in an islanded mode (required).</param>
        /// <param name="hasCentralProtectionControl">For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false (default to false).</param>
        /// <param name="protectionMode">protectionMode.</param>
        /// <param name="acConnections">acConnections (required).</param>
        public EnergyDerRecord(string servicePointId = default(string), decimal approvedCapacity = default(decimal), decimal availablePhasesCount = default(decimal), decimal installedPhasesCount = default(decimal), string islandableInstallation = default(string), bool hasCentralProtectionControl = false, EnergyDerRecordProtectionMode protectionMode = default(EnergyDerRecordProtectionMode), List<EnergyDerRecordAcConnections> acConnections = default(List<EnergyDerRecordAcConnections>))
        {
            // to ensure "servicePointId" is required (not null)
            this.ServicePointId = servicePointId ?? throw new ArgumentNullException("servicePointId is a required property for EnergyDerRecord and cannot be null");
            this.ApprovedCapacity = approvedCapacity;
            this.AvailablePhasesCount = availablePhasesCount;
            this.InstalledPhasesCount = installedPhasesCount;
            // to ensure "islandableInstallation" is required (not null)
            this.IslandableInstallation = islandableInstallation ?? throw new ArgumentNullException("islandableInstallation is a required property for EnergyDerRecord and cannot be null");
            // to ensure "acConnections" is required (not null)
            this.AcConnections = acConnections ?? throw new ArgumentNullException("acConnections is a required property for EnergyDerRecord and cannot be null");
            this.HasCentralProtectionControl = hasCentralProtectionControl;
            this.ProtectionMode = protectionMode;
        }

        /// <summary>
        /// Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements
        /// </summary>
        /// <value>Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements</value>
        [DataMember(Name = "servicePointId", IsRequired = true, EmitDefaultValue = false)]
        public string ServicePointId { get; set; }

        /// <summary>
        /// Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA
        /// </summary>
        /// <value>Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA</value>
        [DataMember(Name = "approvedCapacity", IsRequired = true, EmitDefaultValue = false)]
        public decimal ApprovedCapacity { get; set; }

        /// <summary>
        /// The number of phases available for the installation of DER
        /// </summary>
        /// <value>The number of phases available for the installation of DER</value>
        [DataMember(Name = "availablePhasesCount", IsRequired = true, EmitDefaultValue = false)]
        public decimal AvailablePhasesCount { get; set; }

        /// <summary>
        /// The number of phases that DER is connected to
        /// </summary>
        /// <value>The number of phases that DER is connected to</value>
        [DataMember(Name = "installedPhasesCount", IsRequired = true, EmitDefaultValue = false)]
        public decimal InstalledPhasesCount { get; set; }

        /// <summary>
        /// For identification of small generating units designed with the ability to operate in an islanded mode
        /// </summary>
        /// <value>For identification of small generating units designed with the ability to operate in an islanded mode</value>
        [DataMember(Name = "islandableInstallation", IsRequired = true, EmitDefaultValue = false)]
        public string IslandableInstallation { get; set; }

        /// <summary>
        /// For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false
        /// </summary>
        /// <value>For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false</value>
        [DataMember(Name = "hasCentralProtectionControl", EmitDefaultValue = true)]
        public bool HasCentralProtectionControl { get; set; }

        /// <summary>
        /// Gets or Sets ProtectionMode
        /// </summary>
        [DataMember(Name = "protectionMode", EmitDefaultValue = false)]
        public EnergyDerRecordProtectionMode ProtectionMode { get; set; }

        /// <summary>
        /// Gets or Sets AcConnections
        /// </summary>
        [DataMember(Name = "acConnections", IsRequired = true, EmitDefaultValue = false)]
        public List<EnergyDerRecordAcConnections> AcConnections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecord {\n");
            sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
            sb.Append("  ApprovedCapacity: ").Append(ApprovedCapacity).Append("\n");
            sb.Append("  AvailablePhasesCount: ").Append(AvailablePhasesCount).Append("\n");
            sb.Append("  InstalledPhasesCount: ").Append(InstalledPhasesCount).Append("\n");
            sb.Append("  IslandableInstallation: ").Append(IslandableInstallation).Append("\n");
            sb.Append("  HasCentralProtectionControl: ").Append(HasCentralProtectionControl).Append("\n");
            sb.Append("  ProtectionMode: ").Append(ProtectionMode).Append("\n");
            sb.Append("  AcConnections: ").Append(AcConnections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyDerRecord);
        }

        /// <summary>
        /// Returns true if EnergyDerRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyDerRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServicePointId == input.ServicePointId ||
                    (this.ServicePointId != null &&
                    this.ServicePointId.Equals(input.ServicePointId))
                ) && 
                (
                    this.ApprovedCapacity == input.ApprovedCapacity ||
                    this.ApprovedCapacity.Equals(input.ApprovedCapacity)
                ) && 
                (
                    this.AvailablePhasesCount == input.AvailablePhasesCount ||
                    this.AvailablePhasesCount.Equals(input.AvailablePhasesCount)
                ) && 
                (
                    this.InstalledPhasesCount == input.InstalledPhasesCount ||
                    this.InstalledPhasesCount.Equals(input.InstalledPhasesCount)
                ) && 
                (
                    this.IslandableInstallation == input.IslandableInstallation ||
                    (this.IslandableInstallation != null &&
                    this.IslandableInstallation.Equals(input.IslandableInstallation))
                ) && 
                (
                    this.HasCentralProtectionControl == input.HasCentralProtectionControl ||
                    this.HasCentralProtectionControl.Equals(input.HasCentralProtectionControl)
                ) && 
                (
                    this.ProtectionMode == input.ProtectionMode ||
                    (this.ProtectionMode != null &&
                    this.ProtectionMode.Equals(input.ProtectionMode))
                ) && 
                (
                    this.AcConnections == input.AcConnections ||
                    this.AcConnections != null &&
                    input.AcConnections != null &&
                    this.AcConnections.SequenceEqual(input.AcConnections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServicePointId != null)
                    hashCode = hashCode * 59 + this.ServicePointId.GetHashCode();
                hashCode = hashCode * 59 + this.ApprovedCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.AvailablePhasesCount.GetHashCode();
                hashCode = hashCode * 59 + this.InstalledPhasesCount.GetHashCode();
                if (this.IslandableInstallation != null)
                    hashCode = hashCode * 59 + this.IslandableInstallation.GetHashCode();
                hashCode = hashCode * 59 + this.HasCentralProtectionControl.GetHashCode();
                if (this.ProtectionMode != null)
                    hashCode = hashCode * 59 + this.ProtectionMode.GetHashCode();
                if (this.AcConnections != null)
                    hashCode = hashCode * 59 + this.AcConnections.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
