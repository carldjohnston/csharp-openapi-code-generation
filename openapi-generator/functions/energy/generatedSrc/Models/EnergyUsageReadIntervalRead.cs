/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// Mandatory if readUType is set to intervalRead
    /// </summary>
    [DataContract(Name = "EnergyUsageRead_intervalRead")]
    public partial class EnergyUsageReadIntervalRead : IEquatable<EnergyUsageReadIntervalRead>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyUsageReadIntervalRead" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyUsageReadIntervalRead() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyUsageReadIntervalRead" /> class.
        /// </summary>
        /// <param name="readIntervalLength">Read interval length in minutes (required).</param>
        /// <param name="aggregateValue">The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export (required).</param>
        /// <param name="intervalReads">Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval) (required).</param>
        public EnergyUsageReadIntervalRead(string readIntervalLength = default(string), decimal aggregateValue = default(decimal), List<EnergyUsageReadIntervalReadIntervalReads> intervalReads = default(List<EnergyUsageReadIntervalReadIntervalReads>))
        {
            // to ensure "readIntervalLength" is required (not null)
            this.ReadIntervalLength = readIntervalLength ?? throw new ArgumentNullException("readIntervalLength is a required property for EnergyUsageReadIntervalRead and cannot be null");
            this.AggregateValue = aggregateValue;
            // to ensure "intervalReads" is required (not null)
            this.IntervalReads = intervalReads ?? throw new ArgumentNullException("intervalReads is a required property for EnergyUsageReadIntervalRead and cannot be null");
        }

        /// <summary>
        /// Read interval length in minutes
        /// </summary>
        /// <value>Read interval length in minutes</value>
        [DataMember(Name = "readIntervalLength", IsRequired = true, EmitDefaultValue = false)]
        public string ReadIntervalLength { get; set; }

        /// <summary>
        /// The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export
        /// </summary>
        /// <value>The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export</value>
        [DataMember(Name = "aggregateValue", IsRequired = true, EmitDefaultValue = false)]
        public decimal AggregateValue { get; set; }

        /// <summary>
        /// Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)
        /// </summary>
        /// <value>Array of reads with each element indicating the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)</value>
        [DataMember(Name = "intervalReads", IsRequired = true, EmitDefaultValue = false)]
        public List<EnergyUsageReadIntervalReadIntervalReads> IntervalReads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyUsageReadIntervalRead {\n");
            sb.Append("  ReadIntervalLength: ").Append(ReadIntervalLength).Append("\n");
            sb.Append("  AggregateValue: ").Append(AggregateValue).Append("\n");
            sb.Append("  IntervalReads: ").Append(IntervalReads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyUsageReadIntervalRead);
        }

        /// <summary>
        /// Returns true if EnergyUsageReadIntervalRead instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyUsageReadIntervalRead to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyUsageReadIntervalRead input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReadIntervalLength == input.ReadIntervalLength ||
                    (this.ReadIntervalLength != null &&
                    this.ReadIntervalLength.Equals(input.ReadIntervalLength))
                ) && 
                (
                    this.AggregateValue == input.AggregateValue ||
                    this.AggregateValue.Equals(input.AggregateValue)
                ) && 
                (
                    this.IntervalReads == input.IntervalReads ||
                    this.IntervalReads != null &&
                    input.IntervalReads != null &&
                    this.IntervalReads.SequenceEqual(input.IntervalReads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReadIntervalLength != null)
                    hashCode = hashCode * 59 + this.ReadIntervalLength.GetHashCode();
                hashCode = hashCode * 59 + this.AggregateValue.GetHashCode();
                if (this.IntervalReads != null)
                    hashCode = hashCode * 59 + this.IntervalReads.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
