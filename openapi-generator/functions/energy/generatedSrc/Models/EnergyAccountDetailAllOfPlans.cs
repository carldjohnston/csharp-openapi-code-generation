/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyAccountDetailAllOfPlans
    /// </summary>
    [DataContract(Name = "EnergyAccountDetail_allOf_plans")]
    public partial class EnergyAccountDetailAllOfPlans : IEquatable<EnergyAccountDetailAllOfPlans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyAccountDetailAllOfPlans" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyAccountDetailAllOfPlans() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyAccountDetailAllOfPlans" /> class.
        /// </summary>
        /// <param name="nickname">Optional display name for the plan provided by the customer to help differentiate multiple plans.</param>
        /// <param name="servicePointIds">An array of servicePointIds, representing NMIs, that this account is linked to (required).</param>
        /// <param name="planOverview">planOverview (required).</param>
        /// <param name="planDetail">planDetail (required).</param>
        /// <param name="authorisedContacts">An array of additional contacts that are authorised to act on this account.</param>
        public EnergyAccountDetailAllOfPlans(string nickname = default(string), List<string> servicePointIds = default(List<string>), EnergyAccountAllOfPlanOverview planOverview = default(EnergyAccountAllOfPlanOverview), EnergyAccountDetailAllOfPlanDetail planDetail = default(EnergyAccountDetailAllOfPlanDetail), List<EnergyAccountDetailAllOfAuthorisedContacts> authorisedContacts = default(List<EnergyAccountDetailAllOfAuthorisedContacts>))
        {
            // to ensure "servicePointIds" is required (not null)
            this.ServicePointIds = servicePointIds ?? throw new ArgumentNullException("servicePointIds is a required property for EnergyAccountDetailAllOfPlans and cannot be null");
            // to ensure "planOverview" is required (not null)
            this.PlanOverview = planOverview ?? throw new ArgumentNullException("planOverview is a required property for EnergyAccountDetailAllOfPlans and cannot be null");
            // to ensure "planDetail" is required (not null)
            this.PlanDetail = planDetail ?? throw new ArgumentNullException("planDetail is a required property for EnergyAccountDetailAllOfPlans and cannot be null");
            this.Nickname = nickname;
            this.AuthorisedContacts = authorisedContacts;
        }

        /// <summary>
        /// Optional display name for the plan provided by the customer to help differentiate multiple plans
        /// </summary>
        /// <value>Optional display name for the plan provided by the customer to help differentiate multiple plans</value>
        [DataMember(Name = "nickname", EmitDefaultValue = false)]
        public string Nickname { get; set; }

        /// <summary>
        /// An array of servicePointIds, representing NMIs, that this account is linked to
        /// </summary>
        /// <value>An array of servicePointIds, representing NMIs, that this account is linked to</value>
        [DataMember(Name = "servicePointIds", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ServicePointIds { get; set; }

        /// <summary>
        /// Gets or Sets PlanOverview
        /// </summary>
        [DataMember(Name = "planOverview", IsRequired = true, EmitDefaultValue = false)]
        public EnergyAccountAllOfPlanOverview PlanOverview { get; set; }

        /// <summary>
        /// Gets or Sets PlanDetail
        /// </summary>
        [DataMember(Name = "planDetail", IsRequired = true, EmitDefaultValue = false)]
        public EnergyAccountDetailAllOfPlanDetail PlanDetail { get; set; }

        /// <summary>
        /// An array of additional contacts that are authorised to act on this account
        /// </summary>
        /// <value>An array of additional contacts that are authorised to act on this account</value>
        [DataMember(Name = "authorisedContacts", EmitDefaultValue = false)]
        public List<EnergyAccountDetailAllOfAuthorisedContacts> AuthorisedContacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyAccountDetailAllOfPlans {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  ServicePointIds: ").Append(ServicePointIds).Append("\n");
            sb.Append("  PlanOverview: ").Append(PlanOverview).Append("\n");
            sb.Append("  PlanDetail: ").Append(PlanDetail).Append("\n");
            sb.Append("  AuthorisedContacts: ").Append(AuthorisedContacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyAccountDetailAllOfPlans);
        }

        /// <summary>
        /// Returns true if EnergyAccountDetailAllOfPlans instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyAccountDetailAllOfPlans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyAccountDetailAllOfPlans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.ServicePointIds == input.ServicePointIds ||
                    this.ServicePointIds != null &&
                    input.ServicePointIds != null &&
                    this.ServicePointIds.SequenceEqual(input.ServicePointIds)
                ) && 
                (
                    this.PlanOverview == input.PlanOverview ||
                    (this.PlanOverview != null &&
                    this.PlanOverview.Equals(input.PlanOverview))
                ) && 
                (
                    this.PlanDetail == input.PlanDetail ||
                    (this.PlanDetail != null &&
                    this.PlanDetail.Equals(input.PlanDetail))
                ) && 
                (
                    this.AuthorisedContacts == input.AuthorisedContacts ||
                    this.AuthorisedContacts != null &&
                    input.AuthorisedContacts != null &&
                    this.AuthorisedContacts.SequenceEqual(input.AuthorisedContacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.ServicePointIds != null)
                    hashCode = hashCode * 59 + this.ServicePointIds.GetHashCode();
                if (this.PlanOverview != null)
                    hashCode = hashCode * 59 + this.PlanOverview.GetHashCode();
                if (this.PlanDetail != null)
                    hashCode = hashCode * 59 + this.PlanDetail.GetHashCode();
                if (this.AuthorisedContacts != null)
                    hashCode = hashCode * 59 + this.AuthorisedContacts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
