/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyServicePointDetailRelatedParticipants
    /// </summary>
    [DataContract(Name = "EnergyServicePointDetail_relatedParticipants")]
    public partial class EnergyServicePointDetailRelatedParticipants : IEquatable<EnergyServicePointDetailRelatedParticipants>, IValidatableObject
    {
        /// <summary>
        /// The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum FRMP for value: FRMP
            /// </summary>
            [EnumMember(Value = "FRMP")]
            FRMP = 1,

            /// <summary>
            /// Enum LNSP for value: LNSP
            /// </summary>
            [EnumMember(Value = "LNSP")]
            LNSP = 2,

            /// <summary>
            /// Enum DRSP for value: DRSP
            /// </summary>
            [EnumMember(Value = "DRSP")]
            DRSP = 3

        }


        /// <summary>
        /// The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = false)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyServicePointDetailRelatedParticipants" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyServicePointDetailRelatedParticipants() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyServicePointDetailRelatedParticipants" /> class.
        /// </summary>
        /// <param name="party">The name of the party/orginsation related to this service point (required).</param>
        /// <param name="role">The role performed by this participant in relation to the service point. Note the details of enumeration values below: &lt;ul&gt;&lt;li&gt;**FRMP** - Financially Responsible Market Participant&lt;/li&gt;&lt;li&gt;**LNSP** - Local Network Service Provider or Embedded Network Manager for child connection points&lt;/li&gt;&lt;li&gt;**DRSP** - wholesale Demand Response and/or market ancillary Service Provider and note that where it is not relevant for a NMI it will not be included&lt;/li&gt;&lt;/ul&gt; (required).</param>
        public EnergyServicePointDetailRelatedParticipants(string party = default(string), RoleEnum role = default(RoleEnum))
        {
            // to ensure "party" is required (not null)
            this.Party = party ?? throw new ArgumentNullException("party is a required property for EnergyServicePointDetailRelatedParticipants and cannot be null");
            this.Role = role;
        }

        /// <summary>
        /// The name of the party/orginsation related to this service point
        /// </summary>
        /// <value>The name of the party/orginsation related to this service point</value>
        [DataMember(Name = "party", IsRequired = true, EmitDefaultValue = false)]
        public string Party { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetailRelatedParticipants {\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyServicePointDetailRelatedParticipants);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetailRelatedParticipants instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyServicePointDetailRelatedParticipants to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetailRelatedParticipants input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Party == input.Party ||
                    (this.Party != null &&
                    this.Party.Equals(input.Party))
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Party != null)
                    hashCode = hashCode * 59 + this.Party.GetHashCode();
                hashCode = hashCode * 59 + this.Role.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
