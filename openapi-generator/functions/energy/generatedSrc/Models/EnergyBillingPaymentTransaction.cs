/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyBillingPaymentTransaction
    /// </summary>
    [DataContract(Name = "EnergyBillingPaymentTransaction")]
    public partial class EnergyBillingPaymentTransaction : IEquatable<EnergyBillingPaymentTransaction>, IValidatableObject
    {
        /// <summary>
        /// The method of payment
        /// </summary>
        /// <value>The method of payment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum DIRECTDEBIT for value: DIRECT_DEBIT
            /// </summary>
            [EnumMember(Value = "DIRECT_DEBIT")]
            DIRECTDEBIT = 1,

            /// <summary>
            /// Enum CARD for value: CARD
            /// </summary>
            [EnumMember(Value = "CARD")]
            CARD = 2,

            /// <summary>
            /// Enum TRANSFER for value: TRANSFER
            /// </summary>
            [EnumMember(Value = "TRANSFER")]
            TRANSFER = 3,

            /// <summary>
            /// Enum BPAY for value: BPAY
            /// </summary>
            [EnumMember(Value = "BPAY")]
            BPAY = 4,

            /// <summary>
            /// Enum CASH for value: CASH
            /// </summary>
            [EnumMember(Value = "CASH")]
            CASH = 5,

            /// <summary>
            /// Enum CHEQUE for value: CHEQUE
            /// </summary>
            [EnumMember(Value = "CHEQUE")]
            CHEQUE = 6,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7

        }


        /// <summary>
        /// The method of payment
        /// </summary>
        /// <value>The method of payment</value>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = false)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingPaymentTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyBillingPaymentTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingPaymentTransaction" /> class.
        /// </summary>
        /// <param name="amount">The amount paid (required).</param>
        /// <param name="method">The method of payment (required).</param>
        public EnergyBillingPaymentTransaction(string amount = default(string), MethodEnum method = default(MethodEnum))
        {
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for EnergyBillingPaymentTransaction and cannot be null");
            this.Method = method;
        }

        /// <summary>
        /// The amount paid
        /// </summary>
        /// <value>The amount paid</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingPaymentTransaction {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyBillingPaymentTransaction);
        }

        /// <summary>
        /// Returns true if EnergyBillingPaymentTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyBillingPaymentTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingPaymentTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Method.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
