/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyUsageReadIntervalReadIntervalReads
    /// </summary>
    [DataContract(Name = "EnergyUsageRead_intervalRead_intervalReads")]
    public partial class EnergyUsageReadIntervalReadIntervalReads : IEquatable<EnergyUsageReadIntervalReadIntervalReads>, IValidatableObject
    {
        /// <summary>
        /// The quality of the read taken.  If absent then assumed to be ACTUAL
        /// </summary>
        /// <value>The quality of the read taken.  If absent then assumed to be ACTUAL</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum ACTUAL for value: ACTUAL
            /// </summary>
            [EnumMember(Value = "ACTUAL")]
            ACTUAL = 1,

            /// <summary>
            /// Enum SUBSTITUTE for value: SUBSTITUTE
            /// </summary>
            [EnumMember(Value = "SUBSTITUTE")]
            SUBSTITUTE = 2,

            /// <summary>
            /// Enum FINALSUBSTITUTE for value: FINAL_SUBSTITUTE
            /// </summary>
            [EnumMember(Value = "FINAL_SUBSTITUTE")]
            FINALSUBSTITUTE = 3

        }


        /// <summary>
        /// The quality of the read taken.  If absent then assumed to be ACTUAL
        /// </summary>
        /// <value>The quality of the read taken.  If absent then assumed to be ACTUAL</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyUsageReadIntervalReadIntervalReads" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyUsageReadIntervalReadIntervalReads() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyUsageReadIntervalReadIntervalReads" /> class.
        /// </summary>
        /// <param name="quality">The quality of the read taken.  If absent then assumed to be ACTUAL (default to QualityEnum.ACTUAL).</param>
        /// <param name="value">Interval value.  If positive then it means consumption, if negative it means export (required).</param>
        public EnergyUsageReadIntervalReadIntervalReads(QualityEnum? quality = QualityEnum.ACTUAL, decimal value = default(decimal))
        {
            this.Value = value;
            this.Quality = quality;
        }

        /// <summary>
        /// Interval value.  If positive then it means consumption, if negative it means export
        /// </summary>
        /// <value>Interval value.  If positive then it means consumption, if negative it means export</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyUsageReadIntervalReadIntervalReads {\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyUsageReadIntervalReadIntervalReads);
        }

        /// <summary>
        /// Returns true if EnergyUsageReadIntervalReadIntervalReads instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyUsageReadIntervalReadIntervalReads to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyUsageReadIntervalReadIntervalReads input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Quality.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
