/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyPlanContract
    /// </summary>
    [DataContract(Name = "EnergyPlanContract")]
    public partial class EnergyPlanContract : IEquatable<EnergyPlanContract>, IValidatableObject
    {
        /// <summary>
        /// The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:&lt;ul&gt;&lt;li&gt;**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.&lt;/li&gt;&lt;li&gt;**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed&lt;/li&gt;&lt;li&gt;**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors&lt;/li&gt;&lt;li&gt;**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:&lt;ul&gt;&lt;li&gt;**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.&lt;/li&gt;&lt;li&gt;**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed&lt;/li&gt;&lt;li&gt;**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors&lt;/li&gt;&lt;li&gt;**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PricingModelEnum
        {
            /// <summary>
            /// Enum SINGLERATE for value: SINGLE_RATE
            /// </summary>
            [EnumMember(Value = "SINGLE_RATE")]
            SINGLERATE = 1,

            /// <summary>
            /// Enum SINGLERATECONTLOAD for value: SINGLE_RATE_CONT_LOAD
            /// </summary>
            [EnumMember(Value = "SINGLE_RATE_CONT_LOAD")]
            SINGLERATECONTLOAD = 2,

            /// <summary>
            /// Enum TIMEOFUSE for value: TIME_OF_USE
            /// </summary>
            [EnumMember(Value = "TIME_OF_USE")]
            TIMEOFUSE = 3,

            /// <summary>
            /// Enum TIMEOFUSECONTLOAD for value: TIME_OF_USE_CONT_LOAD
            /// </summary>
            [EnumMember(Value = "TIME_OF_USE_CONT_LOAD")]
            TIMEOFUSECONTLOAD = 4,

            /// <summary>
            /// Enum FLEXIBLE for value: FLEXIBLE
            /// </summary>
            [EnumMember(Value = "FLEXIBLE")]
            FLEXIBLE = 5,

            /// <summary>
            /// Enum FLEXIBLECONTLOAD for value: FLEXIBLE_CONT_LOAD
            /// </summary>
            [EnumMember(Value = "FLEXIBLE_CONT_LOAD")]
            FLEXIBLECONTLOAD = 6,

            /// <summary>
            /// Enum QUOTA for value: QUOTA
            /// </summary>
            [EnumMember(Value = "QUOTA")]
            QUOTA = 7

        }


        /// <summary>
        /// The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:&lt;ul&gt;&lt;li&gt;**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.&lt;/li&gt;&lt;li&gt;**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed&lt;/li&gt;&lt;li&gt;**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors&lt;/li&gt;&lt;li&gt;**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:&lt;ul&gt;&lt;li&gt;**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.&lt;/li&gt;&lt;li&gt;**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed&lt;/li&gt;&lt;li&gt;**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors&lt;/li&gt;&lt;li&gt;**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "pricingModel", IsRequired = true, EmitDefaultValue = false)]
        public PricingModelEnum PricingModel { get; set; }
        /// <summary>
        /// Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds
        /// </summary>
        /// <value>Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeZoneEnum
        {
            /// <summary>
            /// Enum LOCAL for value: LOCAL
            /// </summary>
            [EnumMember(Value = "LOCAL")]
            LOCAL = 1,

            /// <summary>
            /// Enum AEST for value: AEST
            /// </summary>
            [EnumMember(Value = "AEST")]
            AEST = 2

        }


        /// <summary>
        /// Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds
        /// </summary>
        /// <value>Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds</value>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public TimeZoneEnum? TimeZone { get; set; }
        /// <summary>
        /// Defines PaymentOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentOptionEnum
        {
            /// <summary>
            /// Enum PAPERBILL for value: PAPER_BILL
            /// </summary>
            [EnumMember(Value = "PAPER_BILL")]
            PAPERBILL = 1,

            /// <summary>
            /// Enum CREDITCARD for value: CREDIT_CARD
            /// </summary>
            [EnumMember(Value = "CREDIT_CARD")]
            CREDITCARD = 2,

            /// <summary>
            /// Enum DIRECTDEBIT for value: DIRECT_DEBIT
            /// </summary>
            [EnumMember(Value = "DIRECT_DEBIT")]
            DIRECTDEBIT = 3,

            /// <summary>
            /// Enum BPAY for value: BPAY
            /// </summary>
            [EnumMember(Value = "BPAY")]
            BPAY = 4,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 5

        }



        /// <summary>
        /// Payment options for this contract
        /// </summary>
        /// <value>Payment options for this contract</value>
        [DataMember(Name = "paymentOption", IsRequired = true, EmitDefaultValue = false)]
        public List<PaymentOptionEnum> PaymentOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanContract" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyPlanContract() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanContract" /> class.
        /// </summary>
        /// <param name="additionalFeeInformation">Free text field containing additional information of the fees for this contract.</param>
        /// <param name="pricingModel">The pricing model for the contract.  Contracts for gas must use SINGLE_RATE.  Note that the detail for the enumeration values are:&lt;ul&gt;&lt;li&gt;**SINGLE_RATE** - all energy usage is charged at a single unit rate no matter when it is consumed. Multiple unit rates may exist that correspond to varying volumes of usage i.e. a ‘block’ or ‘step’ tariff (first 50kWh @ X cents, next 50kWh at Y cents etc.&lt;/li&gt;&lt;li&gt;**SINGLE_RATE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**TIME_OF_USE** - energy usage is charged at unit rates that vary dependent on time of day and day of week that the energy is consumed&lt;/li&gt;&lt;li&gt;**TIME_OF_USE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**FLEXIBLE** - energy usage is charged at unit rates that vary based on external factors&lt;/li&gt;&lt;li&gt;**FLEXIBLE_CONT_LOAD** - as above, but with an additional, separate unit rate charged for all energy usage from a controlled load i.e. separately metered appliance like hot water service, pool pump etc.&lt;/li&gt;&lt;li&gt;**QUOTA** - all energy usage is charged at a single fixed rate, up to a specified usage quota/allowance. All excess usage beyond the allowance is then charged at a single unit rate (may not be the best way to explain it but it is essentially a ‘subscription’ or telco style product i.e. $50/month for up to 150kWh included usage&lt;/li&gt;&lt;/ul&gt; (required).</param>
        /// <param name="timeZone">Required if pricingModel is set to TIME_OF_USE.  Defines the time zone to use for calculation of the time of use thresholds.</param>
        /// <param name="isFixed">Flag indicating whether prices are fixed or variable (required).</param>
        /// <param name="variation">Free text description of price variation policy and conditions for the contract.  Mandatory if isFixed is true.</param>
        /// <param name="onExpiryDescription">Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period.</param>
        /// <param name="paymentOption">Payment options for this contract (required).</param>
        /// <param name="intrinsicGreenPower">intrinsicGreenPower.</param>
        /// <param name="controlledLoad">controlledLoad.</param>
        /// <param name="incentives">Optional list of incentives available for the contract.</param>
        /// <param name="discounts">Optional list of discounts available for the contract.</param>
        /// <param name="greenPowerCharges">Optional list of charges applicable to green power.</param>
        /// <param name="eligibility">Eligibility restrictions or requirements.</param>
        /// <param name="fees">An array of fees applicable to the plan.</param>
        /// <param name="solarFeedInTariff">Array of feed in tariffs for solar power.</param>
        /// <param name="tariffPeriod">Array of tariff periods (required).</param>
        public EnergyPlanContract(string additionalFeeInformation = default(string), PricingModelEnum pricingModel = default(PricingModelEnum), TimeZoneEnum? timeZone = default(TimeZoneEnum?), bool isFixed = default(bool), string variation = default(string), string onExpiryDescription = default(string), List<PaymentOptionEnum> paymentOption = default(List<PaymentOptionEnum>), EnergyPlanContractIntrinsicGreenPower intrinsicGreenPower = default(EnergyPlanContractIntrinsicGreenPower), EnergyPlanControlledLoad controlledLoad = default(EnergyPlanControlledLoad), List<Object> incentives = default(List<Object>), List<Object> discounts = default(List<Object>), List<Object> greenPowerCharges = default(List<Object>), List<Object> eligibility = default(List<Object>), List<Object> fees = default(List<Object>), List<Object> solarFeedInTariff = default(List<Object>), List<Object> tariffPeriod = default(List<Object>))
        {
            this.PricingModel = pricingModel;
            this.IsFixed = isFixed;
            // to ensure "paymentOption" is required (not null)
            this.PaymentOption = paymentOption ?? throw new ArgumentNullException("paymentOption is a required property for EnergyPlanContract and cannot be null");
            // to ensure "tariffPeriod" is required (not null)
            this.TariffPeriod = tariffPeriod ?? throw new ArgumentNullException("tariffPeriod is a required property for EnergyPlanContract and cannot be null");
            this.AdditionalFeeInformation = additionalFeeInformation;
            this.TimeZone = timeZone;
            this.Variation = variation;
            this.OnExpiryDescription = onExpiryDescription;
            this.IntrinsicGreenPower = intrinsicGreenPower;
            this.ControlledLoad = controlledLoad;
            this.Incentives = incentives;
            this.Discounts = discounts;
            this.GreenPowerCharges = greenPowerCharges;
            this.Eligibility = eligibility;
            this.Fees = fees;
            this.SolarFeedInTariff = solarFeedInTariff;
        }

        /// <summary>
        /// Free text field containing additional information of the fees for this contract
        /// </summary>
        /// <value>Free text field containing additional information of the fees for this contract</value>
        [DataMember(Name = "additionalFeeInformation", EmitDefaultValue = false)]
        public string AdditionalFeeInformation { get; set; }

        /// <summary>
        /// Flag indicating whether prices are fixed or variable
        /// </summary>
        /// <value>Flag indicating whether prices are fixed or variable</value>
        [DataMember(Name = "isFixed", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFixed { get; set; }

        /// <summary>
        /// Free text description of price variation policy and conditions for the contract.  Mandatory if isFixed is true
        /// </summary>
        /// <value>Free text description of price variation policy and conditions for the contract.  Mandatory if isFixed is true</value>
        [DataMember(Name = "variation", EmitDefaultValue = false)]
        public string Variation { get; set; }

        /// <summary>
        /// Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period
        /// </summary>
        /// <value>Free text field that describes what will occur on or prior to expiry of the fixed contract term or benefit period</value>
        [DataMember(Name = "onExpiryDescription", EmitDefaultValue = false)]
        public string OnExpiryDescription { get; set; }

        /// <summary>
        /// Gets or Sets IntrinsicGreenPower
        /// </summary>
        [DataMember(Name = "intrinsicGreenPower", EmitDefaultValue = false)]
        public EnergyPlanContractIntrinsicGreenPower IntrinsicGreenPower { get; set; }

        /// <summary>
        /// Gets or Sets ControlledLoad
        /// </summary>
        [DataMember(Name = "controlledLoad", EmitDefaultValue = false)]
        public EnergyPlanControlledLoad ControlledLoad { get; set; }

        /// <summary>
        /// Optional list of incentives available for the contract
        /// </summary>
        /// <value>Optional list of incentives available for the contract</value>
        [DataMember(Name = "incentives", EmitDefaultValue = false)]
        public List<Object> Incentives { get; set; }

        /// <summary>
        /// Optional list of discounts available for the contract
        /// </summary>
        /// <value>Optional list of discounts available for the contract</value>
        [DataMember(Name = "discounts", EmitDefaultValue = false)]
        public List<Object> Discounts { get; set; }

        /// <summary>
        /// Optional list of charges applicable to green power
        /// </summary>
        /// <value>Optional list of charges applicable to green power</value>
        [DataMember(Name = "greenPowerCharges", EmitDefaultValue = false)]
        public List<Object> GreenPowerCharges { get; set; }

        /// <summary>
        /// Eligibility restrictions or requirements
        /// </summary>
        /// <value>Eligibility restrictions or requirements</value>
        [DataMember(Name = "eligibility", EmitDefaultValue = false)]
        public List<Object> Eligibility { get; set; }

        /// <summary>
        /// An array of fees applicable to the plan
        /// </summary>
        /// <value>An array of fees applicable to the plan</value>
        [DataMember(Name = "fees", EmitDefaultValue = false)]
        public List<Object> Fees { get; set; }

        /// <summary>
        /// Array of feed in tariffs for solar power
        /// </summary>
        /// <value>Array of feed in tariffs for solar power</value>
        [DataMember(Name = "solarFeedInTariff", EmitDefaultValue = false)]
        public List<Object> SolarFeedInTariff { get; set; }

        /// <summary>
        /// Array of tariff periods
        /// </summary>
        /// <value>Array of tariff periods</value>
        [DataMember(Name = "tariffPeriod", IsRequired = true, EmitDefaultValue = false)]
        public List<Object> TariffPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanContract {\n");
            sb.Append("  AdditionalFeeInformation: ").Append(AdditionalFeeInformation).Append("\n");
            sb.Append("  PricingModel: ").Append(PricingModel).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  IsFixed: ").Append(IsFixed).Append("\n");
            sb.Append("  Variation: ").Append(Variation).Append("\n");
            sb.Append("  OnExpiryDescription: ").Append(OnExpiryDescription).Append("\n");
            sb.Append("  PaymentOption: ").Append(PaymentOption).Append("\n");
            sb.Append("  IntrinsicGreenPower: ").Append(IntrinsicGreenPower).Append("\n");
            sb.Append("  ControlledLoad: ").Append(ControlledLoad).Append("\n");
            sb.Append("  Incentives: ").Append(Incentives).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  GreenPowerCharges: ").Append(GreenPowerCharges).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  SolarFeedInTariff: ").Append(SolarFeedInTariff).Append("\n");
            sb.Append("  TariffPeriod: ").Append(TariffPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyPlanContract);
        }

        /// <summary>
        /// Returns true if EnergyPlanContract instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyPlanContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalFeeInformation == input.AdditionalFeeInformation ||
                    (this.AdditionalFeeInformation != null &&
                    this.AdditionalFeeInformation.Equals(input.AdditionalFeeInformation))
                ) && 
                (
                    this.PricingModel == input.PricingModel ||
                    this.PricingModel.Equals(input.PricingModel)
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    this.TimeZone.Equals(input.TimeZone)
                ) && 
                (
                    this.IsFixed == input.IsFixed ||
                    this.IsFixed.Equals(input.IsFixed)
                ) && 
                (
                    this.Variation == input.Variation ||
                    (this.Variation != null &&
                    this.Variation.Equals(input.Variation))
                ) && 
                (
                    this.OnExpiryDescription == input.OnExpiryDescription ||
                    (this.OnExpiryDescription != null &&
                    this.OnExpiryDescription.Equals(input.OnExpiryDescription))
                ) && 
                (
                    this.PaymentOption == input.PaymentOption ||
                    this.PaymentOption.SequenceEqual(input.PaymentOption)
                ) && 
                (
                    this.IntrinsicGreenPower == input.IntrinsicGreenPower ||
                    (this.IntrinsicGreenPower != null &&
                    this.IntrinsicGreenPower.Equals(input.IntrinsicGreenPower))
                ) && 
                (
                    this.ControlledLoad == input.ControlledLoad ||
                    (this.ControlledLoad != null &&
                    this.ControlledLoad.Equals(input.ControlledLoad))
                ) && 
                (
                    this.Incentives == input.Incentives ||
                    this.Incentives != null &&
                    input.Incentives != null &&
                    this.Incentives.SequenceEqual(input.Incentives)
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    input.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                ) && 
                (
                    this.GreenPowerCharges == input.GreenPowerCharges ||
                    this.GreenPowerCharges != null &&
                    input.GreenPowerCharges != null &&
                    this.GreenPowerCharges.SequenceEqual(input.GreenPowerCharges)
                ) && 
                (
                    this.Eligibility == input.Eligibility ||
                    this.Eligibility != null &&
                    input.Eligibility != null &&
                    this.Eligibility.SequenceEqual(input.Eligibility)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.SolarFeedInTariff == input.SolarFeedInTariff ||
                    this.SolarFeedInTariff != null &&
                    input.SolarFeedInTariff != null &&
                    this.SolarFeedInTariff.SequenceEqual(input.SolarFeedInTariff)
                ) && 
                (
                    this.TariffPeriod == input.TariffPeriod ||
                    this.TariffPeriod != null &&
                    input.TariffPeriod != null &&
                    this.TariffPeriod.SequenceEqual(input.TariffPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalFeeInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalFeeInformation.GetHashCode();
                hashCode = hashCode * 59 + this.PricingModel.GetHashCode();
                hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                hashCode = hashCode * 59 + this.IsFixed.GetHashCode();
                if (this.Variation != null)
                    hashCode = hashCode * 59 + this.Variation.GetHashCode();
                if (this.OnExpiryDescription != null)
                    hashCode = hashCode * 59 + this.OnExpiryDescription.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentOption.GetHashCode();
                if (this.IntrinsicGreenPower != null)
                    hashCode = hashCode * 59 + this.IntrinsicGreenPower.GetHashCode();
                if (this.ControlledLoad != null)
                    hashCode = hashCode * 59 + this.ControlledLoad.GetHashCode();
                if (this.Incentives != null)
                    hashCode = hashCode * 59 + this.Incentives.GetHashCode();
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                if (this.GreenPowerCharges != null)
                    hashCode = hashCode * 59 + this.GreenPowerCharges.GetHashCode();
                if (this.Eligibility != null)
                    hashCode = hashCode * 59 + this.Eligibility.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.SolarFeedInTariff != null)
                    hashCode = hashCode * 59 + this.SolarFeedInTariff.GetHashCode();
                if (this.TariffPeriod != null)
                    hashCode = hashCode * 59 + this.TariffPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
