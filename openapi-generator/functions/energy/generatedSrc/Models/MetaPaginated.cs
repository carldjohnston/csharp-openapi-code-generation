/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// MetaPaginated
    /// </summary>
    [DataContract(Name = "MetaPaginated")]
    public partial class MetaPaginated : IEquatable<MetaPaginated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaPaginated" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetaPaginated() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaPaginated" /> class.
        /// </summary>
        /// <param name="totalRecords">The total number of records in the full set. See [pagination](#pagination). (required).</param>
        /// <param name="totalPages">The total number of pages in the full set. See [pagination](#pagination). (required).</param>
        public MetaPaginated(int totalRecords = default(int), int totalPages = default(int))
        {
            this.TotalRecords = totalRecords;
            this.TotalPages = totalPages;
        }

        /// <summary>
        /// The total number of records in the full set. See [pagination](#pagination).
        /// </summary>
        /// <value>The total number of records in the full set. See [pagination](#pagination).</value>
        [DataMember(Name = "totalRecords", IsRequired = true, EmitDefaultValue = false)]
        public int TotalRecords { get; set; }

        /// <summary>
        /// The total number of pages in the full set. See [pagination](#pagination).
        /// </summary>
        /// <value>The total number of pages in the full set. See [pagination](#pagination).</value>
        [DataMember(Name = "totalPages", IsRequired = true, EmitDefaultValue = false)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaPaginated {\n");
            sb.Append("  TotalRecords: ").Append(TotalRecords).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaPaginated);
        }

        /// <summary>
        /// Returns true if MetaPaginated instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaPaginated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaPaginated input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalRecords == input.TotalRecords ||
                    this.TotalRecords.Equals(input.TotalRecords)
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    this.TotalPages.Equals(input.TotalPages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TotalRecords.GetHashCode();
                hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
