/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyPlanControlledLoadRates
    /// </summary>
    [DataContract(Name = "EnergyPlanControlledLoad_rates")]
    public partial class EnergyPlanControlledLoadRates : IEquatable<EnergyPlanControlledLoadRates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanControlledLoadRates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyPlanControlledLoadRates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanControlledLoadRates" /> class.
        /// </summary>
        /// <param name="unitPrice">Unit price of usage per kWh (exclusive of GST) (required).</param>
        /// <param name="volume">Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period.</param>
        public EnergyPlanControlledLoadRates(string unitPrice = default(string), decimal volume = default(decimal))
        {
            // to ensure "unitPrice" is required (not null)
            this.UnitPrice = unitPrice ?? throw new ArgumentNullException("unitPrice is a required property for EnergyPlanControlledLoadRates and cannot be null");
            this.Volume = volume;
        }

        /// <summary>
        /// Unit price of usage per kWh (exclusive of GST)
        /// </summary>
        /// <value>Unit price of usage per kWh (exclusive of GST)</value>
        [DataMember(Name = "unitPrice", IsRequired = true, EmitDefaultValue = false)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period
        /// </summary>
        /// <value>Volume in kWh that this rate applies to.  Only applicable for ‘stepped’ rates where different rates apply for different volumes of usage in a period</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public decimal Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanControlledLoadRates {\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyPlanControlledLoadRates);
        }

        /// <summary>
        /// Returns true if EnergyPlanControlledLoadRates instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyPlanControlledLoadRates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanControlledLoadRates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
