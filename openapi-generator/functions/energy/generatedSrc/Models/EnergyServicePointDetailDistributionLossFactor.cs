/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyServicePointDetailDistributionLossFactor
    /// </summary>
    [DataContract(Name = "EnergyServicePointDetail_distributionLossFactor")]
    public partial class EnergyServicePointDetailDistributionLossFactor : IEquatable<EnergyServicePointDetailDistributionLossFactor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyServicePointDetailDistributionLossFactor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyServicePointDetailDistributionLossFactor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyServicePointDetailDistributionLossFactor" /> class.
        /// </summary>
        /// <param name="code">A code used to identify data loss factor for the service point values.  Refer to AEMO distribution loss factor documents for each financial year to interpret (required).</param>
        /// <param name="description">Description of the data loss factor code and value (required).</param>
        /// <param name="lossValue">The value associated with the loss factor code (required).</param>
        public EnergyServicePointDetailDistributionLossFactor(string code = default(string), string description = default(string), string lossValue = default(string))
        {
            // to ensure "code" is required (not null)
            this.Code = code ?? throw new ArgumentNullException("code is a required property for EnergyServicePointDetailDistributionLossFactor and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for EnergyServicePointDetailDistributionLossFactor and cannot be null");
            // to ensure "lossValue" is required (not null)
            this.LossValue = lossValue ?? throw new ArgumentNullException("lossValue is a required property for EnergyServicePointDetailDistributionLossFactor and cannot be null");
        }

        /// <summary>
        /// A code used to identify data loss factor for the service point values.  Refer to AEMO distribution loss factor documents for each financial year to interpret
        /// </summary>
        /// <value>A code used to identify data loss factor for the service point values.  Refer to AEMO distribution loss factor documents for each financial year to interpret</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Description of the data loss factor code and value
        /// </summary>
        /// <value>Description of the data loss factor code and value</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The value associated with the loss factor code
        /// </summary>
        /// <value>The value associated with the loss factor code</value>
        [DataMember(Name = "lossValue", IsRequired = true, EmitDefaultValue = false)]
        public string LossValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetailDistributionLossFactor {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LossValue: ").Append(LossValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyServicePointDetailDistributionLossFactor);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetailDistributionLossFactor instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyServicePointDetailDistributionLossFactor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetailDistributionLossFactor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LossValue == input.LossValue ||
                    (this.LossValue != null &&
                    this.LossValue.Equals(input.LossValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LossValue != null)
                    hashCode = hashCode * 59 + this.LossValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
