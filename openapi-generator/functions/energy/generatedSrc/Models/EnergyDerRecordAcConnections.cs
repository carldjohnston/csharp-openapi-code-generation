/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyDerRecordAcConnections
    /// </summary>
    [DataContract(Name = "EnergyDerRecord_acConnections")]
    public partial class EnergyDerRecordAcConnections : IEquatable<EnergyDerRecordAcConnections>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.
        /// </summary>
        /// <value>Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EquipmentTypeEnum
        {
            /// <summary>
            /// Enum INVERTER for value: INVERTER
            /// </summary>
            [EnumMember(Value = "INVERTER")]
            INVERTER = 1,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 2

        }


        /// <summary>
        /// Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.
        /// </summary>
        /// <value>Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.</value>
        [DataMember(Name = "equipmentType", EmitDefaultValue = false)]
        public EquipmentTypeEnum? EquipmentType { get; set; }
        /// <summary>
        /// Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2,

            /// <summary>
            /// Enum DECOMMISSIONED for value: DECOMMISSIONED
            /// </summary>
            [EnumMember(Value = "DECOMMISSIONED")]
            DECOMMISSIONED = 3

        }


        /// <summary>
        /// Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecordAcConnections" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyDerRecordAcConnections() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecordAcConnections" /> class.
        /// </summary>
        /// <param name="connectionIdentifier">AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards (required).</param>
        /// <param name="count">Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes (required).</param>
        /// <param name="equipmentType">Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”..</param>
        /// <param name="manufacturerName">The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER.</param>
        /// <param name="inverterSeries">The inverter series. Mandatory if equipmentType is INVERTER.</param>
        /// <param name="inverterModelNumber">The inverter model number. Mandatory if equipmentType is INVERTER.</param>
        /// <param name="commissioningDate">The date that the DER installation is commissioned (required).</param>
        /// <param name="status">Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned (required).</param>
        /// <param name="inverterDeviceCapacity">The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER.</param>
        /// <param name="derDevices">derDevices (required).</param>
        public EnergyDerRecordAcConnections(decimal connectionIdentifier = default(decimal), string count = default(string), EquipmentTypeEnum? equipmentType = default(EquipmentTypeEnum?), string manufacturerName = default(string), string inverterSeries = default(string), string inverterModelNumber = default(string), string commissioningDate = default(string), StatusEnum status = default(StatusEnum), decimal inverterDeviceCapacity = default(decimal), List<EnergyDerRecordDerDevices> derDevices = default(List<EnergyDerRecordDerDevices>))
        {
            this.ConnectionIdentifier = connectionIdentifier;
            // to ensure "count" is required (not null)
            this.Count = count ?? throw new ArgumentNullException("count is a required property for EnergyDerRecordAcConnections and cannot be null");
            // to ensure "commissioningDate" is required (not null)
            this.CommissioningDate = commissioningDate ?? throw new ArgumentNullException("commissioningDate is a required property for EnergyDerRecordAcConnections and cannot be null");
            this.Status = status;
            // to ensure "derDevices" is required (not null)
            this.DerDevices = derDevices ?? throw new ArgumentNullException("derDevices is a required property for EnergyDerRecordAcConnections and cannot be null");
            this.EquipmentType = equipmentType;
            this.ManufacturerName = manufacturerName;
            this.InverterSeries = inverterSeries;
            this.InverterModelNumber = inverterModelNumber;
            this.InverterDeviceCapacity = inverterDeviceCapacity;
        }

        /// <summary>
        /// AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards
        /// </summary>
        /// <value>AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards</value>
        [DataMember(Name = "connectionIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public decimal ConnectionIdentifier { get; set; }

        /// <summary>
        /// Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes
        /// </summary>
        /// <value>Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = false)]
        public string Count { get; set; }

        /// <summary>
        /// The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name = "manufacturerName", EmitDefaultValue = false)]
        public string ManufacturerName { get; set; }

        /// <summary>
        /// The inverter series. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The inverter series. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name = "inverterSeries", EmitDefaultValue = false)]
        public string InverterSeries { get; set; }

        /// <summary>
        /// The inverter model number. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The inverter model number. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name = "inverterModelNumber", EmitDefaultValue = false)]
        public string InverterModelNumber { get; set; }

        /// <summary>
        /// The date that the DER installation is commissioned
        /// </summary>
        /// <value>The date that the DER installation is commissioned</value>
        [DataMember(Name = "commissioningDate", IsRequired = true, EmitDefaultValue = false)]
        public string CommissioningDate { get; set; }

        /// <summary>
        /// The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER
        /// </summary>
        /// <value>The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER</value>
        [DataMember(Name = "inverterDeviceCapacity", EmitDefaultValue = false)]
        public decimal InverterDeviceCapacity { get; set; }

        /// <summary>
        /// Gets or Sets DerDevices
        /// </summary>
        [DataMember(Name = "derDevices", IsRequired = true, EmitDefaultValue = false)]
        public List<EnergyDerRecordDerDevices> DerDevices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecordAcConnections {\n");
            sb.Append("  ConnectionIdentifier: ").Append(ConnectionIdentifier).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  EquipmentType: ").Append(EquipmentType).Append("\n");
            sb.Append("  ManufacturerName: ").Append(ManufacturerName).Append("\n");
            sb.Append("  InverterSeries: ").Append(InverterSeries).Append("\n");
            sb.Append("  InverterModelNumber: ").Append(InverterModelNumber).Append("\n");
            sb.Append("  CommissioningDate: ").Append(CommissioningDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InverterDeviceCapacity: ").Append(InverterDeviceCapacity).Append("\n");
            sb.Append("  DerDevices: ").Append(DerDevices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyDerRecordAcConnections);
        }

        /// <summary>
        /// Returns true if EnergyDerRecordAcConnections instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyDerRecordAcConnections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecordAcConnections input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectionIdentifier == input.ConnectionIdentifier ||
                    this.ConnectionIdentifier.Equals(input.ConnectionIdentifier)
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.EquipmentType == input.EquipmentType ||
                    this.EquipmentType.Equals(input.EquipmentType)
                ) && 
                (
                    this.ManufacturerName == input.ManufacturerName ||
                    (this.ManufacturerName != null &&
                    this.ManufacturerName.Equals(input.ManufacturerName))
                ) && 
                (
                    this.InverterSeries == input.InverterSeries ||
                    (this.InverterSeries != null &&
                    this.InverterSeries.Equals(input.InverterSeries))
                ) && 
                (
                    this.InverterModelNumber == input.InverterModelNumber ||
                    (this.InverterModelNumber != null &&
                    this.InverterModelNumber.Equals(input.InverterModelNumber))
                ) && 
                (
                    this.CommissioningDate == input.CommissioningDate ||
                    (this.CommissioningDate != null &&
                    this.CommissioningDate.Equals(input.CommissioningDate))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.InverterDeviceCapacity == input.InverterDeviceCapacity ||
                    this.InverterDeviceCapacity.Equals(input.InverterDeviceCapacity)
                ) && 
                (
                    this.DerDevices == input.DerDevices ||
                    this.DerDevices != null &&
                    input.DerDevices != null &&
                    this.DerDevices.SequenceEqual(input.DerDevices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ConnectionIdentifier.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                hashCode = hashCode * 59 + this.EquipmentType.GetHashCode();
                if (this.ManufacturerName != null)
                    hashCode = hashCode * 59 + this.ManufacturerName.GetHashCode();
                if (this.InverterSeries != null)
                    hashCode = hashCode * 59 + this.InverterSeries.GetHashCode();
                if (this.InverterModelNumber != null)
                    hashCode = hashCode * 59 + this.InverterModelNumber.GetHashCode();
                if (this.CommissioningDate != null)
                    hashCode = hashCode * 59 + this.CommissioningDate.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.InverterDeviceCapacity.GetHashCode();
                if (this.DerDevices != null)
                    hashCode = hashCode * 59 + this.DerDevices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
