/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// Required if pricing model is SINGLE_RATE_CONT_LOAD or TIME_OF_USE_CONT_LOAD or FLEXIBLE_CONT_LOAD
    /// </summary>
    [DataContract(Name = "EnergyPlanControlledLoad")]
    public partial class EnergyPlanControlledLoad : IEquatable<EnergyPlanControlledLoad>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanControlledLoad" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyPlanControlledLoad() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanControlledLoad" /> class.
        /// </summary>
        /// <param name="displayName">A display name for the controlled load tier (required).</param>
        /// <param name="description">A description of the controlled load tier.</param>
        /// <param name="dailyCharge">The daily supply charge (exclusive of GST) for this controlled load tier (required).</param>
        /// <param name="period">The period for which the controlled load rate applies. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) (required).</param>
        /// <param name="rates">Array of controlled load rates in order of usage volume (required).</param>
        public EnergyPlanControlledLoad(string displayName = default(string), string description = default(string), string dailyCharge = default(string), string period = default(string), List<EnergyPlanControlledLoadRates> rates = default(List<EnergyPlanControlledLoadRates>))
        {
            // to ensure "displayName" is required (not null)
            this.DisplayName = displayName ?? throw new ArgumentNullException("displayName is a required property for EnergyPlanControlledLoad and cannot be null");
            // to ensure "dailyCharge" is required (not null)
            this.DailyCharge = dailyCharge ?? throw new ArgumentNullException("dailyCharge is a required property for EnergyPlanControlledLoad and cannot be null");
            // to ensure "period" is required (not null)
            this.Period = period ?? throw new ArgumentNullException("period is a required property for EnergyPlanControlledLoad and cannot be null");
            // to ensure "rates" is required (not null)
            this.Rates = rates ?? throw new ArgumentNullException("rates is a required property for EnergyPlanControlledLoad and cannot be null");
            this.Description = description;
        }

        /// <summary>
        /// A display name for the controlled load tier
        /// </summary>
        /// <value>A display name for the controlled load tier</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A description of the controlled load tier
        /// </summary>
        /// <value>A description of the controlled load tier</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The daily supply charge (exclusive of GST) for this controlled load tier
        /// </summary>
        /// <value>The daily supply charge (exclusive of GST) for this controlled load tier</value>
        [DataMember(Name = "dailyCharge", IsRequired = true, EmitDefaultValue = false)]
        public string DailyCharge { get; set; }

        /// <summary>
        /// The period for which the controlled load rate applies. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>The period for which the controlled load rate applies. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// Array of controlled load rates in order of usage volume
        /// </summary>
        /// <value>Array of controlled load rates in order of usage volume</value>
        [DataMember(Name = "rates", IsRequired = true, EmitDefaultValue = false)]
        public List<EnergyPlanControlledLoadRates> Rates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanControlledLoad {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DailyCharge: ").Append(DailyCharge).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyPlanControlledLoad);
        }

        /// <summary>
        /// Returns true if EnergyPlanControlledLoad instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyPlanControlledLoad to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanControlledLoad input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DailyCharge == input.DailyCharge ||
                    (this.DailyCharge != null &&
                    this.DailyCharge.Equals(input.DailyCharge))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DailyCharge != null)
                    hashCode = hashCode * 59 + this.DailyCharge.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
