/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyServicePointDetail
    /// </summary>
    [DataContract(Name = "EnergyServicePointDetail")]
    public partial class EnergyServicePointDetail : IEquatable<EnergyServicePointDetail>, IValidatableObject
    {
        /// <summary>
        /// The classification of the service point as defined in MSATS procedures
        /// </summary>
        /// <value>The classification of the service point as defined in MSATS procedures</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServicePointClassificationEnum
        {
            /// <summary>
            /// Enum EXTERNALPROFILE for value: EXTERNAL_PROFILE
            /// </summary>
            [EnumMember(Value = "EXTERNAL_PROFILE")]
            EXTERNALPROFILE = 1,

            /// <summary>
            /// Enum GENERATOR for value: GENERATOR
            /// </summary>
            [EnumMember(Value = "GENERATOR")]
            GENERATOR = 2,

            /// <summary>
            /// Enum LARGE for value: LARGE
            /// </summary>
            [EnumMember(Value = "LARGE")]
            LARGE = 3,

            /// <summary>
            /// Enum SMALL for value: SMALL
            /// </summary>
            [EnumMember(Value = "SMALL")]
            SMALL = 4,

            /// <summary>
            /// Enum WHOLESALE for value: WHOLESALE
            /// </summary>
            [EnumMember(Value = "WHOLESALE")]
            WHOLESALE = 5,

            /// <summary>
            /// Enum NONCONTESTUNMETEREDLOAD for value: NON_CONTEST_UNMETERED_LOAD
            /// </summary>
            [EnumMember(Value = "NON_CONTEST_UNMETERED_LOAD")]
            NONCONTESTUNMETEREDLOAD = 6,

            /// <summary>
            /// Enum NONREGISTEREDEMBEDDEDGENERATOR for value: NON_REGISTERED_EMBEDDED_GENERATOR
            /// </summary>
            [EnumMember(Value = "NON_REGISTERED_EMBEDDED_GENERATOR")]
            NONREGISTEREDEMBEDDEDGENERATOR = 7,

            /// <summary>
            /// Enum DISTRIBUTIONWHOLESALE for value: DISTRIBUTION_WHOLESALE
            /// </summary>
            [EnumMember(Value = "DISTRIBUTION_WHOLESALE")]
            DISTRIBUTIONWHOLESALE = 8

        }


        /// <summary>
        /// The classification of the service point as defined in MSATS procedures
        /// </summary>
        /// <value>The classification of the service point as defined in MSATS procedures</value>
        [DataMember(Name = "servicePointClassification", IsRequired = true, EmitDefaultValue = false)]
        public ServicePointClassificationEnum ServicePointClassification { get; set; }
        /// <summary>
        /// Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt; 
        /// </summary>
        /// <value>Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServicePointStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum DEENERGISED for value: DE_ENERGISED
            /// </summary>
            [EnumMember(Value = "DE_ENERGISED")]
            DEENERGISED = 2,

            /// <summary>
            /// Enum EXTINCT for value: EXTINCT
            /// </summary>
            [EnumMember(Value = "EXTINCT")]
            EXTINCT = 3,

            /// <summary>
            /// Enum GREENFIELD for value: GREENFIELD
            /// </summary>
            [EnumMember(Value = "GREENFIELD")]
            GREENFIELD = 4,

            /// <summary>
            /// Enum OFFMARKET for value: OFF_MARKET
            /// </summary>
            [EnumMember(Value = "OFF_MARKET")]
            OFFMARKET = 5

        }


        /// <summary>
        /// Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt; 
        /// </summary>
        /// <value>Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt; </value>
        [DataMember(Name = "servicePointStatus", IsRequired = true, EmitDefaultValue = false)]
        public ServicePointStatusEnum ServicePointStatus { get; set; }
        /// <summary>
        /// Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisdictionCodeEnum
        {
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 1,

            /// <summary>
            /// Enum ACT for value: ACT
            /// </summary>
            [EnumMember(Value = "ACT")]
            ACT = 2,

            /// <summary>
            /// Enum NEM for value: NEM
            /// </summary>
            [EnumMember(Value = "NEM")]
            NEM = 3,

            /// <summary>
            /// Enum NSW for value: NSW
            /// </summary>
            [EnumMember(Value = "NSW")]
            NSW = 4,

            /// <summary>
            /// Enum QLD for value: QLD
            /// </summary>
            [EnumMember(Value = "QLD")]
            QLD = 5,

            /// <summary>
            /// Enum SA for value: SA
            /// </summary>
            [EnumMember(Value = "SA")]
            SA = 6,

            /// <summary>
            /// Enum TAS for value: TAS
            /// </summary>
            [EnumMember(Value = "TAS")]
            TAS = 7,

            /// <summary>
            /// Enum VIC for value: VIC
            /// </summary>
            [EnumMember(Value = "VIC")]
            VIC = 8

        }


        /// <summary>
        /// Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "jurisdictionCode", IsRequired = true, EmitDefaultValue = false)]
        public JurisdictionCodeEnum JurisdictionCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyServicePointDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyServicePointDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyServicePointDetail" /> class.
        /// </summary>
        /// <param name="servicePointId">The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence (required).</param>
        /// <param name="nationalMeteringId">The independent ID of the service point, known in the industry as the NMI (required).</param>
        /// <param name="servicePointClassification">The classification of the service point as defined in MSATS procedures (required).</param>
        /// <param name="servicePointStatus">Code used to indicate the status of the service point. Note the details for the enumeration values below:&lt;ul&gt;&lt;li&gt;**ACTIVE** - An active, energised, service point&lt;/li&gt;&lt;li&gt;**DE_ENERGISED** - The service point exists but is deenergised&lt;/li&gt;&lt;li&gt;**EXTINCT** - The service point has been permanently decommissioned&lt;/li&gt;&lt;li&gt;**GREENFIELD** - Applies to a service point that has never been energised&lt;/li&gt;&lt;li&gt;**OFF_MARKET** - Applies when the service point is no longer settled in the NEM&lt;/li&gt;&lt;/ul&gt;  (required).</param>
        /// <param name="jurisdictionCode">Jurisdiction code to which the service point belongs.This code defines the jurisdictional rules which apply to the service point. Note the details of enumeration values below:&lt;ul&gt;&lt;li&gt;**ALL** - All Jurisdictions&lt;/li&gt;&lt;li&gt;**ACT** - Australian Capital Territory&lt;/li&gt;&lt;li&gt;**NEM** - National Electricity Market&lt;/li&gt;&lt;li&gt;**NSW** - New South Wales&lt;/li&gt;&lt;li&gt;**QLD** - Queensland&lt;/li&gt;&lt;li&gt;**SA** - South Australia&lt;/li&gt;&lt;li&gt;**TAS** - Tasmania&lt;/li&gt;&lt;li&gt;**VIC** - Victoria&lt;/li&gt;&lt;/ul&gt; (required).</param>
        /// <param name="isGenerator">This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer.</param>
        /// <param name="validFromDate">The start date from which this service point first became valid (required).</param>
        /// <param name="lastUpdateDateTime">The date and time that the information for this service point was modified (required).</param>
        /// <param name="consumerProfile">consumerProfile.</param>
        /// <param name="distributionLossFactor">distributionLossFactor (required).</param>
        /// <param name="relatedParticipants">relatedParticipants (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="meters">meters (required).</param>
        public EnergyServicePointDetail(string servicePointId = default(string), string nationalMeteringId = default(string), ServicePointClassificationEnum servicePointClassification = default(ServicePointClassificationEnum), ServicePointStatusEnum servicePointStatus = default(ServicePointStatusEnum), JurisdictionCodeEnum jurisdictionCode = default(JurisdictionCodeEnum), bool isGenerator = default(bool), string validFromDate = default(string), string lastUpdateDateTime = default(string), EnergyServicePointConsumerProfile consumerProfile = default(EnergyServicePointConsumerProfile), EnergyServicePointDetailDistributionLossFactor distributionLossFactor = default(EnergyServicePointDetailDistributionLossFactor), List<EnergyServicePointDetailRelatedParticipants> relatedParticipants = default(List<EnergyServicePointDetailRelatedParticipants>), EnergyServicePointDetailLocation location = default(EnergyServicePointDetailLocation), EnergyServicePointDetailMeters meters = default(EnergyServicePointDetailMeters))
        {
            // to ensure "servicePointId" is required (not null)
            this.ServicePointId = servicePointId ?? throw new ArgumentNullException("servicePointId is a required property for EnergyServicePointDetail and cannot be null");
            // to ensure "nationalMeteringId" is required (not null)
            this.NationalMeteringId = nationalMeteringId ?? throw new ArgumentNullException("nationalMeteringId is a required property for EnergyServicePointDetail and cannot be null");
            this.ServicePointClassification = servicePointClassification;
            this.ServicePointStatus = servicePointStatus;
            this.JurisdictionCode = jurisdictionCode;
            // to ensure "validFromDate" is required (not null)
            this.ValidFromDate = validFromDate ?? throw new ArgumentNullException("validFromDate is a required property for EnergyServicePointDetail and cannot be null");
            // to ensure "lastUpdateDateTime" is required (not null)
            this.LastUpdateDateTime = lastUpdateDateTime ?? throw new ArgumentNullException("lastUpdateDateTime is a required property for EnergyServicePointDetail and cannot be null");
            // to ensure "distributionLossFactor" is required (not null)
            this.DistributionLossFactor = distributionLossFactor ?? throw new ArgumentNullException("distributionLossFactor is a required property for EnergyServicePointDetail and cannot be null");
            // to ensure "relatedParticipants" is required (not null)
            this.RelatedParticipants = relatedParticipants ?? throw new ArgumentNullException("relatedParticipants is a required property for EnergyServicePointDetail and cannot be null");
            // to ensure "location" is required (not null)
            this.Location = location ?? throw new ArgumentNullException("location is a required property for EnergyServicePointDetail and cannot be null");
            // to ensure "meters" is required (not null)
            this.Meters = meters ?? throw new ArgumentNullException("meters is a required property for EnergyServicePointDetail and cannot be null");
            this.IsGenerator = isGenerator;
            this.ConsumerProfile = consumerProfile;
        }

        /// <summary>
        /// The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence
        /// </summary>
        /// <value>The tokenised ID of the service point for use in the CDR APIs.  Created according to the CDR rules for ID permanence</value>
        [DataMember(Name = "servicePointId", IsRequired = true, EmitDefaultValue = false)]
        public string ServicePointId { get; set; }

        /// <summary>
        /// The independent ID of the service point, known in the industry as the NMI
        /// </summary>
        /// <value>The independent ID of the service point, known in the industry as the NMI</value>
        [DataMember(Name = "nationalMeteringId", IsRequired = true, EmitDefaultValue = false)]
        public string NationalMeteringId { get; set; }

        /// <summary>
        /// This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer
        /// </summary>
        /// <value>This flag determines whether the energy at this connection point is to be treated as consumer load or as a generating unit(this may include generator auxiliary loads). If absent defaults to false. &lt;br&gt;**Note:** Only applicable for scheduled or semischeduled generators, does not indicate on site generation by consumer</value>
        [DataMember(Name = "isGenerator", EmitDefaultValue = true)]
        public bool IsGenerator { get; set; }

        /// <summary>
        /// The start date from which this service point first became valid
        /// </summary>
        /// <value>The start date from which this service point first became valid</value>
        [DataMember(Name = "validFromDate", IsRequired = true, EmitDefaultValue = false)]
        public string ValidFromDate { get; set; }

        /// <summary>
        /// The date and time that the information for this service point was modified
        /// </summary>
        /// <value>The date and time that the information for this service point was modified</value>
        [DataMember(Name = "lastUpdateDateTime", IsRequired = true, EmitDefaultValue = false)]
        public string LastUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerProfile
        /// </summary>
        [DataMember(Name = "consumerProfile", EmitDefaultValue = false)]
        public EnergyServicePointConsumerProfile ConsumerProfile { get; set; }

        /// <summary>
        /// Gets or Sets DistributionLossFactor
        /// </summary>
        [DataMember(Name = "distributionLossFactor", IsRequired = true, EmitDefaultValue = false)]
        public EnergyServicePointDetailDistributionLossFactor DistributionLossFactor { get; set; }

        /// <summary>
        /// Gets or Sets RelatedParticipants
        /// </summary>
        [DataMember(Name = "relatedParticipants", IsRequired = true, EmitDefaultValue = false)]
        public List<EnergyServicePointDetailRelatedParticipants> RelatedParticipants { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public EnergyServicePointDetailLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Meters
        /// </summary>
        [DataMember(Name = "meters", IsRequired = true, EmitDefaultValue = false)]
        public EnergyServicePointDetailMeters Meters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyServicePointDetail {\n");
            sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
            sb.Append("  NationalMeteringId: ").Append(NationalMeteringId).Append("\n");
            sb.Append("  ServicePointClassification: ").Append(ServicePointClassification).Append("\n");
            sb.Append("  ServicePointStatus: ").Append(ServicePointStatus).Append("\n");
            sb.Append("  JurisdictionCode: ").Append(JurisdictionCode).Append("\n");
            sb.Append("  IsGenerator: ").Append(IsGenerator).Append("\n");
            sb.Append("  ValidFromDate: ").Append(ValidFromDate).Append("\n");
            sb.Append("  LastUpdateDateTime: ").Append(LastUpdateDateTime).Append("\n");
            sb.Append("  ConsumerProfile: ").Append(ConsumerProfile).Append("\n");
            sb.Append("  DistributionLossFactor: ").Append(DistributionLossFactor).Append("\n");
            sb.Append("  RelatedParticipants: ").Append(RelatedParticipants).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Meters: ").Append(Meters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyServicePointDetail);
        }

        /// <summary>
        /// Returns true if EnergyServicePointDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyServicePointDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyServicePointDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServicePointId == input.ServicePointId ||
                    (this.ServicePointId != null &&
                    this.ServicePointId.Equals(input.ServicePointId))
                ) && 
                (
                    this.NationalMeteringId == input.NationalMeteringId ||
                    (this.NationalMeteringId != null &&
                    this.NationalMeteringId.Equals(input.NationalMeteringId))
                ) && 
                (
                    this.ServicePointClassification == input.ServicePointClassification ||
                    this.ServicePointClassification.Equals(input.ServicePointClassification)
                ) && 
                (
                    this.ServicePointStatus == input.ServicePointStatus ||
                    this.ServicePointStatus.Equals(input.ServicePointStatus)
                ) && 
                (
                    this.JurisdictionCode == input.JurisdictionCode ||
                    this.JurisdictionCode.Equals(input.JurisdictionCode)
                ) && 
                (
                    this.IsGenerator == input.IsGenerator ||
                    this.IsGenerator.Equals(input.IsGenerator)
                ) && 
                (
                    this.ValidFromDate == input.ValidFromDate ||
                    (this.ValidFromDate != null &&
                    this.ValidFromDate.Equals(input.ValidFromDate))
                ) && 
                (
                    this.LastUpdateDateTime == input.LastUpdateDateTime ||
                    (this.LastUpdateDateTime != null &&
                    this.LastUpdateDateTime.Equals(input.LastUpdateDateTime))
                ) && 
                (
                    this.ConsumerProfile == input.ConsumerProfile ||
                    (this.ConsumerProfile != null &&
                    this.ConsumerProfile.Equals(input.ConsumerProfile))
                ) && 
                (
                    this.DistributionLossFactor == input.DistributionLossFactor ||
                    (this.DistributionLossFactor != null &&
                    this.DistributionLossFactor.Equals(input.DistributionLossFactor))
                ) && 
                (
                    this.RelatedParticipants == input.RelatedParticipants ||
                    this.RelatedParticipants != null &&
                    input.RelatedParticipants != null &&
                    this.RelatedParticipants.SequenceEqual(input.RelatedParticipants)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Meters == input.Meters ||
                    (this.Meters != null &&
                    this.Meters.Equals(input.Meters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServicePointId != null)
                    hashCode = hashCode * 59 + this.ServicePointId.GetHashCode();
                if (this.NationalMeteringId != null)
                    hashCode = hashCode * 59 + this.NationalMeteringId.GetHashCode();
                hashCode = hashCode * 59 + this.ServicePointClassification.GetHashCode();
                hashCode = hashCode * 59 + this.ServicePointStatus.GetHashCode();
                hashCode = hashCode * 59 + this.JurisdictionCode.GetHashCode();
                hashCode = hashCode * 59 + this.IsGenerator.GetHashCode();
                if (this.ValidFromDate != null)
                    hashCode = hashCode * 59 + this.ValidFromDate.GetHashCode();
                if (this.LastUpdateDateTime != null)
                    hashCode = hashCode * 59 + this.LastUpdateDateTime.GetHashCode();
                if (this.ConsumerProfile != null)
                    hashCode = hashCode * 59 + this.ConsumerProfile.GetHashCode();
                if (this.DistributionLossFactor != null)
                    hashCode = hashCode * 59 + this.DistributionLossFactor.GetHashCode();
                if (this.RelatedParticipants != null)
                    hashCode = hashCode * 59 + this.RelatedParticipants.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Meters != null)
                    hashCode = hashCode * 59 + this.Meters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
