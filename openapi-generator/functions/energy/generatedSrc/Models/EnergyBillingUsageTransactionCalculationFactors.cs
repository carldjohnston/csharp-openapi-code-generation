/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyBillingUsageTransactionCalculationFactors
    /// </summary>
    [DataContract(Name = "EnergyBillingUsageTransaction_calculationFactors")]
    public partial class EnergyBillingUsageTransactionCalculationFactors : IEquatable<EnergyBillingUsageTransactionCalculationFactors>, IValidatableObject
    {
        /// <summary>
        /// The type of the calculation factor
        /// </summary>
        /// <value>The type of the calculation factor</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DLF for value: DLF
            /// </summary>
            [EnumMember(Value = "DLF")]
            DLF = 1,

            /// <summary>
            /// Enum MLF for value: MLF
            /// </summary>
            [EnumMember(Value = "MLF")]
            MLF = 2

        }


        /// <summary>
        /// The type of the calculation factor
        /// </summary>
        /// <value>The type of the calculation factor</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingUsageTransactionCalculationFactors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyBillingUsageTransactionCalculationFactors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingUsageTransactionCalculationFactors" /> class.
        /// </summary>
        /// <param name="value">The value of the calculation factor (required).</param>
        /// <param name="type">The type of the calculation factor (required).</param>
        public EnergyBillingUsageTransactionCalculationFactors(decimal value = default(decimal), TypeEnum type = default(TypeEnum))
        {
            this.Value = value;
            this.Type = type;
        }

        /// <summary>
        /// The value of the calculation factor
        /// </summary>
        /// <value>The value of the calculation factor</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingUsageTransactionCalculationFactors {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyBillingUsageTransactionCalculationFactors);
        }

        /// <summary>
        /// Returns true if EnergyBillingUsageTransactionCalculationFactors instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyBillingUsageTransactionCalculationFactors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingUsageTransactionCalculationFactors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
