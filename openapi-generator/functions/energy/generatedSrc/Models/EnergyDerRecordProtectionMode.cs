/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// Required only when the hasCentralProtectionAndControl flag is set to true.  One or more of the object fields will be provided to describe the protection modes in place
    /// </summary>
    [DataContract(Name = "EnergyDerRecord_protectionMode")]
    public partial class EnergyDerRecordProtectionMode : IEquatable<EnergyDerRecordProtectionMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecordProtectionMode" /> class.
        /// </summary>
        /// <param name="exportLimitkva">Maximum amount of power (kVA) that may be exported from a connection point to the grid, as monitored by a control / relay function. An absent value indicates no limit.</param>
        /// <param name="underFrequencyProtection">Protective function limit in Hz..</param>
        /// <param name="underFrequencyProtectionDelay">Trip delay time in seconds..</param>
        /// <param name="overFrequencyProtection">Protective function limit in Hz..</param>
        /// <param name="overFrequencyProtectionDelay">Trip delay time in seconds..</param>
        /// <param name="underVoltageProtection">Protective function limit in V..</param>
        /// <param name="underVoltageProtectionDelay">Trip delay time in seconds..</param>
        /// <param name="overVoltageProtection">Protective function limit in V..</param>
        /// <param name="overVoltageProtectionDelay">Trip delay time in seconds..</param>
        /// <param name="sustainedOverVoltage">Sustained over voltage..</param>
        /// <param name="sustainedOverVoltageDelay">Trip delay time in seconds..</param>
        /// <param name="frequencyRateOfChange">Rate of change of frequency trip point (Hz/s)..</param>
        /// <param name="voltageVectorShift">Trip angle in degrees..</param>
        /// <param name="interTripScheme">Description of the form of inter-trip (e.g. &#39;from local substation&#39;)..</param>
        /// <param name="neutralVoltageDisplacement">Trip voltage..</param>
        public EnergyDerRecordProtectionMode(decimal exportLimitkva = default(decimal), decimal underFrequencyProtection = default(decimal), decimal underFrequencyProtectionDelay = default(decimal), decimal overFrequencyProtection = default(decimal), decimal overFrequencyProtectionDelay = default(decimal), decimal underVoltageProtection = default(decimal), decimal underVoltageProtectionDelay = default(decimal), decimal overVoltageProtection = default(decimal), decimal overVoltageProtectionDelay = default(decimal), decimal sustainedOverVoltage = default(decimal), decimal sustainedOverVoltageDelay = default(decimal), decimal frequencyRateOfChange = default(decimal), decimal voltageVectorShift = default(decimal), string interTripScheme = default(string), decimal neutralVoltageDisplacement = default(decimal))
        {
            this.ExportLimitkva = exportLimitkva;
            this.UnderFrequencyProtection = underFrequencyProtection;
            this.UnderFrequencyProtectionDelay = underFrequencyProtectionDelay;
            this.OverFrequencyProtection = overFrequencyProtection;
            this.OverFrequencyProtectionDelay = overFrequencyProtectionDelay;
            this.UnderVoltageProtection = underVoltageProtection;
            this.UnderVoltageProtectionDelay = underVoltageProtectionDelay;
            this.OverVoltageProtection = overVoltageProtection;
            this.OverVoltageProtectionDelay = overVoltageProtectionDelay;
            this.SustainedOverVoltage = sustainedOverVoltage;
            this.SustainedOverVoltageDelay = sustainedOverVoltageDelay;
            this.FrequencyRateOfChange = frequencyRateOfChange;
            this.VoltageVectorShift = voltageVectorShift;
            this.InterTripScheme = interTripScheme;
            this.NeutralVoltageDisplacement = neutralVoltageDisplacement;
        }

        /// <summary>
        /// Maximum amount of power (kVA) that may be exported from a connection point to the grid, as monitored by a control / relay function. An absent value indicates no limit
        /// </summary>
        /// <value>Maximum amount of power (kVA) that may be exported from a connection point to the grid, as monitored by a control / relay function. An absent value indicates no limit</value>
        [DataMember(Name = "exportLimitkva", EmitDefaultValue = false)]
        public decimal ExportLimitkva { get; set; }

        /// <summary>
        /// Protective function limit in Hz.
        /// </summary>
        /// <value>Protective function limit in Hz.</value>
        [DataMember(Name = "underFrequencyProtection", EmitDefaultValue = false)]
        public decimal UnderFrequencyProtection { get; set; }

        /// <summary>
        /// Trip delay time in seconds.
        /// </summary>
        /// <value>Trip delay time in seconds.</value>
        [DataMember(Name = "underFrequencyProtectionDelay", EmitDefaultValue = false)]
        public decimal UnderFrequencyProtectionDelay { get; set; }

        /// <summary>
        /// Protective function limit in Hz.
        /// </summary>
        /// <value>Protective function limit in Hz.</value>
        [DataMember(Name = "overFrequencyProtection", EmitDefaultValue = false)]
        public decimal OverFrequencyProtection { get; set; }

        /// <summary>
        /// Trip delay time in seconds.
        /// </summary>
        /// <value>Trip delay time in seconds.</value>
        [DataMember(Name = "overFrequencyProtectionDelay", EmitDefaultValue = false)]
        public decimal OverFrequencyProtectionDelay { get; set; }

        /// <summary>
        /// Protective function limit in V.
        /// </summary>
        /// <value>Protective function limit in V.</value>
        [DataMember(Name = "underVoltageProtection", EmitDefaultValue = false)]
        public decimal UnderVoltageProtection { get; set; }

        /// <summary>
        /// Trip delay time in seconds.
        /// </summary>
        /// <value>Trip delay time in seconds.</value>
        [DataMember(Name = "underVoltageProtectionDelay", EmitDefaultValue = false)]
        public decimal UnderVoltageProtectionDelay { get; set; }

        /// <summary>
        /// Protective function limit in V.
        /// </summary>
        /// <value>Protective function limit in V.</value>
        [DataMember(Name = "overVoltageProtection", EmitDefaultValue = false)]
        public decimal OverVoltageProtection { get; set; }

        /// <summary>
        /// Trip delay time in seconds.
        /// </summary>
        /// <value>Trip delay time in seconds.</value>
        [DataMember(Name = "overVoltageProtectionDelay", EmitDefaultValue = false)]
        public decimal OverVoltageProtectionDelay { get; set; }

        /// <summary>
        /// Sustained over voltage.
        /// </summary>
        /// <value>Sustained over voltage.</value>
        [DataMember(Name = "sustainedOverVoltage", EmitDefaultValue = false)]
        public decimal SustainedOverVoltage { get; set; }

        /// <summary>
        /// Trip delay time in seconds.
        /// </summary>
        /// <value>Trip delay time in seconds.</value>
        [DataMember(Name = "sustainedOverVoltageDelay", EmitDefaultValue = false)]
        public decimal SustainedOverVoltageDelay { get; set; }

        /// <summary>
        /// Rate of change of frequency trip point (Hz/s).
        /// </summary>
        /// <value>Rate of change of frequency trip point (Hz/s).</value>
        [DataMember(Name = "frequencyRateOfChange", EmitDefaultValue = false)]
        public decimal FrequencyRateOfChange { get; set; }

        /// <summary>
        /// Trip angle in degrees.
        /// </summary>
        /// <value>Trip angle in degrees.</value>
        [DataMember(Name = "voltageVectorShift", EmitDefaultValue = false)]
        public decimal VoltageVectorShift { get; set; }

        /// <summary>
        /// Description of the form of inter-trip (e.g. &#39;from local substation&#39;).
        /// </summary>
        /// <value>Description of the form of inter-trip (e.g. &#39;from local substation&#39;).</value>
        [DataMember(Name = "interTripScheme", EmitDefaultValue = false)]
        public string InterTripScheme { get; set; }

        /// <summary>
        /// Trip voltage.
        /// </summary>
        /// <value>Trip voltage.</value>
        [DataMember(Name = "neutralVoltageDisplacement", EmitDefaultValue = false)]
        public decimal NeutralVoltageDisplacement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecordProtectionMode {\n");
            sb.Append("  ExportLimitkva: ").Append(ExportLimitkva).Append("\n");
            sb.Append("  UnderFrequencyProtection: ").Append(UnderFrequencyProtection).Append("\n");
            sb.Append("  UnderFrequencyProtectionDelay: ").Append(UnderFrequencyProtectionDelay).Append("\n");
            sb.Append("  OverFrequencyProtection: ").Append(OverFrequencyProtection).Append("\n");
            sb.Append("  OverFrequencyProtectionDelay: ").Append(OverFrequencyProtectionDelay).Append("\n");
            sb.Append("  UnderVoltageProtection: ").Append(UnderVoltageProtection).Append("\n");
            sb.Append("  UnderVoltageProtectionDelay: ").Append(UnderVoltageProtectionDelay).Append("\n");
            sb.Append("  OverVoltageProtection: ").Append(OverVoltageProtection).Append("\n");
            sb.Append("  OverVoltageProtectionDelay: ").Append(OverVoltageProtectionDelay).Append("\n");
            sb.Append("  SustainedOverVoltage: ").Append(SustainedOverVoltage).Append("\n");
            sb.Append("  SustainedOverVoltageDelay: ").Append(SustainedOverVoltageDelay).Append("\n");
            sb.Append("  FrequencyRateOfChange: ").Append(FrequencyRateOfChange).Append("\n");
            sb.Append("  VoltageVectorShift: ").Append(VoltageVectorShift).Append("\n");
            sb.Append("  InterTripScheme: ").Append(InterTripScheme).Append("\n");
            sb.Append("  NeutralVoltageDisplacement: ").Append(NeutralVoltageDisplacement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyDerRecordProtectionMode);
        }

        /// <summary>
        /// Returns true if EnergyDerRecordProtectionMode instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyDerRecordProtectionMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecordProtectionMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExportLimitkva == input.ExportLimitkva ||
                    this.ExportLimitkva.Equals(input.ExportLimitkva)
                ) && 
                (
                    this.UnderFrequencyProtection == input.UnderFrequencyProtection ||
                    this.UnderFrequencyProtection.Equals(input.UnderFrequencyProtection)
                ) && 
                (
                    this.UnderFrequencyProtectionDelay == input.UnderFrequencyProtectionDelay ||
                    this.UnderFrequencyProtectionDelay.Equals(input.UnderFrequencyProtectionDelay)
                ) && 
                (
                    this.OverFrequencyProtection == input.OverFrequencyProtection ||
                    this.OverFrequencyProtection.Equals(input.OverFrequencyProtection)
                ) && 
                (
                    this.OverFrequencyProtectionDelay == input.OverFrequencyProtectionDelay ||
                    this.OverFrequencyProtectionDelay.Equals(input.OverFrequencyProtectionDelay)
                ) && 
                (
                    this.UnderVoltageProtection == input.UnderVoltageProtection ||
                    this.UnderVoltageProtection.Equals(input.UnderVoltageProtection)
                ) && 
                (
                    this.UnderVoltageProtectionDelay == input.UnderVoltageProtectionDelay ||
                    this.UnderVoltageProtectionDelay.Equals(input.UnderVoltageProtectionDelay)
                ) && 
                (
                    this.OverVoltageProtection == input.OverVoltageProtection ||
                    this.OverVoltageProtection.Equals(input.OverVoltageProtection)
                ) && 
                (
                    this.OverVoltageProtectionDelay == input.OverVoltageProtectionDelay ||
                    this.OverVoltageProtectionDelay.Equals(input.OverVoltageProtectionDelay)
                ) && 
                (
                    this.SustainedOverVoltage == input.SustainedOverVoltage ||
                    this.SustainedOverVoltage.Equals(input.SustainedOverVoltage)
                ) && 
                (
                    this.SustainedOverVoltageDelay == input.SustainedOverVoltageDelay ||
                    this.SustainedOverVoltageDelay.Equals(input.SustainedOverVoltageDelay)
                ) && 
                (
                    this.FrequencyRateOfChange == input.FrequencyRateOfChange ||
                    this.FrequencyRateOfChange.Equals(input.FrequencyRateOfChange)
                ) && 
                (
                    this.VoltageVectorShift == input.VoltageVectorShift ||
                    this.VoltageVectorShift.Equals(input.VoltageVectorShift)
                ) && 
                (
                    this.InterTripScheme == input.InterTripScheme ||
                    (this.InterTripScheme != null &&
                    this.InterTripScheme.Equals(input.InterTripScheme))
                ) && 
                (
                    this.NeutralVoltageDisplacement == input.NeutralVoltageDisplacement ||
                    this.NeutralVoltageDisplacement.Equals(input.NeutralVoltageDisplacement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ExportLimitkva.GetHashCode();
                hashCode = hashCode * 59 + this.UnderFrequencyProtection.GetHashCode();
                hashCode = hashCode * 59 + this.UnderFrequencyProtectionDelay.GetHashCode();
                hashCode = hashCode * 59 + this.OverFrequencyProtection.GetHashCode();
                hashCode = hashCode * 59 + this.OverFrequencyProtectionDelay.GetHashCode();
                hashCode = hashCode * 59 + this.UnderVoltageProtection.GetHashCode();
                hashCode = hashCode * 59 + this.UnderVoltageProtectionDelay.GetHashCode();
                hashCode = hashCode * 59 + this.OverVoltageProtection.GetHashCode();
                hashCode = hashCode * 59 + this.OverVoltageProtectionDelay.GetHashCode();
                hashCode = hashCode * 59 + this.SustainedOverVoltage.GetHashCode();
                hashCode = hashCode * 59 + this.SustainedOverVoltageDelay.GetHashCode();
                hashCode = hashCode * 59 + this.FrequencyRateOfChange.GetHashCode();
                hashCode = hashCode * 59 + this.VoltageVectorShift.GetHashCode();
                if (this.InterTripScheme != null)
                    hashCode = hashCode * 59 + this.InterTripScheme.GetHashCode();
                hashCode = hashCode * 59 + this.NeutralVoltageDisplacement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
