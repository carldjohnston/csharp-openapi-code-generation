/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyDerRecordDerDevices
    /// </summary>
    [DataContract(Name = "EnergyDerRecord_derDevices")]
    public partial class EnergyDerRecordDerDevices : IEquatable<EnergyDerRecordDerDevices>, IValidatableObject
    {
        /// <summary>
        /// Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2,

            /// <summary>
            /// Enum DECOMMISSIONED for value: DECOMMISSIONED
            /// </summary>
            [EnumMember(Value = "DECOMMISSIONED")]
            DECOMMISSIONED = 3

        }


        /// <summary>
        /// Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned
        /// </summary>
        /// <value>Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Used to indicate the primary technology used in the DER device
        /// </summary>
        /// <value>Used to indicate the primary technology used in the DER device</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FOSSIL for value: FOSSIL
            /// </summary>
            [EnumMember(Value = "FOSSIL")]
            FOSSIL = 1,

            /// <summary>
            /// Enum HYDRO for value: HYDRO
            /// </summary>
            [EnumMember(Value = "HYDRO")]
            HYDRO = 2,

            /// <summary>
            /// Enum WIND for value: WIND
            /// </summary>
            [EnumMember(Value = "WIND")]
            WIND = 3,

            /// <summary>
            /// Enum SOLARPV for value: SOLAR_PV
            /// </summary>
            [EnumMember(Value = "SOLAR_PV")]
            SOLARPV = 4,

            /// <summary>
            /// Enum RENEWABLE for value: RENEWABLE
            /// </summary>
            [EnumMember(Value = "RENEWABLE")]
            RENEWABLE = 5,

            /// <summary>
            /// Enum GEOTHERMAL for value: GEOTHERMAL
            /// </summary>
            [EnumMember(Value = "GEOTHERMAL")]
            GEOTHERMAL = 6,

            /// <summary>
            /// Enum STORAGE for value: STORAGE
            /// </summary>
            [EnumMember(Value = "STORAGE")]
            STORAGE = 7,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 8

        }


        /// <summary>
        /// Used to indicate the primary technology used in the DER device
        /// </summary>
        /// <value>Used to indicate the primary technology used in the DER device</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecordDerDevices" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyDerRecordDerDevices() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyDerRecordDerDevices" /> class.
        /// </summary>
        /// <param name="deviceIdentifier">Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards (required).</param>
        /// <param name="count">Number of devices in the group of DER devices (required).</param>
        /// <param name="manufacturer">The name of the device manufacturer. If absent then assumed to be “unknown”.</param>
        /// <param name="modelNumber">The model number of the device. If absent then assumed to be “unknown”.</param>
        /// <param name="status">Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned.</param>
        /// <param name="type">Used to indicate the primary technology used in the DER device (required).</param>
        /// <param name="subtype">Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”.</param>
        /// <param name="nominalRatedCapacity">Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group (required).</param>
        /// <param name="nominalStorageCapacity">Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”.</param>
        public EnergyDerRecordDerDevices(decimal deviceIdentifier = default(decimal), decimal count = default(decimal), string manufacturer = default(string), string modelNumber = default(string), StatusEnum? status = default(StatusEnum?), TypeEnum type = default(TypeEnum), string subtype = default(string), decimal nominalRatedCapacity = default(decimal), decimal nominalStorageCapacity = default(decimal))
        {
            this.DeviceIdentifier = deviceIdentifier;
            this.Count = count;
            this.Type = type;
            this.NominalRatedCapacity = nominalRatedCapacity;
            this.Manufacturer = manufacturer;
            this.ModelNumber = modelNumber;
            this.Status = status;
            this.Subtype = subtype;
            this.NominalStorageCapacity = nominalStorageCapacity;
        }

        /// <summary>
        /// Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards
        /// </summary>
        /// <value>Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards</value>
        [DataMember(Name = "deviceIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public decimal DeviceIdentifier { get; set; }

        /// <summary>
        /// Number of devices in the group of DER devices
        /// </summary>
        /// <value>Number of devices in the group of DER devices</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = false)]
        public decimal Count { get; set; }

        /// <summary>
        /// The name of the device manufacturer. If absent then assumed to be “unknown”
        /// </summary>
        /// <value>The name of the device manufacturer. If absent then assumed to be “unknown”</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// The model number of the device. If absent then assumed to be “unknown”
        /// </summary>
        /// <value>The model number of the device. If absent then assumed to be “unknown”</value>
        [DataMember(Name = "modelNumber", EmitDefaultValue = false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”
        /// </summary>
        /// <value>Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”</value>
        [DataMember(Name = "subtype", EmitDefaultValue = false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group
        /// </summary>
        /// <value>Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group</value>
        [DataMember(Name = "nominalRatedCapacity", IsRequired = true, EmitDefaultValue = false)]
        public decimal NominalRatedCapacity { get; set; }

        /// <summary>
        /// Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”
        /// </summary>
        /// <value>Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”</value>
        [DataMember(Name = "nominalStorageCapacity", EmitDefaultValue = false)]
        public decimal NominalStorageCapacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyDerRecordDerDevices {\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  NominalRatedCapacity: ").Append(NominalRatedCapacity).Append("\n");
            sb.Append("  NominalStorageCapacity: ").Append(NominalStorageCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyDerRecordDerDevices);
        }

        /// <summary>
        /// Returns true if EnergyDerRecordDerDevices instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyDerRecordDerDevices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyDerRecordDerDevices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ModelNumber == input.ModelNumber ||
                    (this.ModelNumber != null &&
                    this.ModelNumber.Equals(input.ModelNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                ) && 
                (
                    this.NominalRatedCapacity == input.NominalRatedCapacity ||
                    this.NominalRatedCapacity.Equals(input.NominalRatedCapacity)
                ) && 
                (
                    this.NominalStorageCapacity == input.NominalStorageCapacity ||
                    this.NominalStorageCapacity.Equals(input.NominalStorageCapacity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ModelNumber != null)
                    hashCode = hashCode * 59 + this.ModelNumber.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Subtype != null)
                    hashCode = hashCode * 59 + this.Subtype.GetHashCode();
                hashCode = hashCode * 59 + this.NominalRatedCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.NominalStorageCapacity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
