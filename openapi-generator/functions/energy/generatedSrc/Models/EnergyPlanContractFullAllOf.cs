/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyPlanContractFullAllOf
    /// </summary>
    [DataContract(Name = "EnergyPlanContractFull_allOf")]
    public partial class EnergyPlanContractFullAllOf : IEquatable<EnergyPlanContractFullAllOf>, IValidatableObject
    {
        /// <summary>
        /// The term for the contract.  If absent assumes no specified term
        /// </summary>
        /// <value>The term for the contract.  If absent assumes no specified term</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TermTypeEnum
        {
            /// <summary>
            /// Enum _1YEAR for value: 1_YEAR
            /// </summary>
            [EnumMember(Value = "1_YEAR")]
            _1YEAR = 1,

            /// <summary>
            /// Enum _2YEAR for value: 2_YEAR
            /// </summary>
            [EnumMember(Value = "2_YEAR")]
            _2YEAR = 2,

            /// <summary>
            /// Enum _3YEAR for value: 3_YEAR
            /// </summary>
            [EnumMember(Value = "3_YEAR")]
            _3YEAR = 3,

            /// <summary>
            /// Enum _4YEAR for value: 4_YEAR
            /// </summary>
            [EnumMember(Value = "4_YEAR")]
            _4YEAR = 4,

            /// <summary>
            /// Enum _5YEAR for value: 5_YEAR
            /// </summary>
            [EnumMember(Value = "5_YEAR")]
            _5YEAR = 5,

            /// <summary>
            /// Enum ONGOING for value: ONGOING
            /// </summary>
            [EnumMember(Value = "ONGOING")]
            ONGOING = 6,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7

        }


        /// <summary>
        /// The term for the contract.  If absent assumes no specified term
        /// </summary>
        /// <value>The term for the contract.  If absent assumes no specified term</value>
        [DataMember(Name = "termType", EmitDefaultValue = false)]
        public TermTypeEnum? TermType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanContractFullAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyPlanContractFullAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPlanContractFullAllOf" /> class.
        /// </summary>
        /// <param name="termType">The term for the contract.  If absent assumes no specified term.</param>
        /// <param name="benefitPeriod">Description of the benefit period.  Should only be present if termType has the value ONGOING.</param>
        /// <param name="terms">Free text description of the terms for the contract.</param>
        /// <param name="meterTypes">An array of the meter types that this contract is available for.</param>
        /// <param name="coolingOffDays">Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET .</param>
        /// <param name="billFrequency">An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) (required).</param>
        public EnergyPlanContractFullAllOf(TermTypeEnum? termType = default(TermTypeEnum?), string benefitPeriod = default(string), string terms = default(string), List<string> meterTypes = default(List<string>), string coolingOffDays = default(string), List<string> billFrequency = default(List<string>))
        {
            // to ensure "billFrequency" is required (not null)
            this.BillFrequency = billFrequency ?? throw new ArgumentNullException("billFrequency is a required property for EnergyPlanContractFullAllOf and cannot be null");
            this.TermType = termType;
            this.BenefitPeriod = benefitPeriod;
            this.Terms = terms;
            this.MeterTypes = meterTypes;
            this.CoolingOffDays = coolingOffDays;
        }

        /// <summary>
        /// Description of the benefit period.  Should only be present if termType has the value ONGOING
        /// </summary>
        /// <value>Description of the benefit period.  Should only be present if termType has the value ONGOING</value>
        [DataMember(Name = "benefitPeriod", EmitDefaultValue = false)]
        public string BenefitPeriod { get; set; }

        /// <summary>
        /// Free text description of the terms for the contract
        /// </summary>
        /// <value>Free text description of the terms for the contract</value>
        [DataMember(Name = "terms", EmitDefaultValue = false)]
        public string Terms { get; set; }

        /// <summary>
        /// An array of the meter types that this contract is available for
        /// </summary>
        /// <value>An array of the meter types that this contract is available for</value>
        [DataMember(Name = "meterTypes", EmitDefaultValue = false)]
        public List<string> MeterTypes { get; set; }

        /// <summary>
        /// Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET 
        /// </summary>
        /// <value>Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET </value>
        [DataMember(Name = "coolingOffDays", EmitDefaultValue = false)]
        public string CoolingOffDays { get; set; }

        /// <summary>
        /// An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
        /// </summary>
        /// <value>An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)</value>
        [DataMember(Name = "billFrequency", IsRequired = true, EmitDefaultValue = false)]
        public List<string> BillFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPlanContractFullAllOf {\n");
            sb.Append("  TermType: ").Append(TermType).Append("\n");
            sb.Append("  BenefitPeriod: ").Append(BenefitPeriod).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  MeterTypes: ").Append(MeterTypes).Append("\n");
            sb.Append("  CoolingOffDays: ").Append(CoolingOffDays).Append("\n");
            sb.Append("  BillFrequency: ").Append(BillFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyPlanContractFullAllOf);
        }

        /// <summary>
        /// Returns true if EnergyPlanContractFullAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyPlanContractFullAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPlanContractFullAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TermType == input.TermType ||
                    this.TermType.Equals(input.TermType)
                ) && 
                (
                    this.BenefitPeriod == input.BenefitPeriod ||
                    (this.BenefitPeriod != null &&
                    this.BenefitPeriod.Equals(input.BenefitPeriod))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.MeterTypes == input.MeterTypes ||
                    this.MeterTypes != null &&
                    input.MeterTypes != null &&
                    this.MeterTypes.SequenceEqual(input.MeterTypes)
                ) && 
                (
                    this.CoolingOffDays == input.CoolingOffDays ||
                    (this.CoolingOffDays != null &&
                    this.CoolingOffDays.Equals(input.CoolingOffDays))
                ) && 
                (
                    this.BillFrequency == input.BillFrequency ||
                    this.BillFrequency != null &&
                    input.BillFrequency != null &&
                    this.BillFrequency.SequenceEqual(input.BillFrequency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TermType.GetHashCode();
                if (this.BenefitPeriod != null)
                    hashCode = hashCode * 59 + this.BenefitPeriod.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.MeterTypes != null)
                    hashCode = hashCode * 59 + this.MeterTypes.GetHashCode();
                if (this.CoolingOffDays != null)
                    hashCode = hashCode * 59 + this.CoolingOffDays.GetHashCode();
                if (this.BillFrequency != null)
                    hashCode = hashCode * 59 + this.BillFrequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
