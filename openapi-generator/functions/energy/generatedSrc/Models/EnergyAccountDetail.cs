/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyAccountDetail
    /// </summary>
    [DataContract(Name = "EnergyAccountDetail")]
    public partial class EnergyAccountDetail : IEquatable<EnergyAccountDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyAccountDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyAccountDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyAccountDetail" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account.  To be created in accordance with CDR ID permanence requirements (required).</param>
        /// <param name="accountNumber">Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId.</param>
        /// <param name="displayName">An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder.</param>
        /// <param name="creationDate">The date that the account was created or opened (required).</param>
        /// <param name="plans">The array of plans containing service points and associated plan details (required).</param>
        public EnergyAccountDetail(string accountId = default(string), string accountNumber = default(string), string displayName = default(string), string creationDate = default(string), List<EnergyAccountDetailAllOfPlans> plans = default(List<EnergyAccountDetailAllOfPlans>))
        {
            // to ensure "accountId" is required (not null)
            this.AccountId = accountId ?? throw new ArgumentNullException("accountId is a required property for EnergyAccountDetail and cannot be null");
            // to ensure "creationDate" is required (not null)
            this.CreationDate = creationDate ?? throw new ArgumentNullException("creationDate is a required property for EnergyAccountDetail and cannot be null");
            // to ensure "plans" is required (not null)
            this.Plans = plans ?? throw new ArgumentNullException("plans is a required property for EnergyAccountDetail and cannot be null");
            this.AccountNumber = accountNumber;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// The ID of the account.  To be created in accordance with CDR ID permanence requirements
        /// </summary>
        /// <value>The ID of the account.  To be created in accordance with CDR ID permanence requirements</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId
        /// </summary>
        /// <value>Optional identifier of the account as defined by the data holder.  This must be the value presented on physical statements (if it exists) and must not be used for the value of accountId</value>
        [DataMember(Name = "accountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder
        /// </summary>
        /// <value>An optional display name for the account if one exists or can be derived.  The content of this field is at the discretion of the data holder</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The date that the account was created or opened
        /// </summary>
        /// <value>The date that the account was created or opened</value>
        [DataMember(Name = "creationDate", IsRequired = true, EmitDefaultValue = false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// The array of plans containing service points and associated plan details
        /// </summary>
        /// <value>The array of plans containing service points and associated plan details</value>
        [DataMember(Name = "plans", IsRequired = true, EmitDefaultValue = false)]
        public List<EnergyAccountDetailAllOfPlans> Plans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyAccountDetail {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyAccountDetail);
        }

        /// <summary>
        /// Returns true if EnergyAccountDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyAccountDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyAccountDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Plans == input.Plans ||
                    this.Plans != null &&
                    input.Plans != null &&
                    this.Plans.SequenceEqual(input.Plans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.Plans != null)
                    hashCode = hashCode * 59 + this.Plans.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
