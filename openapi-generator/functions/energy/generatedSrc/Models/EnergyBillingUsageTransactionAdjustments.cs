/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyBillingUsageTransactionAdjustments
    /// </summary>
    [DataContract(Name = "EnergyBillingUsageTransaction_adjustments")]
    public partial class EnergyBillingUsageTransactionAdjustments : IEquatable<EnergyBillingUsageTransactionAdjustments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingUsageTransactionAdjustments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyBillingUsageTransactionAdjustments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingUsageTransactionAdjustments" /> class.
        /// </summary>
        /// <param name="amount">The amount of the adjustment (required).</param>
        /// <param name="description">A free text description of the adjustment (required).</param>
        public EnergyBillingUsageTransactionAdjustments(string amount = default(string), string description = default(string))
        {
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount is a required property for EnergyBillingUsageTransactionAdjustments and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for EnergyBillingUsageTransactionAdjustments and cannot be null");
        }

        /// <summary>
        /// The amount of the adjustment
        /// </summary>
        /// <value>The amount of the adjustment</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// A free text description of the adjustment
        /// </summary>
        /// <value>A free text description of the adjustment</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingUsageTransactionAdjustments {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyBillingUsageTransactionAdjustments);
        }

        /// <summary>
        /// Returns true if EnergyBillingUsageTransactionAdjustments instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyBillingUsageTransactionAdjustments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingUsageTransactionAdjustments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
