/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyBillingTransaction
    /// </summary>
    [DataContract(Name = "EnergyBillingTransaction")]
    public partial class EnergyBillingTransaction : IEquatable<EnergyBillingTransaction>, IValidatableObject
    {
        /// <summary>
        /// Indicator of the type of transaction object present in this record
        /// </summary>
        /// <value>Indicator of the type of transaction object present in this record</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionUTypeEnum
        {
            /// <summary>
            /// Enum Usage for value: usage
            /// </summary>
            [EnumMember(Value = "usage")]
            Usage = 1,

            /// <summary>
            /// Enum Demand for value: demand
            /// </summary>
            [EnumMember(Value = "demand")]
            Demand = 2,

            /// <summary>
            /// Enum OnceOff for value: onceOff
            /// </summary>
            [EnumMember(Value = "onceOff")]
            OnceOff = 3,

            /// <summary>
            /// Enum OtherCharges for value: otherCharges
            /// </summary>
            [EnumMember(Value = "otherCharges")]
            OtherCharges = 4,

            /// <summary>
            /// Enum Payment for value: payment
            /// </summary>
            [EnumMember(Value = "payment")]
            Payment = 5

        }


        /// <summary>
        /// Indicator of the type of transaction object present in this record
        /// </summary>
        /// <value>Indicator of the type of transaction object present in this record</value>
        [DataMember(Name = "transactionUType", IsRequired = true, EmitDefaultValue = false)]
        public TransactionUTypeEnum TransactionUType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyBillingTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyBillingTransaction" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account for which transaction applies (required).</param>
        /// <param name="executionDateTime">The date and time that the transaction occurred (required).</param>
        /// <param name="gst">The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed.</param>
        /// <param name="transactionUType">Indicator of the type of transaction object present in this record (required).</param>
        /// <param name="usage">usage.</param>
        /// <param name="demand">demand.</param>
        /// <param name="onceOff">onceOff.</param>
        /// <param name="otherCharges">otherCharges.</param>
        /// <param name="payment">payment.</param>
        public EnergyBillingTransaction(string accountId = default(string), string executionDateTime = default(string), string gst = default(string), TransactionUTypeEnum transactionUType = default(TransactionUTypeEnum), EnergyBillingUsageTransaction usage = default(EnergyBillingUsageTransaction), EnergyBillingDemandTransaction demand = default(EnergyBillingDemandTransaction), EnergyBillingOnceOffTransaction onceOff = default(EnergyBillingOnceOffTransaction), EnergyBillingOtherTransaction otherCharges = default(EnergyBillingOtherTransaction), EnergyBillingPaymentTransaction payment = default(EnergyBillingPaymentTransaction))
        {
            // to ensure "accountId" is required (not null)
            this.AccountId = accountId ?? throw new ArgumentNullException("accountId is a required property for EnergyBillingTransaction and cannot be null");
            // to ensure "executionDateTime" is required (not null)
            this.ExecutionDateTime = executionDateTime ?? throw new ArgumentNullException("executionDateTime is a required property for EnergyBillingTransaction and cannot be null");
            this.TransactionUType = transactionUType;
            this.Gst = gst;
            this.Usage = usage;
            this.Demand = demand;
            this.OnceOff = onceOff;
            this.OtherCharges = otherCharges;
            this.Payment = payment;
        }

        /// <summary>
        /// The ID of the account for which transaction applies
        /// </summary>
        /// <value>The ID of the account for which transaction applies</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The date and time that the transaction occurred
        /// </summary>
        /// <value>The date and time that the transaction occurred</value>
        [DataMember(Name = "executionDateTime", IsRequired = true, EmitDefaultValue = false)]
        public string ExecutionDateTime { get; set; }

        /// <summary>
        /// The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed
        /// </summary>
        /// <value>The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed</value>
        [DataMember(Name = "gst", EmitDefaultValue = false)]
        public string Gst { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", EmitDefaultValue = false)]
        public EnergyBillingUsageTransaction Usage { get; set; }

        /// <summary>
        /// Gets or Sets Demand
        /// </summary>
        [DataMember(Name = "demand", EmitDefaultValue = false)]
        public EnergyBillingDemandTransaction Demand { get; set; }

        /// <summary>
        /// Gets or Sets OnceOff
        /// </summary>
        [DataMember(Name = "onceOff", EmitDefaultValue = false)]
        public EnergyBillingOnceOffTransaction OnceOff { get; set; }

        /// <summary>
        /// Gets or Sets OtherCharges
        /// </summary>
        [DataMember(Name = "otherCharges", EmitDefaultValue = false)]
        public EnergyBillingOtherTransaction OtherCharges { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "payment", EmitDefaultValue = false)]
        public EnergyBillingPaymentTransaction Payment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyBillingTransaction {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ExecutionDateTime: ").Append(ExecutionDateTime).Append("\n");
            sb.Append("  Gst: ").Append(Gst).Append("\n");
            sb.Append("  TransactionUType: ").Append(TransactionUType).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  OnceOff: ").Append(OnceOff).Append("\n");
            sb.Append("  OtherCharges: ").Append(OtherCharges).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyBillingTransaction);
        }

        /// <summary>
        /// Returns true if EnergyBillingTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyBillingTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyBillingTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.ExecutionDateTime == input.ExecutionDateTime ||
                    (this.ExecutionDateTime != null &&
                    this.ExecutionDateTime.Equals(input.ExecutionDateTime))
                ) && 
                (
                    this.Gst == input.Gst ||
                    (this.Gst != null &&
                    this.Gst.Equals(input.Gst))
                ) && 
                (
                    this.TransactionUType == input.TransactionUType ||
                    this.TransactionUType.Equals(input.TransactionUType)
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                ) && 
                (
                    this.Demand == input.Demand ||
                    (this.Demand != null &&
                    this.Demand.Equals(input.Demand))
                ) && 
                (
                    this.OnceOff == input.OnceOff ||
                    (this.OnceOff != null &&
                    this.OnceOff.Equals(input.OnceOff))
                ) && 
                (
                    this.OtherCharges == input.OtherCharges ||
                    (this.OtherCharges != null &&
                    this.OtherCharges.Equals(input.OtherCharges))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.ExecutionDateTime != null)
                    hashCode = hashCode * 59 + this.ExecutionDateTime.GetHashCode();
                if (this.Gst != null)
                    hashCode = hashCode * 59 + this.Gst.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionUType.GetHashCode();
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                if (this.Demand != null)
                    hashCode = hashCode * 59 + this.Demand.GetHashCode();
                if (this.OnceOff != null)
                    hashCode = hashCode * 59 + this.OnceOff.GetHashCode();
                if (this.OtherCharges != null)
                    hashCode = hashCode * 59 + this.OtherCharges.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
