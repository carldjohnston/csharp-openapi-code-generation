/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// A discount for on time payment
    /// </summary>
    [DataContract(Name = "EnergyInvoice_payOnTimeDiscount")]
    public partial class EnergyInvoicePayOnTimeDiscount : IEquatable<EnergyInvoicePayOnTimeDiscount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyInvoicePayOnTimeDiscount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyInvoicePayOnTimeDiscount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyInvoicePayOnTimeDiscount" /> class.
        /// </summary>
        /// <param name="discountAmount">The amount that will be discounted if the invoice is paid by the date specified (required).</param>
        /// <param name="gstAmount">The GST amount that will be discounted if the invoice is paid by the date specified.  If absent then zero is assumed.</param>
        /// <param name="date">The date by which the invoice must be paid to receive the pay on time discount (required).</param>
        public EnergyInvoicePayOnTimeDiscount(string discountAmount = default(string), string gstAmount = default(string), string date = default(string))
        {
            // to ensure "discountAmount" is required (not null)
            this.DiscountAmount = discountAmount ?? throw new ArgumentNullException("discountAmount is a required property for EnergyInvoicePayOnTimeDiscount and cannot be null");
            // to ensure "date" is required (not null)
            this.Date = date ?? throw new ArgumentNullException("date is a required property for EnergyInvoicePayOnTimeDiscount and cannot be null");
            this.GstAmount = gstAmount;
        }

        /// <summary>
        /// The amount that will be discounted if the invoice is paid by the date specified
        /// </summary>
        /// <value>The amount that will be discounted if the invoice is paid by the date specified</value>
        [DataMember(Name = "discountAmount", IsRequired = true, EmitDefaultValue = false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// The GST amount that will be discounted if the invoice is paid by the date specified.  If absent then zero is assumed
        /// </summary>
        /// <value>The GST amount that will be discounted if the invoice is paid by the date specified.  If absent then zero is assumed</value>
        [DataMember(Name = "gstAmount", EmitDefaultValue = false)]
        public string GstAmount { get; set; }

        /// <summary>
        /// The date by which the invoice must be paid to receive the pay on time discount
        /// </summary>
        /// <value>The date by which the invoice must be paid to receive the pay on time discount</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyInvoicePayOnTimeDiscount {\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  GstAmount: ").Append(GstAmount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyInvoicePayOnTimeDiscount);
        }

        /// <summary>
        /// Returns true if EnergyInvoicePayOnTimeDiscount instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyInvoicePayOnTimeDiscount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyInvoicePayOnTimeDiscount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.GstAmount == input.GstAmount ||
                    (this.GstAmount != null &&
                    this.GstAmount.Equals(input.GstAmount))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.GstAmount != null)
                    hashCode = hashCode * 59 + this.GstAmount.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
