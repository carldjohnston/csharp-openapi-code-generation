/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * The version of the OpenAPI document: 1.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agl.Cdr.Energy.Client.OpenAPIDateConverter;

namespace Agl.Cdr.Energy.Models
{
    /// <summary>
    /// EnergyPaymentSchedule
    /// </summary>
    [DataContract(Name = "EnergyPaymentSchedule")]
    public partial class EnergyPaymentSchedule : IEquatable<EnergyPaymentSchedule>, IValidatableObject
    {
        /// <summary>
        /// The type of object present in this response
        /// </summary>
        /// <value>The type of object present in this response</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentScheduleUTypeEnum
        {
            /// <summary>
            /// Enum CardDebit for value: cardDebit
            /// </summary>
            [EnumMember(Value = "cardDebit")]
            CardDebit = 1,

            /// <summary>
            /// Enum DirectDebit for value: directDebit
            /// </summary>
            [EnumMember(Value = "directDebit")]
            DirectDebit = 2,

            /// <summary>
            /// Enum ManualPayment for value: manualPayment
            /// </summary>
            [EnumMember(Value = "manualPayment")]
            ManualPayment = 3

        }


        /// <summary>
        /// The type of object present in this response
        /// </summary>
        /// <value>The type of object present in this response</value>
        [DataMember(Name = "paymentScheduleUType", IsRequired = true, EmitDefaultValue = false)]
        public PaymentScheduleUTypeEnum PaymentScheduleUType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPaymentSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyPaymentSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyPaymentSchedule" /> class.
        /// </summary>
        /// <param name="amount">Optional payment amount indicating that a constant payment amount is scheduled to be paid (used in bill smooting scenarios).</param>
        /// <param name="paymentScheduleUType">The type of object present in this response (required).</param>
        /// <param name="cardDebit">cardDebit.</param>
        /// <param name="directDebit">directDebit.</param>
        /// <param name="manualPayment">manualPayment.</param>
        public EnergyPaymentSchedule(string amount = default(string), PaymentScheduleUTypeEnum paymentScheduleUType = default(PaymentScheduleUTypeEnum), EnergyPaymentScheduleCardDebit cardDebit = default(EnergyPaymentScheduleCardDebit), EnergyPaymentScheduleDirectDebit directDebit = default(EnergyPaymentScheduleDirectDebit), EnergyPaymentScheduleManualPayment manualPayment = default(EnergyPaymentScheduleManualPayment))
        {
            this.PaymentScheduleUType = paymentScheduleUType;
            this.Amount = amount;
            this.CardDebit = cardDebit;
            this.DirectDebit = directDebit;
            this.ManualPayment = manualPayment;
        }

        /// <summary>
        /// Optional payment amount indicating that a constant payment amount is scheduled to be paid (used in bill smooting scenarios)
        /// </summary>
        /// <value>Optional payment amount indicating that a constant payment amount is scheduled to be paid (used in bill smooting scenarios)</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets CardDebit
        /// </summary>
        [DataMember(Name = "cardDebit", EmitDefaultValue = false)]
        public EnergyPaymentScheduleCardDebit CardDebit { get; set; }

        /// <summary>
        /// Gets or Sets DirectDebit
        /// </summary>
        [DataMember(Name = "directDebit", EmitDefaultValue = false)]
        public EnergyPaymentScheduleDirectDebit DirectDebit { get; set; }

        /// <summary>
        /// Gets or Sets ManualPayment
        /// </summary>
        [DataMember(Name = "manualPayment", EmitDefaultValue = false)]
        public EnergyPaymentScheduleManualPayment ManualPayment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyPaymentSchedule {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentScheduleUType: ").Append(PaymentScheduleUType).Append("\n");
            sb.Append("  CardDebit: ").Append(CardDebit).Append("\n");
            sb.Append("  DirectDebit: ").Append(DirectDebit).Append("\n");
            sb.Append("  ManualPayment: ").Append(ManualPayment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyPaymentSchedule);
        }

        /// <summary>
        /// Returns true if EnergyPaymentSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyPaymentSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyPaymentSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PaymentScheduleUType == input.PaymentScheduleUType ||
                    this.PaymentScheduleUType.Equals(input.PaymentScheduleUType)
                ) && 
                (
                    this.CardDebit == input.CardDebit ||
                    (this.CardDebit != null &&
                    this.CardDebit.Equals(input.CardDebit))
                ) && 
                (
                    this.DirectDebit == input.DirectDebit ||
                    (this.DirectDebit != null &&
                    this.DirectDebit.Equals(input.DirectDebit))
                ) && 
                (
                    this.ManualPayment == input.ManualPayment ||
                    (this.ManualPayment != null &&
                    this.ManualPayment.Equals(input.ManualPayment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentScheduleUType.GetHashCode();
                if (this.CardDebit != null)
                    hashCode = hashCode * 59 + this.CardDebit.GetHashCode();
                if (this.DirectDebit != null)
                    hashCode = hashCode * 59 + this.DirectDebit.GetHashCode();
                if (this.ManualPayment != null)
                    hashCode = hashCode * 59 + this.ManualPayment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
